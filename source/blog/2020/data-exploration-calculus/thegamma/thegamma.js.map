{"version":3,"file":"thegamma.js","sources":["../node_modules/core-js/library/modules/_defined.js","../node_modules/core-js/library/modules/_to-object.js","../node_modules/core-js/library/modules/_has.js","../node_modules/core-js/library/modules/_cof.js","../node_modules/core-js/library/modules/_iobject.js","../node_modules/core-js/library/modules/_to-iobject.js","../node_modules/core-js/library/modules/_to-integer.js","../node_modules/core-js/library/modules/_to-length.js","../node_modules/core-js/library/modules/_to-absolute-index.js","../node_modules/core-js/library/modules/_array-includes.js","../node_modules/core-js/library/modules/_global.js","../node_modules/core-js/library/modules/_shared.js","../node_modules/core-js/library/modules/_uid.js","../node_modules/core-js/library/modules/_shared-key.js","../node_modules/core-js/library/modules/_object-keys-internal.js","../node_modules/core-js/library/modules/_enum-bug-keys.js","../node_modules/core-js/library/modules/_object-keys.js","../node_modules/core-js/library/modules/_core.js","../node_modules/core-js/library/modules/_a-function.js","../node_modules/core-js/library/modules/_ctx.js","../node_modules/core-js/library/modules/_is-object.js","../node_modules/core-js/library/modules/_an-object.js","../node_modules/core-js/library/modules/_fails.js","../node_modules/core-js/library/modules/_descriptors.js","../node_modules/core-js/library/modules/_dom-create.js","../node_modules/core-js/library/modules/_ie8-dom-define.js","../node_modules/core-js/library/modules/_to-primitive.js","../node_modules/core-js/library/modules/_object-dp.js","../node_modules/core-js/library/modules/_property-desc.js","../node_modules/core-js/library/modules/_hide.js","../node_modules/core-js/library/modules/_export.js","../node_modules/core-js/library/modules/_object-sap.js","../node_modules/core-js/library/modules/es6.object.keys.js","../node_modules/core-js/library/fn/object/keys.js","../node_modules/babel-runtime/core-js/object/keys.js","../node_modules/core-js/library/modules/_string-at.js","../node_modules/core-js/library/modules/_library.js","../node_modules/core-js/library/modules/_redefine.js","../node_modules/core-js/library/modules/_iterators.js","../node_modules/core-js/library/modules/_object-dps.js","../node_modules/core-js/library/modules/_html.js","../node_modules/core-js/library/modules/_object-create.js","../node_modules/core-js/library/modules/_wks.js","../node_modules/core-js/library/modules/_set-to-string-tag.js","../node_modules/core-js/library/modules/_iter-create.js","../node_modules/core-js/library/modules/_object-gpo.js","../node_modules/core-js/library/modules/_iter-define.js","../node_modules/core-js/library/modules/es6.string.iterator.js","../node_modules/core-js/library/modules/_iter-call.js","../node_modules/core-js/library/modules/_is-array-iter.js","../node_modules/core-js/library/modules/_create-property.js","../node_modules/core-js/library/modules/_classof.js","../node_modules/core-js/library/modules/core.get-iterator-method.js","../node_modules/core-js/library/modules/_iter-detect.js","../node_modules/core-js/library/modules/es6.array.from.js","../node_modules/core-js/library/fn/array/from.js","../node_modules/babel-runtime/core-js/array/from.js","../node_modules/core-js/library/modules/_meta.js","../node_modules/core-js/library/modules/_wks-ext.js","../node_modules/core-js/library/modules/_wks-define.js","../node_modules/core-js/library/modules/_object-gops.js","../node_modules/core-js/library/modules/_object-pie.js","../node_modules/core-js/library/modules/_enum-keys.js","../node_modules/core-js/library/modules/_is-array.js","../node_modules/core-js/library/modules/_object-gopn.js","../node_modules/core-js/library/modules/_object-gopn-ext.js","../node_modules/core-js/library/modules/_object-gopd.js","../node_modules/core-js/library/modules/es6.symbol.js","../node_modules/core-js/library/modules/es7.symbol.async-iterator.js","../node_modules/core-js/library/modules/es7.symbol.observable.js","../node_modules/core-js/library/fn/symbol/index.js","../node_modules/babel-runtime/core-js/symbol.js","../node_modules/babel-runtime/helpers/classCallCheck.js","../node_modules/core-js/library/modules/es6.object.define-property.js","../node_modules/core-js/library/fn/object/define-property.js","../node_modules/babel-runtime/core-js/object/define-property.js","../node_modules/babel-runtime/helpers/createClass.js","../node_modules/core-js/library/modules/_add-to-unscopables.js","../node_modules/core-js/library/modules/_iter-step.js","../node_modules/core-js/library/modules/es6.array.iterator.js","../node_modules/core-js/library/modules/web.dom.iterable.js","../node_modules/core-js/library/fn/symbol/iterator.js","../node_modules/babel-runtime/core-js/symbol/iterator.js","../node_modules/babel-runtime/helpers/typeof.js","../node_modules/core-js/library/modules/_redefine-all.js","../node_modules/core-js/library/modules/_an-instance.js","../node_modules/core-js/library/modules/_for-of.js","../node_modules/core-js/library/modules/_set-species.js","../node_modules/core-js/library/modules/_validate-collection.js","../node_modules/core-js/library/modules/_collection-strong.js","../node_modules/core-js/library/modules/_array-species-constructor.js","../node_modules/core-js/library/modules/_array-species-create.js","../node_modules/core-js/library/modules/_array-methods.js","../node_modules/core-js/library/modules/_collection.js","../node_modules/core-js/library/modules/es6.map.js","../node_modules/core-js/library/modules/_array-from-iterable.js","../node_modules/core-js/library/modules/_collection-to-json.js","../node_modules/core-js/library/modules/es7.map.to-json.js","../node_modules/core-js/library/modules/_set-collection-of.js","../node_modules/core-js/library/modules/es7.map.of.js","../node_modules/core-js/library/modules/_set-collection-from.js","../node_modules/core-js/library/modules/es7.map.from.js","../node_modules/core-js/library/fn/map.js","../node_modules/babel-runtime/core-js/map.js","../node_modules/babel-runtime/helpers/defineProperty.js","../node_modules/core-js/library/modules/core.get-iterator.js","../node_modules/core-js/library/fn/get-iterator.js","../node_modules/babel-runtime/core-js/get-iterator.js","../node_modules/fable-core/Symbol.js","../node_modules/fable-core/Util.js","../node_modules/fable-core/Array.js","../node_modules/fable-core/ListClass.js","../node_modules/fable-core/Seq.js","../node_modules/fable-core/RegExp.js","../node_modules/fable-core/Long.js","../node_modules/fable-core/TimeSpan.js","../node_modules/fable-core/Date.js","../node_modules/fable-core/String.js","../node_modules/fable-core/GenericComparer.js","../node_modules/fable-core/Map.js","../node_modules/fable-core/List.js","../node_modules/fable-core/Set.js","../node_modules/fable-core/AsyncBuilder.js","../node_modules/fable-core/Choice.js","../node_modules/fable-core/Async.js","../src/libraries/common.fs","../src/thegamma/common/babel.fs","../src/thegamma/ast/ast.fs","../src/thegamma/providers/providers.fs","../src/bindings/babel.fs","../src/libraries/general.fs","../src/libraries/series.fs","../src/thegamma/codegen/runtime.fs","../src/libraries/google/core.fs","../src/libraries/google/options.fs","../src/libraries/google/extensions.fs","../src/libraries/google/charts.fs","../node_modules/x-is-array/index.js","../node_modules/virtual-dom/vnode/version.js","../node_modules/virtual-dom/vnode/vpatch.js","../node_modules/virtual-dom/vnode/is-vnode.js","../node_modules/virtual-dom/vnode/is-vtext.js","../node_modules/virtual-dom/vnode/is-widget.js","../node_modules/virtual-dom/vnode/is-thunk.js","../node_modules/virtual-dom/vnode/handle-thunk.js","../node_modules/is-object/index.js","../node_modules/virtual-dom/vnode/is-vhook.js","../node_modules/virtual-dom/vtree/diff-props.js","../node_modules/virtual-dom/vtree/diff.js","../node_modules/virtual-dom/diff.js","../node_modules/dom-walk/index.js","../node_modules/min-document/dom-comment.js","../node_modules/min-document/dom-text.js","../node_modules/min-document/event/dispatch-event.js","../node_modules/min-document/event/add-event-listener.js","../node_modules/min-document/event/remove-event-listener.js","../node_modules/min-document/serialize.js","../node_modules/min-document/dom-element.js","../node_modules/min-document/dom-fragment.js","../node_modules/min-document/event.js","../node_modules/min-document/document.js","../node_modules/min-document/index.js","../node_modules/global/document.js","../node_modules/virtual-dom/vdom/apply-properties.js","../node_modules/virtual-dom/vdom/create-element.js","../node_modules/virtual-dom/vdom/dom-index.js","../node_modules/virtual-dom/vdom/update-widget.js","../node_modules/virtual-dom/vdom/patch-op.js","../node_modules/virtual-dom/vdom/patch.js","../node_modules/virtual-dom/patch.js","../node_modules/virtual-dom/vnode/vnode.js","../node_modules/virtual-dom/vnode/vtext.js","../node_modules/browser-split/index.js","../node_modules/virtual-dom/virtual-hyperscript/parse-tag.js","../node_modules/virtual-dom/virtual-hyperscript/hooks/soft-set-hook.js","../node_modules/individual/index.js","../node_modules/individual/one-version.js","../node_modules/ev-store/index.js","../node_modules/virtual-dom/virtual-hyperscript/hooks/ev-hook.js","../node_modules/virtual-dom/virtual-hyperscript/index.js","../node_modules/virtual-dom/h.js","../node_modules/virtual-dom/create-element.js","../node_modules/virtual-dom/index.js","../node_modules/fable-core/Observable.js","../node_modules/fable-core/Event.js","../src/libraries/html.fs","../src/libraries/tables.fs","../node_modules/core-js/library/modules/es6.math.log10.js","../node_modules/core-js/library/fn/math/log10.js","../node_modules/babel-runtime/core-js/math/log10.js","../src/libraries/compost.fs","../src/libraries/interactive.fs","../src/thegamma/ast/astops.fs","../node_modules/fable-core/Lazy.js","../src/thegamma/analyzer/interpreter.fs","../src/thegamma/ast/typeops.fs","../src/thegamma/providers/fsharp.fs","../src/thegamma/providers/rest.fs","../src/thegamma/providers/pivot.fs","../src/thegamma/analyzer/binder.fs","../node_modules/fable-core/MailboxProcessor.js","../src/thegamma/ast/errors.fs","../node_modules/core-js/library/modules/_string-ws.js","../node_modules/core-js/library/modules/_string-trim.js","../node_modules/core-js/library/modules/_parse-float.js","../node_modules/core-js/library/modules/es6.number.parse-float.js","../node_modules/core-js/library/fn/number/parse-float.js","../node_modules/babel-runtime/core-js/number/parse-float.js","../src/thegamma/parser/tokenizer.fs","../src/thegamma/parser/parser.fs","../src/thegamma/analyzer/typechecker.fs","../src/thegamma/common/locations.fs","../src/thegamma/live/live.fs","../src/thegamma/services.fs","../src/thegamma/codegen/codegen.fs","../src/thegamma/live/pivot.fs","../src/thegamma/live/showable.fs","../src/thegamma/blocks.fs","../src/thegamma/monaco.fs","../src/thegamma/main.fs"],"sourcesContent":["// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","module.exports = true;\n","module.exports = require('./_hide');\n","module.exports = {};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/es6.array.from');\nmodule.exports = require('../../modules/_core').Array.from;\n","module.exports = { \"default\": require(\"core-js/library/fn/array/from\"), __esModule: true };","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = Object.getOwnPropertySymbols;\n","exports.f = {}.propertyIsEnumerable;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","module.exports = function () { /* empty */ };\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar meta = require('./_meta');\nvar fails = require('./_fails');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar setToStringTag = require('./_set-to-string-tag');\nvar dP = require('./_object-dp').f;\nvar each = require('./_array-methods')(0);\nvar DESCRIPTORS = require('./_descriptors');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function (target, iterable) {\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base();\n      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {\n        anInstance(this, C, KEY);\n        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    IS_WEAK || dP(C.prototype, 'size', {\n      get: function () {\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.map');\nrequire('../modules/es7.map.to-json');\nrequire('../modules/es7.map.of');\nrequire('../modules/es7.map.from');\nmodule.exports = require('../modules/_core').Map;\n","module.exports = { \"default\": require(\"core-js/library/fn/map\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (obj, key, value) {\n  if (key in obj) {\n    (0, _defineProperty2.default)(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","var fableGlobal = function () {\r\n    var globalObj = typeof window !== \"undefined\" ? window\r\n        : (typeof global !== \"undefined\" ? global\r\n            : (typeof self !== \"undefined\" ? self : {}));\r\n    if (typeof globalObj.__FABLE_CORE__ === \"undefined\") {\r\n        globalObj.__FABLE_CORE__ = {\r\n            types: new Map(),\r\n            symbols: {\r\n                reflection: Symbol(\"reflection\"),\r\n            }\r\n        };\r\n    }\r\n    return globalObj.__FABLE_CORE__;\r\n}();\r\nexport function setType(fullName, cons) {\r\n    fableGlobal.types.set(fullName, cons);\r\n}\r\nexport function getType(fullName) {\r\n    return fableGlobal.types.get(fullName);\r\n}\r\nexport default (fableGlobal.symbols);\r\n","import FSymbol from \"./Symbol\";\r\nvar NonDeclaredType = (function () {\r\n    function NonDeclaredType(kind, definition, generics) {\r\n        this.kind = kind;\r\n        this.definition = definition;\r\n        this.generics = generics;\r\n    }\r\n    NonDeclaredType.prototype.Equals = function (other) {\r\n        if (this.kind === other.kind && this.definition === other.definition) {\r\n            return typeof this.generics === \"object\"\r\n                ? equalsRecords(this.generics, other.generics)\r\n                : this.generics === other.generics;\r\n        }\r\n        return false;\r\n    };\r\n    return NonDeclaredType;\r\n}());\r\nexport { NonDeclaredType };\r\nexport var Any = new NonDeclaredType(\"Any\");\r\nexport var Unit = new NonDeclaredType(\"Unit\");\r\nexport function Option(t) {\r\n    return new NonDeclaredType(\"Option\", null, t);\r\n}\r\nfunction FableArray(t, isTypedArray) {\r\n    if (isTypedArray === void 0) { isTypedArray = false; }\r\n    var def = null, genArg = null;\r\n    if (isTypedArray) {\r\n        def = t;\r\n    }\r\n    else {\r\n        genArg = t;\r\n    }\r\n    return new NonDeclaredType(\"Array\", def, genArg);\r\n}\r\nexport { FableArray as Array };\r\nexport function Tuple(ts) {\r\n    return new NonDeclaredType(\"Tuple\", null, ts);\r\n}\r\nexport function GenericParam(definition) {\r\n    return new NonDeclaredType(\"GenericParam\", definition);\r\n}\r\nexport function Interface(definition) {\r\n    return new NonDeclaredType(\"Interface\", definition);\r\n}\r\nexport function makeGeneric(typeDef, genArgs) {\r\n    return new NonDeclaredType(\"GenericType\", typeDef, genArgs);\r\n}\r\nexport function isGeneric(typ) {\r\n    return typ instanceof NonDeclaredType && typ.kind === \"GenericType\";\r\n}\r\nexport function getDefinition(typ) {\r\n    return isGeneric(typ) ? typ.definition : typ;\r\n}\r\nexport function extendInfo(cons, info) {\r\n    var parent = Object.getPrototypeOf(cons.prototype);\r\n    if (typeof parent[FSymbol.reflection] === \"function\") {\r\n        var newInfo_1 = {}, parentInfo_1 = parent[FSymbol.reflection]();\r\n        Object.getOwnPropertyNames(info).forEach(function (k) {\r\n            var i = info[k];\r\n            if (typeof i === \"object\") {\r\n                newInfo_1[k] = Array.isArray(i)\r\n                    ? (parentInfo_1[k] || []).concat(i)\r\n                    : Object.assign(parentInfo_1[k] || {}, i);\r\n            }\r\n            else {\r\n                newInfo_1[k] = i;\r\n            }\r\n        });\r\n        return newInfo_1;\r\n    }\r\n    return info;\r\n}\r\nexport function hasInterface(obj, interfaceName) {\r\n    if (interfaceName === \"System.Collections.Generic.IEnumerable\") {\r\n        return typeof obj[Symbol.iterator] === \"function\";\r\n    }\r\n    else if (typeof obj[FSymbol.reflection] === \"function\") {\r\n        var interfaces = obj[FSymbol.reflection]().interfaces;\r\n        return Array.isArray(interfaces) && interfaces.indexOf(interfaceName) > -1;\r\n    }\r\n    return false;\r\n}\r\nexport function getPropertyNames(obj) {\r\n    if (obj == null) {\r\n        return [];\r\n    }\r\n    var propertyMap = typeof obj[FSymbol.reflection] === \"function\" ? obj[FSymbol.reflection]().properties || [] : obj;\r\n    return Object.getOwnPropertyNames(propertyMap);\r\n}\r\nexport function isArray(obj) {\r\n    return Array.isArray(obj) || ArrayBuffer.isView(obj);\r\n}\r\nexport function getRestParams(args, idx) {\r\n    for (var _len = args.length, restArgs = Array(_len > idx ? _len - idx : 0), _key = idx; _key < _len; _key++)\r\n        restArgs[_key - idx] = args[_key];\r\n    return restArgs;\r\n}\r\nexport function toString(o) {\r\n    return o != null && typeof o.ToString == \"function\" ? o.ToString() : String(o);\r\n}\r\nexport function hash(x) {\r\n    var s = JSON.stringify(x);\r\n    var h = 5381, i = 0, len = s.length;\r\n    while (i < len) {\r\n        h = (h * 33) ^ s.charCodeAt(i++);\r\n    }\r\n    return h;\r\n}\r\nexport function equals(x, y) {\r\n    if (x === y)\r\n        return true;\r\n    else if (x == null)\r\n        return y == null;\r\n    else if (y == null)\r\n        return false;\r\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\r\n        return false;\r\n    else if (typeof x.Equals === \"function\")\r\n        return x.Equals(y);\r\n    else if (Array.isArray(x)) {\r\n        if (x.length != y.length)\r\n            return false;\r\n        for (var i = 0; i < x.length; i++)\r\n            if (!equals(x[i], y[i]))\r\n                return false;\r\n        return true;\r\n    }\r\n    else if (ArrayBuffer.isView(x)) {\r\n        if (x.byteLength !== y.byteLength)\r\n            return false;\r\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\r\n        for (var i = 0; i < x.byteLength; i++)\r\n            if (dv1.getUint8(i) !== dv2.getUint8(i))\r\n                return false;\r\n        return true;\r\n    }\r\n    else if (x instanceof Date)\r\n        return x.getTime() == y.getTime();\r\n    else\r\n        return false;\r\n}\r\nexport function compare(x, y) {\r\n    if (x === y)\r\n        return 0;\r\n    if (x == null)\r\n        return y == null ? 0 : -1;\r\n    else if (y == null)\r\n        return 1;\r\n    else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y))\r\n        return -1;\r\n    else if (typeof x.CompareTo === \"function\")\r\n        return x.CompareTo(y);\r\n    else if (Array.isArray(x)) {\r\n        if (x.length != y.length)\r\n            return x.length < y.length ? -1 : 1;\r\n        for (var i = 0, j = 0; i < x.length; i++)\r\n            if ((j = compare(x[i], y[i])) !== 0)\r\n                return j;\r\n        return 0;\r\n    }\r\n    else if (ArrayBuffer.isView(x)) {\r\n        if (x.byteLength != y.byteLength)\r\n            return x.byteLength < y.byteLength ? -1 : 1;\r\n        var dv1 = new DataView(x.buffer), dv2 = new DataView(y.buffer);\r\n        for (var i = 0, b1 = 0, b2 = 0; i < x.byteLength; i++) {\r\n            b1 = dv1.getUint8(i), b2 = dv2.getUint8(i);\r\n            if (b1 < b2)\r\n                return -1;\r\n            if (b1 > b2)\r\n                return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    else if (x instanceof Date)\r\n        return compare(x.getTime(), y.getTime());\r\n    else\r\n        return x < y ? -1 : 1;\r\n}\r\nexport function equalsRecords(x, y) {\r\n    if (x === y) {\r\n        return true;\r\n    }\r\n    else {\r\n        var keys = getPropertyNames(x);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            if (!equals(x[keys[i]], y[keys[i]]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function compareRecords(x, y) {\r\n    if (x === y) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var keys = getPropertyNames(x);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            var res = compare(x[keys[i]], y[keys[i]]);\r\n            if (res !== 0)\r\n                return res;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport function equalsUnions(x, y) {\r\n    if (x === y) {\r\n        return true;\r\n    }\r\n    else if (x.Case !== y.Case) {\r\n        return false;\r\n    }\r\n    else {\r\n        for (var i = 0; i < x.Fields.length; i++) {\r\n            if (!equals(x.Fields[i], y.Fields[i]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function compareUnions(x, y) {\r\n    if (x === y) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var res = compare(x.Case, y.Case);\r\n        if (res !== 0)\r\n            return res;\r\n        for (var i = 0; i < x.Fields.length; i++) {\r\n            res = compare(x.Fields[i], y.Fields[i]);\r\n            if (res !== 0)\r\n                return res;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nexport function createDisposable(f) {\r\n    return _a = {\r\n            Dispose: f\r\n        },\r\n        _a[FSymbol.reflection] = function () { return { interfaces: [\"System.IDisposable\"] }; },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function createObj(fields) {\r\n    var iter = fields[Symbol.iterator]();\r\n    var cur = iter.next(), o = {};\r\n    while (!cur.done) {\r\n        o[cur.value[0]] = cur.value[1];\r\n        cur = iter.next();\r\n    }\r\n    return o;\r\n}\r\nexport function toPlainJsObj(source) {\r\n    if (source != null && source.constructor != Object) {\r\n        var target = {};\r\n        var props = Object.getOwnPropertyNames(source);\r\n        for (var i = 0; i < props.length; i++) {\r\n            target[props[i]] = source[props[i]];\r\n        }\r\n        var proto = Object.getPrototypeOf(source);\r\n        if (proto != null) {\r\n            props = Object.getOwnPropertyNames(proto);\r\n            for (var i = 0; i < props.length; i++) {\r\n                var prop = Object.getOwnPropertyDescriptor(proto, props[i]);\r\n                if (prop.value) {\r\n                    target[props[i]] = prop.value;\r\n                }\r\n                else if (prop.get) {\r\n                    target[props[i]] = prop.get.apply(source);\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    else {\r\n        return source;\r\n    }\r\n}\r\nexport function round(value, digits) {\r\n    if (digits === void 0) { digits = 0; }\r\n    var m = Math.pow(10, digits);\r\n    var n = +(digits ? value * m : value).toFixed(8);\r\n    var i = Math.floor(n), f = n - i;\r\n    var e = 1e-8;\r\n    var r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 == 0) ? i : i + 1) : Math.round(n);\r\n    return digits ? r / m : r;\r\n}\r\nexport function randomNext(min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nexport function defaultArg(arg, defaultValue, f) {\r\n    return arg == null ? defaultValue : (f != null ? f(arg) : arg);\r\n}\r\n","export function addRangeInPlace(range, xs) {\r\n    var iter = range[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    while (!cur.done) {\r\n        xs.push(cur.value);\r\n        cur = iter.next();\r\n    }\r\n}\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    while (count--)\r\n        target[targetIndex++] = source[sourceIndex++];\r\n}\r\nexport function partition(f, xs) {\r\n    var ys = [], zs = [], j = 0, k = 0;\r\n    for (var i = 0; i < xs.length; i++)\r\n        if (f(xs[i]))\r\n            ys[j++] = xs[i];\r\n        else\r\n            zs[k++] = xs[i];\r\n    return [ys, zs];\r\n}\r\nexport function permute(f, xs) {\r\n    var ys = xs.map(function () { return null; });\r\n    var checkFlags = new Array(xs.length);\r\n    for (var i = 0; i < xs.length; i++) {\r\n        var j = f(i);\r\n        if (j < 0 || j >= xs.length)\r\n            throw new Error(\"Not a valid permutation\");\r\n        ys[j] = xs[i];\r\n        checkFlags[j] = 1;\r\n    }\r\n    for (var i = 0; i < xs.length; i++)\r\n        if (checkFlags[i] != 1)\r\n            throw new Error(\"Not a valid permutation\");\r\n    return ys;\r\n}\r\nexport function removeInPlace(item, xs) {\r\n    var i = xs.indexOf(item);\r\n    if (i > -1) {\r\n        xs.splice(i, 1);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function setSlice(target, lower, upper, source) {\r\n    var length = (upper || target.length - 1) - lower;\r\n    if (ArrayBuffer.isView(target) && source.length <= length)\r\n        target.set(source, lower);\r\n    else\r\n        for (var i = lower | 0, j = 0; j <= length; i++, j++)\r\n            target[i] = source[j];\r\n}\r\nexport function sortInPlaceBy(f, xs, dir) {\r\n    if (dir === void 0) { dir = 1; }\r\n    return xs.sort(function (x, y) {\r\n        x = f(x);\r\n        y = f(y);\r\n        return (x < y ? -1 : x == y ? 0 : 1) * dir;\r\n    });\r\n}\r\nexport function unzip(xs) {\r\n    var bs = new Array(xs.length), cs = new Array(xs.length);\r\n    for (var i = 0; i < xs.length; i++) {\r\n        bs[i] = xs[i][0];\r\n        cs[i] = xs[i][1];\r\n    }\r\n    return [bs, cs];\r\n}\r\nexport function unzip3(xs) {\r\n    var bs = new Array(xs.length), cs = new Array(xs.length), ds = new Array(xs.length);\r\n    for (var i = 0; i < xs.length; i++) {\r\n        bs[i] = xs[i][0];\r\n        cs[i] = xs[i][1];\r\n        ds[i] = xs[i][2];\r\n    }\r\n    return [bs, cs, ds];\r\n}\r\nexport function getSubArray(xs, startIndex, count) {\r\n    return xs.slice(startIndex, startIndex + count);\r\n}\r\nexport function fill(target, targetIndex, count, value) {\r\n    target.fill(value, targetIndex, targetIndex + count);\r\n}\r\n","import FSymbol from \"./Symbol\";\r\nimport { toString } from \"./Util\";\r\nimport { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nexport function ofArray(args, base) {\r\n    var acc = base || new List();\r\n    for (var i = args.length - 1; i >= 0; i--) {\r\n        acc = new List(args[i], acc);\r\n    }\r\n    return acc;\r\n}\r\nvar List = (function () {\r\n    function List(head, tail) {\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    List.prototype.ToString = function () {\r\n        return \"[\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    List.prototype.Equals = function (x) {\r\n        if (this === x) {\r\n            return true;\r\n        }\r\n        else {\r\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\r\n            for (;;) {\r\n                var cur1 = iter1.next(), cur2 = iter2.next();\r\n                if (cur1.done)\r\n                    return cur2.done ? true : false;\r\n                else if (cur2.done)\r\n                    return false;\r\n                else if (!equals(cur1.value, cur2.value))\r\n                    return false;\r\n            }\r\n        }\r\n    };\r\n    List.prototype.CompareTo = function (x) {\r\n        if (this === x) {\r\n            return 0;\r\n        }\r\n        else {\r\n            var acc = 0;\r\n            var iter1 = this[Symbol.iterator](), iter2 = x[Symbol.iterator]();\r\n            for (;;) {\r\n                var cur1 = iter1.next(), cur2 = iter2.next();\r\n                if (cur1.done)\r\n                    return cur2.done ? acc : -1;\r\n                else if (cur2.done)\r\n                    return 1;\r\n                else {\r\n                    acc = compare(cur1.value, cur2.value);\r\n                    if (acc != 0)\r\n                        return acc;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(List.prototype, \"length\", {\r\n        get: function () {\r\n            var cur = this, acc = 0;\r\n            while (cur.tail != null) {\r\n                cur = cur.tail;\r\n                acc++;\r\n            }\r\n            return acc;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    List.prototype[Symbol.iterator] = function () {\r\n        var cur = this;\r\n        return {\r\n            next: function () {\r\n                var tmp = cur;\r\n                cur = cur.tail;\r\n                return { done: tmp.tail == null, value: tmp.head };\r\n            }\r\n        };\r\n    };\r\n    List.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpList\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return List;\r\n}());\r\nexport default List;\r\n","import { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nimport { permute as arrayPermute } from \"./Array\";\r\nimport List from \"./ListClass\";\r\nvar Enumerator = (function () {\r\n    function Enumerator(iter) {\r\n        this.iter = iter;\r\n    }\r\n    Enumerator.prototype.MoveNext = function () {\r\n        var cur = this.iter.next();\r\n        this.current = cur.value;\r\n        return !cur.done;\r\n    };\r\n    Object.defineProperty(Enumerator.prototype, \"Current\", {\r\n        get: function () {\r\n            return this.current;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Enumerator.prototype.Reset = function () {\r\n        throw new Error(\"JS iterators cannot be reset\");\r\n    };\r\n    Enumerator.prototype.Dispose = function () { };\r\n    return Enumerator;\r\n}());\r\nexport { Enumerator };\r\nexport function getEnumerator(o) {\r\n    return typeof o.GetEnumerator === \"function\"\r\n        ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());\r\n}\r\nexport function toIterator(en) {\r\n    return {\r\n        next: function () {\r\n            return en.MoveNext()\r\n                ? { done: false, value: en.Current }\r\n                : { done: true, value: null };\r\n        }\r\n    };\r\n}\r\nfunction __failIfNone(res) {\r\n    if (res == null)\r\n        throw new Error(\"Seq did not contain any matching element\");\r\n    return res;\r\n}\r\nexport function toList(xs) {\r\n    return foldBack(function (x, acc) {\r\n        return new List(x, acc);\r\n    }, xs, new List());\r\n}\r\nexport function ofList(xs) {\r\n    return delay(function () { return unfold(function (x) { return x.tail != null ? [x.head, x.tail] : null; }, xs); });\r\n}\r\nexport function ofArray(xs) {\r\n    return delay(function () { return unfold(function (i) { return i < xs.length ? [xs[i], i + 1] : null; }, 0); });\r\n}\r\nexport function append(xs, ys) {\r\n    return delay(function () {\r\n        var firstDone = false;\r\n        var i = xs[Symbol.iterator]();\r\n        var iters = [i, null];\r\n        return unfold(function () {\r\n            var cur;\r\n            if (!firstDone) {\r\n                cur = iters[0].next();\r\n                if (!cur.done) {\r\n                    return [cur.value, iters];\r\n                }\r\n                else {\r\n                    firstDone = true;\r\n                    iters = [null, ys[Symbol.iterator]()];\r\n                }\r\n            }\r\n            cur = iters[1].next();\r\n            return !cur.done ? [cur.value, iters] : null;\r\n        }, iters);\r\n    });\r\n}\r\nexport function average(xs) {\r\n    var count = 1;\r\n    var sum = reduce(function (acc, x) {\r\n        count++;\r\n        return acc + x;\r\n    }, xs);\r\n    return sum / count;\r\n}\r\nexport function averageBy(f, xs) {\r\n    var count = 1;\r\n    var sum = reduce(function (acc, x) {\r\n        count++;\r\n        return (count === 2 ? f(acc) : acc) + f(x);\r\n    }, xs);\r\n    return sum / count;\r\n}\r\nexport function concat(xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        var output = { value: null };\r\n        return unfold(function (innerIter) {\r\n            var hasFinished = false;\r\n            while (!hasFinished) {\r\n                if (innerIter == null) {\r\n                    var cur = iter.next();\r\n                    if (!cur.done) {\r\n                        innerIter = cur.value[Symbol.iterator]();\r\n                    }\r\n                    else {\r\n                        hasFinished = true;\r\n                    }\r\n                }\r\n                else {\r\n                    var cur = innerIter.next();\r\n                    if (!cur.done) {\r\n                        output = { value: cur.value };\r\n                        hasFinished = true;\r\n                    }\r\n                    else {\r\n                        innerIter = null;\r\n                    }\r\n                }\r\n            }\r\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\r\n        }, null);\r\n    });\r\n}\r\nexport function collect(f, xs) {\r\n    return concat(map(f, xs));\r\n}\r\nexport function choose(f, xs) {\r\n    var trySkipToNext = function (iter) {\r\n        var cur = iter.next();\r\n        if (!cur.done) {\r\n            var y = f(cur.value);\r\n            return y != null ? [y, iter] : trySkipToNext(iter);\r\n        }\r\n        return void 0;\r\n    };\r\n    return delay(function () {\r\n        return unfold(function (iter) {\r\n            return trySkipToNext(iter);\r\n        }, xs[Symbol.iterator]());\r\n    });\r\n}\r\nexport function compareWith(f, xs, ys) {\r\n    var nonZero = tryFind(function (i) { return i != 0; }, map2(function (x, y) { return f(x, y); }, xs, ys));\r\n    return nonZero != null ? nonZero : count(xs) - count(ys);\r\n}\r\nexport function delay(f) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () { return f()[Symbol.iterator](); },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function empty() {\r\n    return unfold(function () { return void 0; });\r\n}\r\nexport function enumerateWhile(cond, xs) {\r\n    return concat(unfold(function () { return cond() ? [xs, true] : null; }));\r\n}\r\nexport function enumerateThenFinally(xs, finalFn) {\r\n    return delay(function () {\r\n        var iter;\r\n        try {\r\n            iter = xs[Symbol.iterator]();\r\n        }\r\n        catch (err) {\r\n            return void 0;\r\n        }\r\n        finally {\r\n            finalFn();\r\n        }\r\n        return unfold(function (iter) {\r\n            try {\r\n                var cur = iter.next();\r\n                return !cur.done ? [cur.value, iter] : null;\r\n            }\r\n            catch (err) {\r\n                return void 0;\r\n            }\r\n            finally {\r\n                finalFn();\r\n            }\r\n        }, iter);\r\n    });\r\n}\r\nexport function enumerateUsing(disp, work) {\r\n    var isDisposed = false;\r\n    var disposeOnce = function () {\r\n        if (!isDisposed) {\r\n            isDisposed = true;\r\n            disp.Dispose();\r\n        }\r\n    };\r\n    try {\r\n        return enumerateThenFinally(work(disp), disposeOnce);\r\n    }\r\n    catch (err) {\r\n        return void 0;\r\n    }\r\n    finally {\r\n        disposeOnce();\r\n    }\r\n}\r\nexport function exactlyOne(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var fst = iter.next();\r\n    if (fst.done)\r\n        throw new Error(\"Seq was empty\");\r\n    var snd = iter.next();\r\n    if (!snd.done)\r\n        throw new Error(\"Seq had multiple items\");\r\n    return fst.value;\r\n}\r\nexport function except(itemsToExclude, source) {\r\n    var exclusionItems = Array.from(itemsToExclude);\r\n    var testIsNotInExclusionItems = function (element) { return !exclusionItems.some(function (excludedItem) { return equals(excludedItem, element); }); };\r\n    return filter(testIsNotInExclusionItems, source);\r\n}\r\nexport function exists(f, xs) {\r\n    function aux(iter) {\r\n        var cur = iter.next();\r\n        return !cur.done && (f(cur.value) || aux(iter));\r\n    }\r\n    return aux(xs[Symbol.iterator]());\r\n}\r\nexport function exists2(f, xs, ys) {\r\n    function aux(iter1, iter2) {\r\n        var cur1 = iter1.next(), cur2 = iter2.next();\r\n        return !cur1.done && !cur2.done && (f(cur1.value, cur2.value) || aux(iter1, iter2));\r\n    }\r\n    return aux(xs[Symbol.iterator](), ys[Symbol.iterator]());\r\n}\r\nexport function filter(f, xs) {\r\n    function trySkipToNext(iter) {\r\n        var cur = iter.next();\r\n        while (!cur.done) {\r\n            if (f(cur.value)) {\r\n                return [cur.value, iter];\r\n            }\r\n            cur = iter.next();\r\n        }\r\n        return void 0;\r\n    }\r\n    return delay(function () { return unfold(trySkipToNext, xs[Symbol.iterator]()); });\r\n}\r\nexport function where(f, xs) {\r\n    return filter(f, xs);\r\n}\r\nexport function fold(f, acc, xs) {\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\r\n        return xs.reduce(f, acc);\r\n    }\r\n    else {\r\n        var cur = void 0;\r\n        for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n            cur = iter.next();\r\n            if (cur.done)\r\n                break;\r\n            acc = f(acc, cur.value, i);\r\n        }\r\n        return acc;\r\n    }\r\n}\r\nexport function foldBack(f, xs, acc) {\r\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        acc = f(arr[i], acc, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function fold2(f, acc, xs, ys) {\r\n    var iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();\r\n    var cur1, cur2;\r\n    for (var i = 0;; i++) {\r\n        cur1 = iter1.next();\r\n        cur2 = iter2.next();\r\n        if (cur1.done || cur2.done) {\r\n            break;\r\n        }\r\n        acc = f(acc, cur1.value, cur2.value, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function foldBack2(f, xs, ys, acc) {\r\n    var ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    var ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\r\n    for (var i = ar1.length - 1; i >= 0; i--) {\r\n        acc = f(ar1[i], ar2[i], acc, i);\r\n    }\r\n    return acc;\r\n}\r\nexport function forAll(f, xs) {\r\n    return fold(function (acc, x) { return acc && f(x); }, true, xs);\r\n}\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2(function (acc, x, y) { return acc && f(x, y); }, true, xs, ys);\r\n}\r\nexport function tryHead(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    return cur.done ? null : cur.value;\r\n}\r\nexport function head(xs) {\r\n    return __failIfNone(tryHead(xs));\r\n}\r\nexport function initialize(n, f) {\r\n    return delay(function () {\r\n        return unfold(function (i) { return i < n ? [f(i), i + 1] : null; }, 0);\r\n    });\r\n}\r\nexport function initializeInfinite(f) {\r\n    return delay(function () {\r\n        return unfold(function (i) { return [f(i), i + 1]; }, 0);\r\n    });\r\n}\r\nexport function tryItem(i, xs) {\r\n    if (i < 0)\r\n        return null;\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\r\n        return i < xs.length ? xs[i] : null;\r\n    for (var j = 0, iter = xs[Symbol.iterator]();; j++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return null;\r\n        if (j === i)\r\n            return cur.value;\r\n    }\r\n}\r\nexport function item(i, xs) {\r\n    return __failIfNone(tryItem(i, xs));\r\n}\r\nexport function iterate(f, xs) {\r\n    fold(function (_, x) { return f(x); }, null, xs);\r\n}\r\nexport function iterate2(f, xs, ys) {\r\n    fold2(function (_, x, y) { return f(x, y); }, null, xs, ys);\r\n}\r\nexport function iterateIndexed(f, xs) {\r\n    fold(function (_, x, i) { return f(i, x); }, null, xs);\r\n}\r\nexport function iterateIndexed2(f, xs, ys) {\r\n    fold2(function (_, x, y, i) { return f(i, x, y); }, null, xs, ys);\r\n}\r\nexport function isEmpty(xs) {\r\n    var i = xs[Symbol.iterator]();\r\n    return i.next().done;\r\n}\r\nexport function tryLast(xs) {\r\n    try {\r\n        return reduce(function (_, x) { return x; }, xs);\r\n    }\r\n    catch (err) {\r\n        return null;\r\n    }\r\n}\r\nexport function last(xs) {\r\n    return __failIfNone(tryLast(xs));\r\n}\r\nexport function count(xs) {\r\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\r\n        ? xs.length\r\n        : fold(function (acc, x) { return acc + 1; }, 0, xs);\r\n}\r\nexport function map(f, xs) {\r\n    return delay(function () { return unfold(function (iter) {\r\n        var cur = iter.next();\r\n        return !cur.done ? [f(cur.value), iter] : null;\r\n    }, xs[Symbol.iterator]()); });\r\n}\r\nexport function mapIndexed(f, xs) {\r\n    return delay(function () {\r\n        var i = 0;\r\n        return unfold(function (iter) {\r\n            var cur = iter.next();\r\n            return !cur.done ? [f(i++, cur.value), iter] : null;\r\n        }, xs[Symbol.iterator]());\r\n    });\r\n}\r\nexport function map2(f, xs, ys) {\r\n    return delay(function () {\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next();\r\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function mapIndexed2(f, xs, ys) {\r\n    return delay(function () {\r\n        var i = 0;\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next();\r\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function map3(f, xs, ys, zs) {\r\n    return delay(function () {\r\n        var iter1 = xs[Symbol.iterator]();\r\n        var iter2 = ys[Symbol.iterator]();\r\n        var iter3 = zs[Symbol.iterator]();\r\n        return unfold(function () {\r\n            var cur1 = iter1.next(), cur2 = iter2.next(), cur3 = iter3.next();\r\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\r\n        });\r\n    });\r\n}\r\nexport function mapFold(f, acc, xs) {\r\n    var result = [];\r\n    var r;\r\n    var cur;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        _a = f(acc, cur.value), r = _a[0], acc = _a[1];\r\n        result.push(r);\r\n    }\r\n    return [result, acc];\r\n    var _a;\r\n}\r\nexport function mapFoldBack(f, xs, acc) {\r\n    var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    var result = [];\r\n    var r;\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        _a = f(arr[i], acc), r = _a[0], acc = _a[1];\r\n        result.push(r);\r\n    }\r\n    return [result, acc];\r\n    var _a;\r\n}\r\nexport function max(xs) {\r\n    return reduce(function (acc, x) { return compare(acc, x) === 1 ? acc : x; }, xs);\r\n}\r\nexport function maxBy(f, xs) {\r\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === 1 ? acc : x; }, xs);\r\n}\r\nexport function min(xs) {\r\n    return reduce(function (acc, x) { return compare(acc, x) === -1 ? acc : x; }, xs);\r\n}\r\nexport function minBy(f, xs) {\r\n    return reduce(function (acc, x) { return compare(f(acc), f(x)) === -1 ? acc : x; }, xs);\r\n}\r\nexport function pairwise(xs) {\r\n    return skip(2, scan(function (last, next) { return [last[1], next]; }, [0, 0], xs));\r\n}\r\nexport function permute(f, xs) {\r\n    return ofArray(arrayPermute(f, Array.from(xs)));\r\n}\r\nexport function rangeStep(first, step, last) {\r\n    if (step === 0)\r\n        throw new Error(\"Step cannot be 0\");\r\n    return delay(function () { return unfold(function (x) { return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null; }, first); });\r\n}\r\nexport function rangeChar(first, last) {\r\n    return delay(function () { return unfold(function (x) { return x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null; }, first); });\r\n}\r\nexport function range(first, last) {\r\n    return rangeStep(first, 1, last);\r\n}\r\nexport function readOnly(xs) {\r\n    return map(function (x) { return x; }, xs);\r\n}\r\nexport function reduce(f, xs) {\r\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs))\r\n        return xs.reduce(f);\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    if (cur.done)\r\n        throw new Error(\"Seq was empty\");\r\n    var acc = cur.value;\r\n    for (;;) {\r\n        cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        acc = f(acc, cur.value);\r\n    }\r\n    return acc;\r\n}\r\nexport function reduceBack(f, xs) {\r\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\r\n    if (ar.length === 0)\r\n        throw new Error(\"Seq was empty\");\r\n    var acc = ar[ar.length - 1];\r\n    for (var i = ar.length - 2; i >= 0; i--)\r\n        acc = f(ar[i], acc, i);\r\n    return acc;\r\n}\r\nexport function replicate(n, x) {\r\n    return initialize(n, function () { return x; });\r\n}\r\nexport function reverse(xs) {\r\n    var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\r\n    return ofArray(ar.reverse());\r\n}\r\nexport function scan(f, seed, xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (acc) {\r\n            if (acc == null)\r\n                return [seed, seed];\r\n            var cur = iter.next();\r\n            if (!cur.done) {\r\n                acc = f(acc, cur.value);\r\n                return [acc, acc];\r\n            }\r\n            return void 0;\r\n        }, null);\r\n    });\r\n}\r\nexport function scanBack(f, xs, seed) {\r\n    return reverse(scan(function (acc, x) { return f(x, acc); }, seed, reverse(xs)));\r\n}\r\nexport function singleton(x) {\r\n    return unfold(function (x) { return x != null ? [x, null] : null; }, x);\r\n}\r\nexport function skip(n, xs) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () {\r\n            var iter = xs[Symbol.iterator]();\r\n            for (var i = 1; i <= n; i++)\r\n                if (iter.next().done)\r\n                    throw new Error(\"Seq has not enough elements\");\r\n            return iter;\r\n        },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function skipWhile(f, xs) {\r\n    return delay(function () {\r\n        var hasPassed = false;\r\n        return filter(function (x) { return hasPassed || (hasPassed = !f(x)); }, xs);\r\n    });\r\n}\r\nexport function sortWith(f, xs) {\r\n    var ys = Array.from(xs);\r\n    return ofArray(ys.sort(f));\r\n}\r\nexport function sum(xs) {\r\n    return fold(function (acc, x) { return acc + x; }, 0, xs);\r\n}\r\nexport function sumBy(f, xs) {\r\n    return fold(function (acc, x) { return acc + f(x); }, 0, xs);\r\n}\r\nexport function tail(xs) {\r\n    var iter = xs[Symbol.iterator]();\r\n    var cur = iter.next();\r\n    if (cur.done)\r\n        throw new Error(\"Seq was empty\");\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () { return iter; },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function take(n, xs, truncate) {\r\n    if (truncate === void 0) { truncate = false; }\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (i) {\r\n            if (i < n) {\r\n                var cur = iter.next();\r\n                if (!cur.done)\r\n                    return [cur.value, i + 1];\r\n                if (!truncate)\r\n                    throw new Error(\"Seq has not enough elements\");\r\n            }\r\n            return void 0;\r\n        }, 0);\r\n    });\r\n}\r\nexport function truncate(n, xs) {\r\n    return take(n, xs, true);\r\n}\r\nexport function takeWhile(f, xs) {\r\n    return delay(function () {\r\n        var iter = xs[Symbol.iterator]();\r\n        return unfold(function (i) {\r\n            var cur = iter.next();\r\n            if (!cur.done && f(cur.value))\r\n                return [cur.value, null];\r\n            return void 0;\r\n        }, 0);\r\n    });\r\n}\r\nexport function tryFind(f, xs, defaultValue) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return defaultValue === void 0 ? null : defaultValue;\r\n        if (f(cur.value, i))\r\n            return cur.value;\r\n    }\r\n}\r\nexport function find(f, xs) {\r\n    return __failIfNone(tryFind(f, xs));\r\n}\r\nexport function tryFindBack(f, xs, defaultValue) {\r\n    var match = null;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return match === null ? (defaultValue === void 0 ? null : defaultValue) : match;\r\n        if (f(cur.value, i))\r\n            match = cur.value;\r\n    }\r\n}\r\nexport function findBack(f, xs) {\r\n    return __failIfNone(tryFindBack(f, xs));\r\n}\r\nexport function tryFindIndex(f, xs) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return null;\r\n        if (f(cur.value, i))\r\n            return i;\r\n    }\r\n}\r\nexport function findIndex(f, xs) {\r\n    return __failIfNone(tryFindIndex(f, xs));\r\n}\r\nexport function tryFindIndexBack(f, xs) {\r\n    var match = -1;\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            return match === -1 ? null : match;\r\n        if (f(cur.value, i))\r\n            match = i;\r\n    }\r\n}\r\nexport function findIndexBack(f, xs) {\r\n    return __failIfNone(tryFindIndexBack(f, xs));\r\n}\r\nexport function tryPick(f, xs) {\r\n    for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\r\n        var cur = iter.next();\r\n        if (cur.done)\r\n            break;\r\n        var y = f(cur.value, i);\r\n        if (y != null)\r\n            return y;\r\n    }\r\n    return void 0;\r\n}\r\nexport function pick(f, xs) {\r\n    return __failIfNone(tryPick(f, xs));\r\n}\r\nexport function unfold(f, acc) {\r\n    return _a = {},\r\n        _a[Symbol.iterator] = function () {\r\n            return {\r\n                next: function () {\r\n                    var res = f(acc);\r\n                    if (res != null) {\r\n                        acc = res[1];\r\n                        return { done: false, value: res[0] };\r\n                    }\r\n                    return { done: true };\r\n                }\r\n            };\r\n        },\r\n        _a;\r\n    var _a;\r\n}\r\nexport function zip(xs, ys) {\r\n    return map2(function (x, y) { return [x, y]; }, xs, ys);\r\n}\r\nexport function zip3(xs, ys, zs) {\r\n    return map3(function (x, y, z) { return [x, y, z]; }, xs, ys, zs);\r\n}\r\n","export function create(pattern, options) {\r\n    var flags = \"g\";\r\n    flags += options & 1 ? \"i\" : \"\";\r\n    flags += options & 2 ? \"m\" : \"\";\r\n    return new RegExp(pattern, flags);\r\n}\r\nexport function escape(str) {\r\n    return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n}\r\nexport function unescape(str) {\r\n    return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\r\n}\r\nexport function isMatch(str, pattern, options) {\r\n    if (options === void 0) { options = 0; }\r\n    var reg = str instanceof RegExp\r\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\r\n        : reg = create(pattern, options);\r\n    return reg.test(str);\r\n}\r\nexport function match(str, pattern, options) {\r\n    if (options === void 0) { options = 0; }\r\n    var reg = str instanceof RegExp\r\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\r\n        : reg = create(pattern, options);\r\n    return reg.exec(str);\r\n}\r\nexport function matches(str, pattern, options) {\r\n    if (options === void 0) { options = 0; }\r\n    var reg = str instanceof RegExp\r\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\r\n        : reg = create(pattern, options);\r\n    if (!reg.global)\r\n        throw new Error(\"Non-global RegExp\");\r\n    var m;\r\n    var matches = [];\r\n    while ((m = reg.exec(str)) !== null)\r\n        matches.push(m);\r\n    return matches;\r\n}\r\nexport function options(reg) {\r\n    var options = 256;\r\n    options |= reg.ignoreCase ? 1 : 0;\r\n    options |= reg.multiline ? 2 : 0;\r\n    return options;\r\n}\r\nexport function replace(reg, input, replacement, limit, offset) {\r\n    if (offset === void 0) { offset = 0; }\r\n    function replacer() {\r\n        var res = arguments[0];\r\n        if (limit !== 0) {\r\n            limit--;\r\n            var match_1 = [];\r\n            var len = arguments.length;\r\n            for (var i = 0; i < len - 2; i++)\r\n                match_1.push(arguments[i]);\r\n            match_1.index = arguments[len - 2];\r\n            match_1.input = arguments[len - 1];\r\n            res = replacement(match_1);\r\n        }\r\n        return res;\r\n    }\r\n    if (typeof reg == \"string\") {\r\n        var tmp = reg;\r\n        reg = create(input, limit);\r\n        input = tmp;\r\n        limit = undefined;\r\n    }\r\n    if (typeof replacement == \"function\") {\r\n        limit = limit == null ? -1 : limit;\r\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\r\n    }\r\n    else {\r\n        if (limit != null) {\r\n            var m = void 0;\r\n            var sub1 = input.substring(offset);\r\n            var _matches = matches(reg, sub1);\r\n            var sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\r\n            return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);\r\n        }\r\n        else {\r\n            return input.replace(reg, replacement);\r\n        }\r\n    }\r\n}\r\nexport function split(reg, input, limit, offset) {\r\n    if (offset === void 0) { offset = 0; }\r\n    if (typeof reg == \"string\") {\r\n        var tmp = reg;\r\n        reg = create(input, limit);\r\n        input = tmp;\r\n        limit = undefined;\r\n    }\r\n    input = input.substring(offset);\r\n    return input.split(reg, limit);\r\n}\r\n","import _Symbol from \"./Symbol\";\r\nvar Long = (function () {\r\n    function Long(low, high, unsigned) {\r\n        this.eq = this.equals;\r\n        this.neq = this.notEquals;\r\n        this.lt = this.lessThan;\r\n        this.lte = this.lessThanOrEqual;\r\n        this.gt = this.greaterThan;\r\n        this.gte = this.greaterThanOrEqual;\r\n        this.comp = this.compare;\r\n        this.neg = this.negate;\r\n        this.abs = this.absolute;\r\n        this.sub = this.subtract;\r\n        this.mul = this.multiply;\r\n        this.div = this.divide;\r\n        this.mod = this.modulo;\r\n        this.shl = this.shiftLeft;\r\n        this.shr = this.shiftRight;\r\n        this.shru = this.shiftRightUnsigned;\r\n        this.Equals = this.equals;\r\n        this.CompareTo = this.compare;\r\n        this.ToString = this.toString;\r\n        this.low = low | 0;\r\n        this.high = high | 0;\r\n        this.unsigned = !!unsigned;\r\n    }\r\n    Long.prototype.toInt = function () {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n    Long.prototype.toNumber = function () {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n    Long.prototype.toString = function (radix) {\r\n        if (radix === void 0) { radix = 10; }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) {\r\n            if (this.eq(MIN_VALUE)) {\r\n                var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            }\r\n            else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n    Long.prototype.getHighBits = function () {\r\n        return this.high;\r\n    };\r\n    Long.prototype.getHighBitsUnsigned = function () {\r\n        return this.high >>> 0;\r\n    };\r\n    Long.prototype.getLowBits = function () {\r\n        return this.low;\r\n    };\r\n    Long.prototype.getLowBitsUnsigned = function () {\r\n        return this.low >>> 0;\r\n    };\r\n    Long.prototype.getNumBitsAbs = function () {\r\n        if (this.isNegative())\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n    Long.prototype.isZero = function () {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n    Long.prototype.isNegative = function () {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n    Long.prototype.isPositive = function () {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n    Long.prototype.isOdd = function () {\r\n        return (this.low & 1) === 1;\r\n    };\r\n    Long.prototype.isEven = function () {\r\n        return (this.low & 1) === 0;\r\n    };\r\n    Long.prototype.equals = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n    Long.prototype.notEquals = function (other) {\r\n        return !this.eq(other);\r\n    };\r\n    Long.prototype.lessThan = function (other) {\r\n        return this.comp(other) < 0;\r\n    };\r\n    Long.prototype.lessThanOrEqual = function (other) {\r\n        return this.comp(other) <= 0;\r\n    };\r\n    Long.prototype.greaterThan = function (other) {\r\n        return this.comp(other) > 0;\r\n    };\r\n    Long.prototype.greaterThanOrEqual = function (other) {\r\n        return this.comp(other) >= 0;\r\n    };\r\n    Long.prototype.compare = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(), otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n    Long.prototype.negate = function () {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n    Long.prototype.absolute = function () {\r\n        if (!this.unsigned && this.isNegative())\r\n            return this.negate();\r\n        else\r\n            return this;\r\n    };\r\n    Long.prototype.add = function (addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n    Long.prototype.subtract = function (subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n    Long.prototype.multiply = function (multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        }\r\n        else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n    Long.prototype.divide = function (divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx = 0, rem = ZERO, res = ZERO;\r\n        if (!this.unsigned) {\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    var halfThis = this.shr(1);\r\n                    var approx_1 = halfThis.div(divisor).shl(1);\r\n                    if (approx_1.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    }\r\n                    else {\r\n                        rem = this.sub(divisor.mul(approx_1));\r\n                        res = approx_1.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            }\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            }\r\n            else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        }\r\n        else {\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1)))\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n    Long.prototype.modulo = function (divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n    ;\r\n    Long.prototype.not = function () {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n    ;\r\n    Long.prototype.and = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n    Long.prototype.or = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n    Long.prototype.xor = function (other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n    Long.prototype.shiftLeft = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n    Long.prototype.shiftRight = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n    Long.prototype.shiftRightUnsigned = function (numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits = numBits & 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            }\r\n            else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n    Long.prototype.toSigned = function () {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n    Long.prototype.toUnsigned = function () {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n    Long.prototype.toBytes = function (le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    };\r\n    Long.prototype.toBytesLE = function () {\r\n        var hi = this.high, lo = this.low;\r\n        return [\r\n            lo & 0xff,\r\n            (lo >>> 8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            hi & 0xff,\r\n            (hi >>> 8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    };\r\n    Long.prototype.toBytesBE = function () {\r\n        var hi = this.high, lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 8) & 0xff,\r\n            hi & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 8) & 0xff,\r\n            lo & 0xff\r\n        ];\r\n    };\r\n    Long.prototype[_Symbol.reflection] = function () {\r\n        return {\r\n            type: \"System.Int64\",\r\n            interfaces: [\"FSharpRecord\", \"System.IComparable\"],\r\n            properties: {\r\n                low: \"number\",\r\n                high: \"number\",\r\n                unsigned: \"boolean\"\r\n            }\r\n        };\r\n    };\r\n    return Long;\r\n}());\r\nexport { Long };\r\nvar INT_CACHE = {};\r\nvar UINT_CACHE = {};\r\nexport function isLong(obj) {\r\n    return (obj && obj instanceof Long);\r\n}\r\nexport function fromInt(value, unsigned) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n    else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\nexport function fromNumber(value, unsigned) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    if (isNaN(value) || !isFinite(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    }\r\n    else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\nexport function fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\nvar pow_dbl = Math.pow;\r\nexport function fromString(str, unsigned, radix) {\r\n    if (unsigned === void 0) { unsigned = false; }\r\n    if (radix === void 0) { radix = 10; }\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        radix = unsigned,\r\n            unsigned = false;\r\n    }\r\n    else {\r\n        unsigned = !!unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    var p = str.indexOf('-');\r\n    if (p > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        }\r\n        else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\nexport function fromValue(val) {\r\n    if (val instanceof Long)\r\n        return val;\r\n    if (typeof val === 'number')\r\n        return fromNumber(val);\r\n    if (typeof val === 'string')\r\n        return fromString(val);\r\n    return fromBits(val.low, val.high, val.unsigned);\r\n}\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\nexport var ZERO = fromInt(0);\r\nexport var UZERO = fromInt(0, true);\r\nexport var ONE = fromInt(1);\r\nexport var UONE = fromInt(1, true);\r\nexport var NEG_ONE = fromInt(-1);\r\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\r\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\r\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\r\n","import { compare as utilCompare } from \"./Util\";\r\nimport * as Long from \"./Long\";\r\nexport function create(d, h, m, s, ms) {\r\n    if (d === void 0) { d = 0; }\r\n    if (h === void 0) { h = 0; }\r\n    if (m === void 0) { m = 0; }\r\n    if (s === void 0) { s = 0; }\r\n    if (ms === void 0) { ms = 0; }\r\n    switch (arguments.length) {\r\n        case 1:\r\n            return fromTicks(arguments[0]);\r\n        case 3:\r\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\r\n            break;\r\n        default:\r\n            d = arguments[0], h = arguments[1], m = arguments[2], s = arguments[3], ms = arguments[4] || 0;\r\n            break;\r\n    }\r\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\r\n}\r\nexport function fromTicks(ticks) {\r\n    return ticks.div(10000).toNumber();\r\n}\r\nexport function fromDays(d) {\r\n    return create(d, 0, 0, 0);\r\n}\r\nexport function fromHours(h) {\r\n    return create(h, 0, 0);\r\n}\r\nexport function fromMinutes(m) {\r\n    return create(0, m, 0);\r\n}\r\nexport function fromSeconds(s) {\r\n    return create(0, 0, s);\r\n}\r\nexport function days(ts) {\r\n    return Math.floor(ts / 86400000);\r\n}\r\nexport function hours(ts) {\r\n    return Math.floor(ts % 86400000 / 3600000);\r\n}\r\nexport function minutes(ts) {\r\n    return Math.floor(ts % 3600000 / 60000);\r\n}\r\nexport function seconds(ts) {\r\n    return Math.floor(ts % 60000 / 1000);\r\n}\r\nexport function milliseconds(ts) {\r\n    return Math.floor(ts % 1000);\r\n}\r\nexport function ticks(ts) {\r\n    return Long.fromNumber(ts).mul(10000);\r\n}\r\nexport function totalDays(ts) {\r\n    return ts / 86400000;\r\n}\r\nexport function totalHours(ts) {\r\n    return ts / 3600000;\r\n}\r\nexport function totalMinutes(ts) {\r\n    return ts / 60000;\r\n}\r\nexport function totalSeconds(ts) {\r\n    return ts / 1000;\r\n}\r\nexport function negate(ts) {\r\n    return ts * -1;\r\n}\r\nexport function add(ts1, ts2) {\r\n    return ts1 + ts2;\r\n}\r\nexport function subtract(ts1, ts2) {\r\n    return ts1 - ts2;\r\n}\r\nexport function compare(x, y) {\r\n    return utilCompare(x, y);\r\n}\r\nexport function compareTo(x, y) {\r\n    return utilCompare(x, y);\r\n}\r\nexport function duration(x) {\r\n    return Math.abs(x);\r\n}\r\n","import { create as timeSpanCreate } from \"./TimeSpan\";\r\nimport { compare as utilCompare } from \"./Util\";\r\nimport * as Long from \"./Long\";\r\nexport function minValue() {\r\n    return parse(-8640000000000000, 1);\r\n}\r\nexport function maxValue() {\r\n    return parse(8640000000000000, 1);\r\n}\r\nexport function parse(v, kind) {\r\n    if (kind == null) {\r\n        kind = typeof v == \"string\" && v.slice(-1) == \"Z\" ? 1 : 2;\r\n    }\r\n    var date = (v == null) ? new Date() : new Date(v);\r\n    if (kind === 2) {\r\n        date.kind = kind;\r\n    }\r\n    if (isNaN(date.getTime())) {\r\n        throw new Error(\"The string is not a valid Date.\");\r\n    }\r\n    return date;\r\n}\r\nexport function tryParse(v) {\r\n    try {\r\n        return [true, parse(v)];\r\n    }\r\n    catch (_err) {\r\n        return [false, minValue()];\r\n    }\r\n}\r\nexport function create(year, month, day, h, m, s, ms, kind) {\r\n    if (h === void 0) { h = 0; }\r\n    if (m === void 0) { m = 0; }\r\n    if (s === void 0) { s = 0; }\r\n    if (ms === void 0) { ms = 0; }\r\n    if (kind === void 0) { kind = 2; }\r\n    var date;\r\n    if (kind === 2) {\r\n        date = new Date(year, month - 1, day, h, m, s, ms);\r\n        date.kind = kind;\r\n    }\r\n    else {\r\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\r\n    }\r\n    if (isNaN(date.getTime())) {\r\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\r\n    }\r\n    return date;\r\n}\r\nexport function now() {\r\n    return parse();\r\n}\r\nexport function utcNow() {\r\n    return parse(null, 1);\r\n}\r\nexport function today() {\r\n    return date(now());\r\n}\r\nexport function isLeapYear(year) {\r\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\r\n}\r\nexport function daysInMonth(year, month) {\r\n    return month == 2\r\n        ? isLeapYear(year) ? 29 : 28\r\n        : month >= 8 ? month % 2 == 0 ? 31 : 30 : month % 2 == 0 ? 30 : 31;\r\n}\r\nexport function toUniversalTime(d) {\r\n    return d.kind === 2 ? new Date(d.getTime()) : d;\r\n}\r\nexport function toLocalTime(d) {\r\n    if (d.kind === 2) {\r\n        return d;\r\n    }\r\n    else {\r\n        var d2 = new Date(d.getTime());\r\n        d2.kind = 2;\r\n        return d2;\r\n    }\r\n}\r\nexport function timeOfDay(d) {\r\n    return timeSpanCreate(0, hour(d), minute(d), second(d), millisecond(d));\r\n}\r\nexport function date(d) {\r\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind || 1);\r\n}\r\nexport function kind(d) {\r\n    return d.kind || 1;\r\n}\r\nexport function day(d) {\r\n    return d.kind === 2 ? d.getDate() : d.getUTCDate();\r\n}\r\nexport function hour(d) {\r\n    return d.kind === 2 ? d.getHours() : d.getUTCHours();\r\n}\r\nexport function millisecond(d) {\r\n    return d.kind === 2 ? d.getMilliseconds() : d.getUTCMilliseconds();\r\n}\r\nexport function minute(d) {\r\n    return d.kind === 2 ? d.getMinutes() : d.getUTCMinutes();\r\n}\r\nexport function month(d) {\r\n    return (d.kind === 2 ? d.getMonth() : d.getUTCMonth()) + 1;\r\n}\r\nexport function second(d) {\r\n    return d.kind === 2 ? d.getSeconds() : d.getUTCSeconds();\r\n}\r\nexport function year(d) {\r\n    return d.kind === 2 ? d.getFullYear() : d.getUTCFullYear();\r\n}\r\nexport function dayOfWeek(d) {\r\n    return d.kind === 2 ? d.getDay() : d.getUTCDay();\r\n}\r\nexport function ticks(d) {\r\n    return Long.fromNumber(d.getTime())\r\n        .add(62135596800000)\r\n        .sub(d.kind == 2 ? d.getTimezoneOffset() * 60 * 1000 : 0)\r\n        .mul(10000);\r\n}\r\nexport function toBinary(d) {\r\n    return ticks(d);\r\n}\r\nexport function dayOfYear(d) {\r\n    var _year = year(d);\r\n    var _month = month(d);\r\n    var _day = day(d);\r\n    for (var i = 1; i < _month; i++)\r\n        _day += daysInMonth(_year, i);\r\n    return _day;\r\n}\r\nexport function add(d, ts) {\r\n    return parse(d.getTime() + ts, d.kind || 1);\r\n}\r\nexport function addDays(d, v) {\r\n    return parse(d.getTime() + v * 86400000, d.kind || 1);\r\n}\r\nexport function addHours(d, v) {\r\n    return parse(d.getTime() + v * 3600000, d.kind || 1);\r\n}\r\nexport function addMinutes(d, v) {\r\n    return parse(d.getTime() + v * 60000, d.kind || 1);\r\n}\r\nexport function addSeconds(d, v) {\r\n    return parse(d.getTime() + v * 1000, d.kind || 1);\r\n}\r\nexport function addMilliseconds(d, v) {\r\n    return parse(d.getTime() + v, d.kind || 1);\r\n}\r\nexport function addTicks(d, t) {\r\n    return parse(Long.fromNumber(d.getTime()).add(t.div(10000)).toNumber(), d.kind || 1);\r\n}\r\nexport function addYears(d, v) {\r\n    var newMonth = month(d);\r\n    var newYear = year(d) + v;\r\n    var _daysInMonth = daysInMonth(newYear, newMonth);\r\n    var newDay = Math.min(_daysInMonth, day(d));\r\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind || 1);\r\n}\r\nexport function addMonths(d, v) {\r\n    var newMonth = month(d) + v;\r\n    var newMonth_ = 0;\r\n    var yearOffset = 0;\r\n    if (newMonth > 12) {\r\n        newMonth_ = newMonth % 12;\r\n        yearOffset = Math.floor(newMonth / 12);\r\n        newMonth = newMonth_;\r\n    }\r\n    else if (newMonth < 1) {\r\n        newMonth_ = 12 + newMonth % 12;\r\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ == 12 ? -1 : 0);\r\n        newMonth = newMonth_;\r\n    }\r\n    var newYear = year(d) + yearOffset;\r\n    var _daysInMonth = daysInMonth(newYear, newMonth);\r\n    var newDay = Math.min(_daysInMonth, day(d));\r\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind || 1);\r\n}\r\nexport function subtract(d, that) {\r\n    return typeof that == \"number\"\r\n        ? parse(d.getTime() - that, d.kind || 1)\r\n        : d.getTime() - that.getTime();\r\n}\r\nexport function toLongDateString(d) {\r\n    return d.toDateString();\r\n}\r\nexport function toShortDateString(d) {\r\n    return d.toLocaleDateString();\r\n}\r\nexport function toLongTimeString(d) {\r\n    return d.toLocaleTimeString();\r\n}\r\nexport function toShortTimeString(d) {\r\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\r\n}\r\nexport function equals(d1, d2) {\r\n    return d1.getTime() == d2.getTime();\r\n}\r\nexport function compare(x, y) {\r\n    return utilCompare(x, y);\r\n}\r\nexport function compareTo(x, y) {\r\n    return utilCompare(x, y);\r\n}\r\nexport function op_Addition(x, y) {\r\n    return add(x, y);\r\n}\r\nexport function op_Subtraction(x, y) {\r\n    return subtract(x, y);\r\n}\r\n","import { toString } from \"./Util\";\r\nimport { getRestParams } from \"./Util\";\r\nimport { escape } from \"./RegExp\";\r\nimport { second } from \"./Date\";\r\nimport { minute } from \"./Date\";\r\nimport { hour } from \"./Date\";\r\nimport { day } from \"./Date\";\r\nimport { month } from \"./Date\";\r\nimport { year } from \"./Date\";\r\nvar fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\r\nvar formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:(.+?))?\\}/g;\r\nvar StringComparison = {\r\n    CurrentCulture: 0,\r\n    CurrentCultureIgnoreCase: 1,\r\n    InvariantCulture: 2,\r\n    InvariantCultureIgnoreCase: 3,\r\n    Ordinal: 4,\r\n    OrdinalIgnoreCase: 5,\r\n};\r\nfunction cmp(x, y, ic) {\r\n    function isIgnoreCase(i) {\r\n        return i === true ||\r\n            i === StringComparison.CurrentCultureIgnoreCase ||\r\n            i === StringComparison.InvariantCultureIgnoreCase ||\r\n            i === StringComparison.OrdinalIgnoreCase;\r\n    }\r\n    function isOrdinal(i) {\r\n        return i === StringComparison.Ordinal ||\r\n            i === StringComparison.OrdinalIgnoreCase;\r\n    }\r\n    if (x == null)\r\n        return y == null ? 0 : -1;\r\n    if (y == null)\r\n        return 1;\r\n    if (isOrdinal(ic)) {\r\n        if (isIgnoreCase(ic)) {\r\n            x = x.toLowerCase();\r\n            y = y.toLowerCase();\r\n        }\r\n        return (x === y) ? 0 : (x < y ? -1 : 1);\r\n    }\r\n    else {\r\n        if (isIgnoreCase(ic)) {\r\n            x = x.toLocaleLowerCase();\r\n            y = y.toLocaleLowerCase();\r\n        }\r\n        return x.localeCompare(y);\r\n    }\r\n}\r\nexport function compare() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    switch (args.length) {\r\n        case 2: return cmp(args[0], args[1], false);\r\n        case 3: return cmp(args[0], args[1], args[2]);\r\n        case 4: return cmp(args[0], args[1], args[2] === true);\r\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\r\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\r\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\r\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\r\n    }\r\n}\r\nexport function compareTo(x, y) {\r\n    return cmp(x, y, false);\r\n}\r\nexport function indexOfAny(str, anyOf) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (str == null || str === \"\")\r\n        return -1;\r\n    var startIndex = (args.length > 0) ? args[0] : 0;\r\n    if (startIndex < 0)\r\n        throw new Error(\"String.indexOfAny: Start index cannot be negative\");\r\n    var length = (args.length > 1) ? args[1] : str.length - startIndex;\r\n    if (length < 0)\r\n        throw new Error(\"String.indexOfAny: Length cannot be negative\");\r\n    if (length > str.length - startIndex)\r\n        throw new Error(\"String.indexOfAny: Invalid startIndex and length\");\r\n    str = str.substr(startIndex, length);\r\n    for (var _a = 0, anyOf_1 = anyOf; _a < anyOf_1.length; _a++) {\r\n        var c = anyOf_1[_a];\r\n        var index = str.indexOf(c);\r\n        if (index > -1)\r\n            return index + startIndex;\r\n    }\r\n    return -1;\r\n}\r\nfunction toHex(value) {\r\n    return value < 0\r\n        ? \"ff\" + (16777215 - (Math.abs(value) - 1)).toString(16)\r\n        : value.toString(16);\r\n}\r\nexport function fsFormat(str) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var _cont;\r\n    function isObject(x) {\r\n        return x !== null && typeof x === \"object\" && !(x instanceof Number) && !(x instanceof String) && !(x instanceof Boolean);\r\n    }\r\n    function formatOnce(str, rep) {\r\n        return str.replace(fsFormatRegExp, function (_, prefix, flags, pad, precision, format) {\r\n            switch (format) {\r\n                case \"f\":\r\n                case \"F\":\r\n                    rep = rep.toFixed(precision || 6);\r\n                    break;\r\n                case \"g\":\r\n                case \"G\":\r\n                    rep = rep.toPrecision(precision);\r\n                    break;\r\n                case \"e\":\r\n                case \"E\":\r\n                    rep = rep.toExponential(precision);\r\n                    break;\r\n                case \"O\":\r\n                    rep = toString(rep);\r\n                    break;\r\n                case \"A\":\r\n                    try {\r\n                        rep = JSON.stringify(rep, function (k, v) {\r\n                            return v && v[Symbol.iterator] && !Array.isArray(v) && isObject(v) ? Array.from(v)\r\n                                : v && typeof v.ToString === \"function\" ? toString(v) : v;\r\n                        });\r\n                    }\r\n                    catch (err) {\r\n                        rep = \"{\" + Object.getOwnPropertyNames(rep).map(function (k) { return k + \": \" + String(rep[k]); }).join(\", \") + \"}\";\r\n                    }\r\n                    break;\r\n                case \"x\":\r\n                    rep = toHex(Number(rep));\r\n                    break;\r\n                case \"X\":\r\n                    rep = toHex(Number(rep)).toUpperCase();\r\n                    break;\r\n            }\r\n            var plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep) >= 0;\r\n            if (!isNaN(pad = parseInt(pad))) {\r\n                var ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\r\n                rep = padLeft(rep, Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\r\n            }\r\n            var once = prefix + (plusPrefix ? \"+\" + rep : rep);\r\n            return once.replace(/%/g, \"%%\");\r\n        });\r\n    }\r\n    function makeFn(str) {\r\n        return function (rep) {\r\n            var str2 = formatOnce(str, rep);\r\n            return fsFormatRegExp.test(str2)\r\n                ? makeFn(str2) : _cont(str2.replace(/%%/g, \"%\"));\r\n        };\r\n    }\r\n    if (args.length === 0) {\r\n        return function (cont) {\r\n            _cont = cont;\r\n            return fsFormatRegExp.test(str) ? makeFn(str) : _cont(str);\r\n        };\r\n    }\r\n    else {\r\n        for (var i = 0; i < args.length; i++) {\r\n            str = formatOnce(str, args[i]);\r\n        }\r\n        return str.replace(/%%/g, \"%\");\r\n    }\r\n}\r\nexport function format(str) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    return str.replace(formatRegExp, function (match, idx, pad, format) {\r\n        var rep = args[idx], padSymbol = \" \";\r\n        if (typeof rep === \"number\") {\r\n            switch ((format || \"\").substring(0, 1)) {\r\n                case \"f\":\r\n                case \"F\":\r\n                    rep = format.length > 1 ? rep.toFixed(format.substring(1)) : rep.toFixed(2);\r\n                    break;\r\n                case \"g\":\r\n                case \"G\":\r\n                    rep = format.length > 1 ? rep.toPrecision(format.substring(1)) : rep.toPrecision();\r\n                    break;\r\n                case \"e\":\r\n                case \"E\":\r\n                    rep = format.length > 1 ? rep.toExponential(format.substring(1)) : rep.toExponential();\r\n                    break;\r\n                case \"p\":\r\n                case \"P\":\r\n                    rep = (format.length > 1 ? (rep * 100).toFixed(format.substring(1)) : (rep * 100).toFixed(2)) + \" %\";\r\n                    break;\r\n                case \"x\":\r\n                    rep = toHex(Number(rep));\r\n                    break;\r\n                case \"X\":\r\n                    rep = toHex(Number(rep)).toUpperCase();\r\n                    break;\r\n                default:\r\n                    var m = /^(0+)(\\.0+)?$/.exec(format);\r\n                    if (m != null) {\r\n                        var decs = 0;\r\n                        if (m[2] != null)\r\n                            rep = rep.toFixed(decs = m[2].length - 1);\r\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\r\n                        padSymbol = \"0\";\r\n                    }\r\n                    else if (format) {\r\n                        rep = format;\r\n                    }\r\n            }\r\n        }\r\n        else if (rep instanceof Date) {\r\n            if (format.length === 1) {\r\n                switch (format) {\r\n                    case \"D\":\r\n                        rep = rep.toDateString();\r\n                        break;\r\n                    case \"T\":\r\n                        rep = rep.toLocaleTimeString();\r\n                        break;\r\n                    case \"d\":\r\n                        rep = rep.toLocaleDateString();\r\n                        break;\r\n                    case \"t\":\r\n                        rep = rep.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\r\n                        break;\r\n                    case \"o\":\r\n                    case \"O\":\r\n                        if (rep.kind === 2) {\r\n                            var offset = rep.getTimezoneOffset() * -1;\r\n                            rep = format(\"{0:yyyy-MM-dd}T{0:HH:mm}:{1:00.000}{2}{3:00}:{4:00}\", rep, second(rep), offset >= 0 ? \"+\" : \"-\", ~~(offset / 60), offset % 60);\r\n                        }\r\n                        else {\r\n                            rep = rep.toISOString();\r\n                        }\r\n                }\r\n            }\r\n            else {\r\n                rep = format.replace(/\\w+/g, function (match2) {\r\n                    var rep2 = match2;\r\n                    switch (match2.substring(0, 1)) {\r\n                        case \"y\":\r\n                            rep2 = match2.length < 4 ? year(rep) % 100 : year(rep);\r\n                            break;\r\n                        case \"h\":\r\n                            rep2 = rep.getHours() > 12 ? hour(rep) % 12 : hour(rep);\r\n                            break;\r\n                        case \"M\":\r\n                            rep2 = month(rep);\r\n                            break;\r\n                        case \"d\":\r\n                            rep2 = day(rep);\r\n                            break;\r\n                        case \"H\":\r\n                            rep2 = hour(rep);\r\n                            break;\r\n                        case \"m\":\r\n                            rep2 = minute(rep);\r\n                            break;\r\n                        case \"s\":\r\n                            rep2 = second(rep);\r\n                            break;\r\n                    }\r\n                    if (rep2 !== match2 && rep2 < 10 && match2.length > 1) {\r\n                        rep2 = \"0\" + rep2;\r\n                    }\r\n                    return rep2;\r\n                });\r\n            }\r\n        }\r\n        if (!isNaN(pad = parseInt((pad || \"\").substring(1)))) {\r\n            rep = padLeft(rep, Math.abs(pad), padSymbol, pad < 0);\r\n        }\r\n        return rep;\r\n    });\r\n}\r\nexport function endsWith(str, search) {\r\n    var idx = str.lastIndexOf(search);\r\n    return idx >= 0 && idx == str.length - search.length;\r\n}\r\nexport function initialize(n, f) {\r\n    if (n < 0)\r\n        throw new Error(\"String length must be non-negative\");\r\n    var xs = new Array(n);\r\n    for (var i = 0; i < n; i++)\r\n        xs[i] = f(i);\r\n    return xs.join(\"\");\r\n}\r\nexport function insert(str, startIndex, value) {\r\n    if (startIndex < 0 || startIndex > str.length) {\r\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\r\n    }\r\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\r\n}\r\nexport function isNullOrEmpty(str) {\r\n    return typeof str !== \"string\" || str.length == 0;\r\n}\r\nexport function isNullOrWhiteSpace(str) {\r\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\r\n}\r\nexport function join(delimiter, xs) {\r\n    xs = typeof xs == \"string\" ? getRestParams(arguments, 1) : xs;\r\n    return (Array.isArray(xs) ? xs : Array.from(xs)).join(delimiter);\r\n}\r\nexport function newGuid() {\r\n    var uuid = \"\";\r\n    for (var i = 0; i < 32; i++) {\r\n        var random = Math.random() * 16 | 0;\r\n        if (i === 8 || i === 12 || i === 16 || i === 20)\r\n            uuid += \"-\";\r\n        uuid += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);\r\n    }\r\n    return uuid;\r\n}\r\nexport function padLeft(str, len, ch, isRight) {\r\n    ch = ch || \" \";\r\n    str = String(str);\r\n    len = len - str.length;\r\n    for (var i = -1; ++i < len;)\r\n        str = isRight ? str + ch : ch + str;\r\n    return str;\r\n}\r\nexport function padRight(str, len, ch) {\r\n    return padLeft(str, len, ch, true);\r\n}\r\nexport function remove(str, startIndex, count) {\r\n    if (startIndex >= str.length) {\r\n        throw new Error(\"startIndex must be less than length of string\");\r\n    }\r\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\r\n        throw new Error(\"Index and count must refer to a location within the string.\");\r\n    }\r\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\r\n}\r\nexport function replace(str, search, replace) {\r\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\r\n}\r\nexport function replicate(n, x) {\r\n    return initialize(n, function () { return x; });\r\n}\r\nexport function split(str, splitters, count, removeEmpty) {\r\n    count = typeof count == \"number\" ? count : null;\r\n    removeEmpty = typeof removeEmpty == \"number\" ? removeEmpty : null;\r\n    if (count < 0)\r\n        throw new Error(\"Count cannot be less than zero\");\r\n    if (count === 0)\r\n        return [];\r\n    splitters = Array.isArray(splitters) ? splitters : getRestParams(arguments, 1);\r\n    splitters = splitters.map(function (x) { return escape(x); });\r\n    splitters = splitters.length > 0 ? splitters : [\" \"];\r\n    var m;\r\n    var i = 0;\r\n    var splits = [];\r\n    var reg = new RegExp(splitters.join(\"|\"), \"g\");\r\n    while ((count == null || count > 1) && (m = reg.exec(str)) !== null) {\r\n        if (!removeEmpty || (m.index - i) > 0) {\r\n            count = count != null ? count - 1 : count;\r\n            splits.push(str.substring(i, m.index));\r\n        }\r\n        i = reg.lastIndex;\r\n    }\r\n    if (!removeEmpty || (str.length - i) > 0)\r\n        splits.push(str.substring(i));\r\n    return splits;\r\n}\r\nexport function trim(str, side) {\r\n    var chars = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        chars[_i - 2] = arguments[_i];\r\n    }\r\n    if (side == \"both\" && chars.length == 0)\r\n        return str.trim();\r\n    if (side == \"start\" || side == \"both\") {\r\n        var reg = chars.length == 0 ? /^\\s+/ : new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\");\r\n        str = str.replace(reg, \"\");\r\n    }\r\n    if (side == \"end\" || side == \"both\") {\r\n        var reg = chars.length == 0 ? /\\s+$/ : new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\");\r\n        str = str.replace(reg, \"\");\r\n    }\r\n    return str;\r\n}\r\n","import { compare } from \"./Util\";\r\nimport FSymbol from \"./Symbol\";\r\nvar GenericComparer = (function () {\r\n    function GenericComparer(f) {\r\n        this.Compare = f || compare;\r\n    }\r\n    GenericComparer.prototype[FSymbol.reflection] = function () {\r\n        return { interfaces: [\"System.IComparer\"] };\r\n    };\r\n    return GenericComparer;\r\n}());\r\nexport default GenericComparer;\r\n","import List from \"./ListClass\";\r\nimport { ofArray as listOfArray } from \"./ListClass\";\r\nimport { toString } from \"./Util\";\r\nimport { equals } from \"./Util\";\r\nimport { compare } from \"./Util\";\r\nimport GenericComparer from \"./GenericComparer\";\r\nimport FSymbol from \"./Symbol\";\r\nimport { map as seqMap } from \"./Seq\";\r\nimport { fold as seqFold } from \"./Seq\";\r\nimport { pick as seqPick } from \"./Seq\";\r\nimport { tryPick as seqTryPick } from \"./Seq\";\r\nimport { compareWith as seqCompareWith } from \"./Seq\";\r\nexport function groupBy(f, xs) {\r\n    var keys = [], iter = xs[Symbol.iterator]();\r\n    var acc = create(), cur = iter.next();\r\n    while (!cur.done) {\r\n        var k = f(cur.value), vs = tryFind(k, acc);\r\n        if (vs == null) {\r\n            keys.push(k);\r\n            acc = add(k, [cur.value], acc);\r\n        }\r\n        else {\r\n            vs.push(cur.value);\r\n        }\r\n        cur = iter.next();\r\n    }\r\n    return keys.map(function (k) { return [k, acc.get(k)]; });\r\n}\r\nexport function countBy(f, xs) {\r\n    return groupBy(f, xs).map(function (kv) { return [kv[0], kv[1].length]; });\r\n}\r\nvar MapTree = (function () {\r\n    function MapTree(caseName, fields) {\r\n        this.Case = caseName;\r\n        this.Fields = fields;\r\n    }\r\n    return MapTree;\r\n}());\r\nexport { MapTree };\r\nfunction tree_sizeAux(acc, m) {\r\n    return m.Case === \"MapOne\"\r\n        ? acc + 1\r\n        : m.Case === \"MapNode\"\r\n            ? tree_sizeAux(tree_sizeAux(acc + 1, m.Fields[2]), m.Fields[3])\r\n            : acc;\r\n}\r\nfunction tree_size(x) {\r\n    return tree_sizeAux(0, x);\r\n}\r\nfunction tree_empty() {\r\n    return new MapTree(\"MapEmpty\", []);\r\n}\r\nfunction tree_height(_arg1) {\r\n    return _arg1.Case === \"MapOne\" ? 1 : _arg1.Case === \"MapNode\" ? _arg1.Fields[4] : 0;\r\n}\r\nfunction tree_isEmpty(m) {\r\n    return m.Case === \"MapEmpty\" ? true : false;\r\n}\r\nfunction tree_mk(l, k, v, r) {\r\n    var matchValue = [l, r];\r\n    var $target1 = function () {\r\n        var hl = tree_height(l);\r\n        var hr = tree_height(r);\r\n        var m = hl < hr ? hr : hl;\r\n        return new MapTree(\"MapNode\", [k, v, l, r, m + 1]);\r\n    };\r\n    if (matchValue[0].Case === \"MapEmpty\") {\r\n        if (matchValue[1].Case === \"MapEmpty\") {\r\n            return new MapTree(\"MapOne\", [k, v]);\r\n        }\r\n        else {\r\n            return $target1();\r\n        }\r\n    }\r\n    else {\r\n        return $target1();\r\n    }\r\n}\r\n;\r\nfunction tree_rebalance(t1, k, v, t2) {\r\n    var t1h = tree_height(t1);\r\n    var t2h = tree_height(t2);\r\n    if (t2h > t1h + 2) {\r\n        if (t2.Case === \"MapNode\") {\r\n            if (tree_height(t2.Fields[2]) > t1h + 1) {\r\n                if (t2.Fields[2].Case === \"MapNode\") {\r\n                    return tree_mk(tree_mk(t1, k, v, t2.Fields[2].Fields[2]), t2.Fields[2].Fields[0], t2.Fields[2].Fields[1], tree_mk(t2.Fields[2].Fields[3], t2.Fields[0], t2.Fields[1], t2.Fields[3]));\r\n                }\r\n                else {\r\n                    throw new Error(\"rebalance\");\r\n                }\r\n            }\r\n            else {\r\n                return tree_mk(tree_mk(t1, k, v, t2.Fields[2]), t2.Fields[0], t2.Fields[1], t2.Fields[3]);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"rebalance\");\r\n        }\r\n    }\r\n    else {\r\n        if (t1h > t2h + 2) {\r\n            if (t1.Case === \"MapNode\") {\r\n                if (tree_height(t1.Fields[3]) > t2h + 1) {\r\n                    if (t1.Fields[3].Case === \"MapNode\") {\r\n                        return tree_mk(tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], t1.Fields[3].Fields[2]), t1.Fields[3].Fields[0], t1.Fields[3].Fields[1], tree_mk(t1.Fields[3].Fields[3], k, v, t2));\r\n                    }\r\n                    else {\r\n                        throw new Error(\"rebalance\");\r\n                    }\r\n                }\r\n                else {\r\n                    return tree_mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], tree_mk(t1.Fields[3], k, v, t2));\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"rebalance\");\r\n            }\r\n        }\r\n        else {\r\n            return tree_mk(t1, k, v, t2);\r\n        }\r\n    }\r\n}\r\nfunction tree_add(comparer, k, v, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return new MapTree(\"MapNode\", [k, v, new MapTree(\"MapEmpty\", []), m, 2]);\r\n        }\r\n        else if (c === 0) {\r\n            return new MapTree(\"MapOne\", [k, v]);\r\n        }\r\n        return new MapTree(\"MapNode\", [k, v, m, new MapTree(\"MapEmpty\", []), 2]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_add(comparer, k, v, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\r\n        }\r\n        else if (c === 0) {\r\n            return new MapTree(\"MapNode\", [k, v, m.Fields[2], m.Fields[3], m.Fields[4]]);\r\n        }\r\n        return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_add(comparer, k, v, m.Fields[3]));\r\n    }\r\n    return new MapTree(\"MapOne\", [k, v]);\r\n}\r\nfunction tree_find(comparer, k, m) {\r\n    var res = tree_tryFind(comparer, k, m);\r\n    if (res != null)\r\n        return res;\r\n    throw new Error(\"key not found\");\r\n}\r\nfunction tree_tryFind(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        return c === 0 ? m.Fields[1] : null;\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_tryFind(comparer, k, m.Fields[2]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                return m.Fields[1];\r\n            }\r\n            else {\r\n                return tree_tryFind(comparer, k, m.Fields[3]);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction tree_partition1(comparer, f, k, v, acc1, acc2) {\r\n    return f(k, v) ? [tree_add(comparer, k, v, acc1), acc2] : [acc1, tree_add(comparer, k, v, acc2)];\r\n}\r\nfunction tree_partitionAux(comparer, f, s, acc_0, acc_1) {\r\n    var acc = [acc_0, acc_1];\r\n    if (s.Case === \"MapOne\") {\r\n        return tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc[0], acc[1]);\r\n    }\r\n    else if (s.Case === \"MapNode\") {\r\n        var acc_2 = tree_partitionAux(comparer, f, s.Fields[3], acc[0], acc[1]);\r\n        var acc_3 = tree_partition1(comparer, f, s.Fields[0], s.Fields[1], acc_2[0], acc_2[1]);\r\n        return tree_partitionAux(comparer, f, s.Fields[2], acc_3[0], acc_3[1]);\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_partition(comparer, f, s) {\r\n    return tree_partitionAux(comparer, f, s, tree_empty(), tree_empty());\r\n}\r\nfunction tree_filter1(comparer, f, k, v, acc) {\r\n    return f(k, v) ? tree_add(comparer, k, v, acc) : acc;\r\n}\r\nfunction tree_filterAux(comparer, f, s, acc) {\r\n    return s.Case === \"MapOne\" ? tree_filter1(comparer, f, s.Fields[0], s.Fields[1], acc) : s.Case === \"MapNode\" ? tree_filterAux(comparer, f, s.Fields[3], tree_filter1(comparer, f, s.Fields[0], s.Fields[1], tree_filterAux(comparer, f, s.Fields[2], acc))) : acc;\r\n}\r\nfunction tree_filter(comparer, f, s) {\r\n    return tree_filterAux(comparer, f, s, tree_empty());\r\n}\r\nfunction tree_spliceOutSuccessor(m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return [m.Fields[0], m.Fields[1], new MapTree(\"MapEmpty\", [])];\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        if (m.Fields[2].Case === \"MapEmpty\") {\r\n            return [m.Fields[0], m.Fields[1], m.Fields[3]];\r\n        }\r\n        else {\r\n            var kvl = tree_spliceOutSuccessor(m.Fields[2]);\r\n            return [kvl[0], kvl[1], tree_mk(kvl[2], m.Fields[0], m.Fields[1], m.Fields[3])];\r\n        }\r\n    }\r\n    throw new Error(\"internal error: Map.spliceOutSuccessor\");\r\n}\r\nfunction tree_remove(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c === 0) {\r\n            return new MapTree(\"MapEmpty\", []);\r\n        }\r\n        else {\r\n            return m;\r\n        }\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_remove(comparer, k, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                var matchValue = [m.Fields[2], m.Fields[3]];\r\n                if (matchValue[0].Case === \"MapEmpty\") {\r\n                    return m.Fields[3];\r\n                }\r\n                else {\r\n                    if (matchValue[1].Case === \"MapEmpty\") {\r\n                        return m.Fields[2];\r\n                    }\r\n                    else {\r\n                        var patternInput = tree_spliceOutSuccessor(m.Fields[3]);\r\n                        var sv = patternInput[1];\r\n                        var sk = patternInput[0];\r\n                        var r_ = patternInput[2];\r\n                        return tree_mk(m.Fields[2], sk, sv, r_);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return tree_rebalance(m.Fields[2], m.Fields[0], m.Fields[1], tree_remove(comparer, k, m.Fields[3]));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return tree_empty();\r\n    }\r\n}\r\nfunction tree_mem(comparer, k, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return comparer.Compare(k, m.Fields[0]) === 0;\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var c = comparer.Compare(k, m.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_mem(comparer, k, m.Fields[2]);\r\n        }\r\n        else {\r\n            if (c === 0) {\r\n                return true;\r\n            }\r\n            else {\r\n                return tree_mem(comparer, k, m.Fields[3]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nfunction tree_iter(f, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        f(m.Fields[0], m.Fields[1]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        tree_iter(f, m.Fields[2]);\r\n        f(m.Fields[0], m.Fields[1]);\r\n        tree_iter(f, m.Fields[3]);\r\n    }\r\n}\r\nfunction tree_tryPick(f, m) {\r\n    if (m.Case === \"MapOne\") {\r\n        return f(m.Fields[0], m.Fields[1]);\r\n    }\r\n    else if (m.Case === \"MapNode\") {\r\n        var matchValue = tree_tryPick(f, m.Fields[2]);\r\n        if (matchValue == null) {\r\n            var matchValue_1 = f(m.Fields[0], m.Fields[1]);\r\n            if (matchValue_1 == null) {\r\n                return tree_tryPick(f, m.Fields[3]);\r\n            }\r\n            else {\r\n                var res = matchValue_1;\r\n                return res;\r\n            }\r\n        }\r\n        else {\r\n            var res = matchValue;\r\n            return res;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction tree_exists(f, m) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_exists(f, m.Fields[2]) ? true : f(m.Fields[0], m.Fields[1])) ? true : tree_exists(f, m.Fields[3]) : false;\r\n}\r\nfunction tree_forall(f, m) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (tree_forall(f, m.Fields[2]) ? f(m.Fields[0], m.Fields[1]) : false) ? tree_forall(f, m.Fields[3]) : false : true;\r\n}\r\nfunction tree_mapi(f, m) {\r\n    return m.Case === \"MapOne\" ? new MapTree(\"MapOne\", [m.Fields[0], f(m.Fields[0], m.Fields[1])]) : m.Case === \"MapNode\" ? new MapTree(\"MapNode\", [m.Fields[0], f(m.Fields[0], m.Fields[1]), tree_mapi(f, m.Fields[2]), tree_mapi(f, m.Fields[3]), m.Fields[4]]) : tree_empty();\r\n}\r\nfunction tree_foldBack(f, m, x) {\r\n    return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1], x) : m.Case === \"MapNode\" ? tree_foldBack(f, m.Fields[2], f(m.Fields[0], m.Fields[1], tree_foldBack(f, m.Fields[3], x))) : x;\r\n}\r\nfunction tree_fold(f, x, m) {\r\n    return m.Case === \"MapOne\" ? f(x, m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? tree_fold(f, f(tree_fold(f, x, m.Fields[2]), m.Fields[0], m.Fields[1]), m.Fields[3]) : x;\r\n}\r\nfunction tree_mkFromEnumerator(comparer, acc, e) {\r\n    var cur = e.next();\r\n    while (!cur.done) {\r\n        acc = tree_add(comparer, cur.value[0], cur.value[1], acc);\r\n        cur = e.next();\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_ofSeq(comparer, c) {\r\n    var ie = c[Symbol.iterator]();\r\n    return tree_mkFromEnumerator(comparer, tree_empty(), ie);\r\n}\r\nfunction tree_collapseLHS(stack) {\r\n    if (stack.tail != null) {\r\n        if (stack.head.Case === \"MapOne\") {\r\n            return stack;\r\n        }\r\n        else if (stack.head.Case === \"MapNode\") {\r\n            return tree_collapseLHS(listOfArray([\r\n                stack.head.Fields[2],\r\n                new MapTree(\"MapOne\", [stack.head.Fields[0], stack.head.Fields[1]]),\r\n                stack.head.Fields[3]\r\n            ], stack.tail));\r\n        }\r\n        else {\r\n            return tree_collapseLHS(stack.tail);\r\n        }\r\n    }\r\n    else {\r\n        return new List();\r\n    }\r\n}\r\nfunction tree_mkIterator(s) {\r\n    return { stack: tree_collapseLHS(new List(s, new List())), started: false };\r\n}\r\nfunction tree_moveNext(i) {\r\n    function current(i) {\r\n        if (i.stack.tail == null) {\r\n            return null;\r\n        }\r\n        else if (i.stack.head.Case === \"MapOne\") {\r\n            return [i.stack.head.Fields[0], i.stack.head.Fields[1]];\r\n        }\r\n        throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\r\n    }\r\n    if (i.started) {\r\n        if (i.stack.tail == null) {\r\n            return { done: true, value: null };\r\n        }\r\n        else {\r\n            if (i.stack.head.Case === \"MapOne\") {\r\n                i.stack = tree_collapseLHS(i.stack.tail);\r\n                return {\r\n                    done: i.stack.tail == null,\r\n                    value: current(i)\r\n                };\r\n            }\r\n            else {\r\n                throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return {\r\n            done: i.stack.tail == null,\r\n            value: current(i)\r\n        };\r\n    }\r\n    ;\r\n}\r\nvar FableMap = (function () {\r\n    function FableMap() {\r\n    }\r\n    FableMap.prototype.ToString = function () {\r\n        return \"map [\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    FableMap.prototype.Equals = function (m2) {\r\n        return this.CompareTo(m2) === 0;\r\n    };\r\n    FableMap.prototype.CompareTo = function (m2) {\r\n        var _this = this;\r\n        return this === m2 ? 0 : seqCompareWith(function (kvp1, kvp2) {\r\n            var c = _this.comparer.Compare(kvp1[0], kvp2[0]);\r\n            return c !== 0 ? c : compare(kvp1[1], kvp2[1]);\r\n        }, this, m2);\r\n    };\r\n    FableMap.prototype[Symbol.iterator] = function () {\r\n        var i = tree_mkIterator(this.tree);\r\n        return {\r\n            next: function () { return tree_moveNext(i); }\r\n        };\r\n    };\r\n    FableMap.prototype.entries = function () {\r\n        return this[Symbol.iterator]();\r\n    };\r\n    FableMap.prototype.keys = function () {\r\n        return seqMap(function (kv) { return kv[0]; }, this);\r\n    };\r\n    FableMap.prototype.values = function () {\r\n        return seqMap(function (kv) { return kv[1]; }, this);\r\n    };\r\n    FableMap.prototype.get = function (k) {\r\n        return tree_find(this.comparer, k, this.tree);\r\n    };\r\n    FableMap.prototype.has = function (k) {\r\n        return tree_mem(this.comparer, k, this.tree);\r\n    };\r\n    FableMap.prototype.set = function (k, v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableMap.prototype.delete = function (k) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableMap.prototype.clear = function () {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    Object.defineProperty(FableMap.prototype, \"size\", {\r\n        get: function () {\r\n            return tree_size(this.tree);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FableMap.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpMap\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\", \"System.Collections.Generic.IDictionary\"]\r\n        };\r\n    };\r\n    return FableMap;\r\n}());\r\nexport default FableMap;\r\nfunction from(comparer, tree) {\r\n    var map = new FableMap();\r\n    map.tree = tree;\r\n    map.comparer = comparer || new GenericComparer();\r\n    return map;\r\n}\r\nexport function create(ie, comparer) {\r\n    comparer = comparer || new GenericComparer();\r\n    return from(comparer, ie ? tree_ofSeq(comparer, ie) : tree_empty());\r\n}\r\nexport function add(k, v, map) {\r\n    return from(map.comparer, tree_add(map.comparer, k, v, map.tree));\r\n}\r\nexport function remove(item, map) {\r\n    return from(map.comparer, tree_remove(map.comparer, item, map.tree));\r\n}\r\nexport function containsValue(v, map) {\r\n    return seqFold(function (acc, k) { return acc || equals(map.get(k), v); }, false, map.keys());\r\n}\r\nexport function tryGetValue(map, key, defaultValue) {\r\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\r\n}\r\nexport function exists(f, map) {\r\n    return tree_exists(f, map.tree);\r\n}\r\nexport function find(k, map) {\r\n    return tree_find(map.comparer, k, map.tree);\r\n}\r\nexport function tryFind(k, map) {\r\n    return tree_tryFind(map.comparer, k, map.tree);\r\n}\r\nexport function filter(f, map) {\r\n    return from(map.comparer, tree_filter(map.comparer, f, map.tree));\r\n}\r\nexport function fold(f, seed, map) {\r\n    return tree_fold(f, seed, map.tree);\r\n}\r\nexport function foldBack(f, map, seed) {\r\n    return tree_foldBack(f, map.tree, seed);\r\n}\r\nexport function forAll(f, map) {\r\n    return tree_forall(f, map.tree);\r\n}\r\nexport function isEmpty(map) {\r\n    return tree_isEmpty(map.tree);\r\n}\r\nexport function iterate(f, map) {\r\n    tree_iter(f, map.tree);\r\n}\r\nexport function map(f, map) {\r\n    return from(map.comparer, tree_mapi(f, map.tree));\r\n}\r\nexport function partition(f, map) {\r\n    var rs = tree_partition(map.comparer, f, map.tree);\r\n    return [from(map.comparer, rs[0]), from(map.comparer, rs[1])];\r\n}\r\nexport function findKey(f, map) {\r\n    return seqPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\r\n}\r\nexport function tryFindKey(f, map) {\r\n    return seqTryPick(function (kv) { return f(kv[0], kv[1]) ? kv[0] : null; }, map);\r\n}\r\nexport function pick(f, map) {\r\n    var res = tryPick(f, map);\r\n    if (res != null)\r\n        return res;\r\n    throw new Error(\"key not found\");\r\n}\r\nexport function tryPick(f, map) {\r\n    return tree_tryPick(f, map.tree);\r\n}\r\n","import List from \"./ListClass\";\r\nimport { map as seqMap } from \"./Seq\";\r\nimport { fold as seqFold } from \"./Seq\";\r\nimport { foldBack as seqFoldBack } from \"./Seq\";\r\nimport { toList as seqToList } from \"./Seq\";\r\nimport { groupBy as mapGroupBy } from \"./Map\";\r\nexport default List;\r\nexport { ofArray } from \"./ListClass\";\r\nexport function append(xs, ys) {\r\n    return seqFold(function (acc, x) { return new List(x, acc); }, ys, reverse(xs));\r\n}\r\nexport function choose(f, xs) {\r\n    var r = seqFold(function (acc, x) {\r\n        var y = f(x);\r\n        return y != null ? new List(y, acc) : acc;\r\n    }, new List(), xs);\r\n    return reverse(r);\r\n}\r\nexport function collect(f, xs) {\r\n    return seqFold(function (acc, x) { return append(acc, f(x)); }, new List(), xs);\r\n}\r\nexport function concat(xs) {\r\n    return collect(function (x) { return x; }, xs);\r\n}\r\nexport function filter(f, xs) {\r\n    return reverse(seqFold(function (acc, x) { return f(x) ? new List(x, acc) : acc; }, new List(), xs));\r\n}\r\nexport function where(f, xs) {\r\n    return filter(f, xs);\r\n}\r\nexport function initialize(n, f) {\r\n    if (n < 0) {\r\n        throw new Error(\"List length must be non-negative\");\r\n    }\r\n    var xs = new List();\r\n    for (var i = 1; i <= n; i++) {\r\n        xs = new List(f(n - i), xs);\r\n    }\r\n    return xs;\r\n}\r\nexport function map(f, xs) {\r\n    return reverse(seqFold(function (acc, x) { return new List(f(x), acc); }, new List(), xs));\r\n}\r\nexport function mapIndexed(f, xs) {\r\n    return reverse(seqFold(function (acc, x, i) { return new List(f(i, x), acc); }, new List(), xs));\r\n}\r\nexport function partition(f, xs) {\r\n    return seqFold(function (acc, x) {\r\n        var lacc = acc[0], racc = acc[1];\r\n        return f(x) ? [new List(x, lacc), racc] : [lacc, new List(x, racc)];\r\n    }, [new List(), new List()], reverse(xs));\r\n}\r\nexport function replicate(n, x) {\r\n    return initialize(n, function () { return x; });\r\n}\r\nexport function reverse(xs) {\r\n    return seqFold(function (acc, x) { return new List(x, acc); }, new List(), xs);\r\n}\r\nexport function singleton(x) {\r\n    return new List(x, new List());\r\n}\r\nexport function slice(lower, upper, xs) {\r\n    var noLower = (lower == null);\r\n    var noUpper = (upper == null);\r\n    return reverse(seqFold(function (acc, x, i) { return (noLower || lower <= i) && (noUpper || i <= upper) ? new List(x, acc) : acc; }, new List(), xs));\r\n}\r\nexport function unzip(xs) {\r\n    return seqFoldBack(function (xy, acc) {\r\n        return [new List(xy[0], acc[0]), new List(xy[1], acc[1])];\r\n    }, xs, [new List(), new List()]);\r\n}\r\nexport function unzip3(xs) {\r\n    return seqFoldBack(function (xyz, acc) {\r\n        return [new List(xyz[0], acc[0]), new List(xyz[1], acc[1]), new List(xyz[2], acc[2])];\r\n    }, xs, [new List(), new List(), new List()]);\r\n}\r\nexport function groupBy(f, xs) {\r\n    return seqToList(seqMap(function (k) { return [k[0], seqToList(k[1])]; }, mapGroupBy(f, xs)));\r\n}\r\n","import List from \"./List\";\r\nimport { ofArray as listOfArray } from \"./List\";\r\nimport { toString } from \"./Util\";\r\nimport GenericComparer from \"./GenericComparer\";\r\nimport FSymbol from \"./Symbol\";\r\nimport { iterate as seqIterate } from \"./Seq\";\r\nimport { fold as seqFold } from \"./Seq\";\r\nimport { reduce as seqReduce } from \"./Seq\";\r\nimport { forAll as seqForAll } from \"./Seq\";\r\nimport { exists as seqExists } from \"./Seq\";\r\nimport { choose as seqChoose } from \"./Seq\";\r\nimport { scan as seqScan } from \"./Seq\";\r\nexport function distinctBy(f, xs) {\r\n    return seqChoose(function (tup) { return tup[0]; }, seqScan(function (tup, x) {\r\n        var acc = tup[1];\r\n        var k = f(x);\r\n        return acc.has(k) ? [null, acc] : [x, add(k, acc)];\r\n    }, [null, create()], xs));\r\n}\r\nexport function distinct(xs) {\r\n    return distinctBy(function (x) { return x; }, xs);\r\n}\r\nvar SetTree = (function () {\r\n    function SetTree(caseName, fields) {\r\n        this.Case = caseName;\r\n        this.Fields = fields;\r\n    }\r\n    return SetTree;\r\n}());\r\nexport { SetTree };\r\nvar tree_tolerance = 2;\r\nfunction tree_countAux(s, acc) {\r\n    return s.Case === \"SetOne\" ? acc + 1 : s.Case === \"SetEmpty\" ? acc : tree_countAux(s.Fields[1], tree_countAux(s.Fields[2], acc + 1));\r\n}\r\nfunction tree_count(s) {\r\n    return tree_countAux(s, 0);\r\n}\r\nfunction tree_SetOne(n) {\r\n    return new SetTree(\"SetOne\", [n]);\r\n}\r\nfunction tree_SetNode(x, l, r, h) {\r\n    return new SetTree(\"SetNode\", [x, l, r, h]);\r\n}\r\nfunction tree_height(t) {\r\n    return t.Case === \"SetOne\" ? 1 : t.Case === \"SetNode\" ? t.Fields[3] : 0;\r\n}\r\nfunction tree_mk(l, k, r) {\r\n    var matchValue = [l, r];\r\n    var $target1 = function () {\r\n        var hl = tree_height(l);\r\n        var hr = tree_height(r);\r\n        var m = hl < hr ? hr : hl;\r\n        return tree_SetNode(k, l, r, m + 1);\r\n    };\r\n    if (matchValue[0].Case === \"SetEmpty\") {\r\n        if (matchValue[1].Case === \"SetEmpty\") {\r\n            return tree_SetOne(k);\r\n        }\r\n        else {\r\n            return $target1();\r\n        }\r\n    }\r\n    else {\r\n        return $target1();\r\n    }\r\n}\r\nfunction tree_rebalance(t1, k, t2) {\r\n    var t1h = tree_height(t1);\r\n    var t2h = tree_height(t2);\r\n    if (t2h > t1h + tree_tolerance) {\r\n        if (t2.Case === \"SetNode\") {\r\n            if (tree_height(t2.Fields[1]) > t1h + 1) {\r\n                if (t2.Fields[1].Case === \"SetNode\") {\r\n                    return tree_mk(tree_mk(t1, k, t2.Fields[1].Fields[1]), t2.Fields[1].Fields[0], tree_mk(t2.Fields[1].Fields[2], t2.Fields[0], t2.Fields[2]));\r\n                }\r\n                else {\r\n                    throw new Error(\"rebalance\");\r\n                }\r\n            }\r\n            else {\r\n                return tree_mk(tree_mk(t1, k, t2.Fields[1]), t2.Fields[0], t2.Fields[2]);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"rebalance\");\r\n        }\r\n    }\r\n    else {\r\n        if (t1h > t2h + tree_tolerance) {\r\n            if (t1.Case === \"SetNode\") {\r\n                if (tree_height(t1.Fields[2]) > t2h + 1) {\r\n                    if (t1.Fields[2].Case === \"SetNode\") {\r\n                        return tree_mk(tree_mk(t1.Fields[1], t1.Fields[0], t1.Fields[2].Fields[1]), t1.Fields[2].Fields[0], tree_mk(t1.Fields[2].Fields[2], k, t2));\r\n                    }\r\n                    else {\r\n                        throw new Error(\"rebalance\");\r\n                    }\r\n                }\r\n                else {\r\n                    return tree_mk(t1.Fields[1], t1.Fields[0], tree_mk(t1.Fields[2], k, t2));\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(\"rebalance\");\r\n            }\r\n        }\r\n        else {\r\n            return tree_mk(t1, k, t2);\r\n        }\r\n    }\r\n}\r\nfunction tree_add(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_SetNode(k, new SetTree(\"SetEmpty\", []), t, 2);\r\n        }\r\n        else if (c === 0) {\r\n            return t;\r\n        }\r\n        else {\r\n            return tree_SetNode(k, t, new SetTree(\"SetEmpty\", []), 2);\r\n        }\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return tree_SetOne(k);\r\n    }\r\n    else {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_add(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\r\n        }\r\n        else if (c === 0) {\r\n            return t;\r\n        }\r\n        else {\r\n            return tree_rebalance(t.Fields[1], t.Fields[0], tree_add(comparer, k, t.Fields[2]));\r\n        }\r\n    }\r\n}\r\nfunction tree_balance(comparer, t1, k, t2) {\r\n    var matchValue = [t1, t2];\r\n    var $target1 = function (t1_1) { return tree_add(comparer, k, t1_1); };\r\n    var $target2 = function (k1, t2_1) { return tree_add(comparer, k, tree_add(comparer, k1, t2_1)); };\r\n    if (matchValue[0].Case === \"SetOne\") {\r\n        if (matchValue[1].Case === \"SetEmpty\") {\r\n            return $target1(matchValue[0]);\r\n        }\r\n        else {\r\n            if (matchValue[1].Case === \"SetOne\") {\r\n                return $target2(matchValue[0].Fields[0], matchValue[1]);\r\n            }\r\n            else {\r\n                return $target2(matchValue[0].Fields[0], matchValue[1]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (matchValue[0].Case === \"SetNode\") {\r\n            if (matchValue[1].Case === \"SetOne\") {\r\n                var k2 = matchValue[1].Fields[0];\r\n                var t1_1 = matchValue[0];\r\n                return tree_add(comparer, k, tree_add(comparer, k2, t1_1));\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetNode\") {\r\n                    var h1 = matchValue[0].Fields[3];\r\n                    var h2 = matchValue[1].Fields[3];\r\n                    var k1 = matchValue[0].Fields[0];\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t11 = matchValue[0].Fields[1];\r\n                    var t12 = matchValue[0].Fields[2];\r\n                    var t21 = matchValue[1].Fields[1];\r\n                    var t22 = matchValue[1].Fields[2];\r\n                    if (h1 + tree_tolerance < h2) {\r\n                        return tree_rebalance(tree_balance(comparer, t1, k, t21), k2, t22);\r\n                    }\r\n                    else {\r\n                        if (h2 + tree_tolerance < h1) {\r\n                            return tree_rebalance(t11, k1, tree_balance(comparer, t12, k, t2));\r\n                        }\r\n                        else {\r\n                            return tree_mk(t1, k, t2);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    return $target1(matchValue[0]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var t2_1 = matchValue[1];\r\n            return tree_add(comparer, k, t2_1);\r\n        }\r\n    }\r\n}\r\nfunction tree_split(comparer, pivot, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(t.Fields[0], pivot);\r\n        if (c < 0) {\r\n            return [t, false, new SetTree(\"SetEmpty\", [])];\r\n        }\r\n        else if (c === 0) {\r\n            return [new SetTree(\"SetEmpty\", []), true, new SetTree(\"SetEmpty\", [])];\r\n        }\r\n        else {\r\n            return [new SetTree(\"SetEmpty\", []), false, t];\r\n        }\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return [new SetTree(\"SetEmpty\", []), false, new SetTree(\"SetEmpty\", [])];\r\n    }\r\n    else {\r\n        var c = comparer.Compare(pivot, t.Fields[0]);\r\n        if (c < 0) {\r\n            var patternInput = tree_split(comparer, pivot, t.Fields[1]);\r\n            return [patternInput[0], patternInput[1], tree_balance(comparer, patternInput[2], t.Fields[0], t.Fields[2])];\r\n        }\r\n        else if (c === 0) {\r\n            return [t.Fields[1], true, t.Fields[2]];\r\n        }\r\n        else {\r\n            var patternInput = tree_split(comparer, pivot, t.Fields[2]);\r\n            return [tree_balance(comparer, t.Fields[1], t.Fields[0], patternInput[0]), patternInput[1], patternInput[2]];\r\n        }\r\n    }\r\n}\r\nfunction tree_spliceOutSuccessor(t) {\r\n    if (t.Case === \"SetOne\") {\r\n        return [t.Fields[0], new SetTree(\"SetEmpty\", [])];\r\n    }\r\n    else if (t.Case === \"SetNode\") {\r\n        if (t.Fields[1].Case === \"SetEmpty\") {\r\n            return [t.Fields[0], t.Fields[2]];\r\n        }\r\n        else {\r\n            var patternInput = tree_spliceOutSuccessor(t.Fields[1]);\r\n            return [patternInput[0], tree_mk(patternInput[1], t.Fields[0], t.Fields[2])];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\r\n    }\r\n}\r\nfunction tree_remove(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c === 0) {\r\n            return new SetTree(\"SetEmpty\", []);\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else if (t.Case === \"SetNode\") {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_rebalance(tree_remove(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\r\n        }\r\n        else if (c === 0) {\r\n            var matchValue = [t.Fields[1], t.Fields[2]];\r\n            if (matchValue[0].Case === \"SetEmpty\") {\r\n                return t.Fields[2];\r\n            }\r\n            else if (matchValue[1].Case === \"SetEmpty\") {\r\n                return t.Fields[1];\r\n            }\r\n            else {\r\n                var patternInput = tree_spliceOutSuccessor(t.Fields[2]);\r\n                return tree_mk(t.Fields[1], patternInput[0], patternInput[1]);\r\n            }\r\n        }\r\n        else {\r\n            return tree_rebalance(t.Fields[1], t.Fields[0], tree_remove(comparer, k, t.Fields[2]));\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\nfunction tree_mem(comparer, k, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        return comparer.Compare(k, t.Fields[0]) === 0;\r\n    }\r\n    else if (t.Case === \"SetEmpty\") {\r\n        return false;\r\n    }\r\n    else {\r\n        var c = comparer.Compare(k, t.Fields[0]);\r\n        if (c < 0) {\r\n            return tree_mem(comparer, k, t.Fields[1]);\r\n        }\r\n        else if (c === 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return tree_mem(comparer, k, t.Fields[2]);\r\n        }\r\n    }\r\n}\r\nfunction tree_iter(f, t) {\r\n    if (t.Case === \"SetOne\") {\r\n        f(t.Fields[0]);\r\n    }\r\n    else {\r\n        if (t.Case === \"SetEmpty\") { }\r\n        else {\r\n            tree_iter(f, t.Fields[1]);\r\n            f(t.Fields[0]);\r\n            tree_iter(f, t.Fields[2]);\r\n        }\r\n    }\r\n}\r\nfunction tree_foldBack(f, m, x) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0], x) : m.Case === \"SetEmpty\" ? x : tree_foldBack(f, m.Fields[1], f(m.Fields[0], tree_foldBack(f, m.Fields[2], x)));\r\n}\r\nfunction tree_fold(f, x, m) {\r\n    if (m.Case === \"SetOne\") {\r\n        return f(x, m.Fields[0]);\r\n    }\r\n    else if (m.Case === \"SetEmpty\") {\r\n        return x;\r\n    }\r\n    else {\r\n        var x_1 = tree_fold(f, x, m.Fields[1]);\r\n        var x_2 = f(x_1, m.Fields[0]);\r\n        return tree_fold(f, x_2, m.Fields[2]);\r\n    }\r\n}\r\nfunction tree_forall(f, m) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? true : (f(m.Fields[0]) ? tree_forall(f, m.Fields[1]) : false) ? tree_forall(f, m.Fields[2]) : false;\r\n}\r\nfunction tree_exists(f, m) {\r\n    return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? false : (f(m.Fields[0]) ? true : tree_exists(f, m.Fields[1])) ? true : tree_exists(f, m.Fields[2]);\r\n}\r\nfunction tree_isEmpty(m) {\r\n    return m.Case === \"SetEmpty\" ? true : false;\r\n}\r\nfunction tree_subset(comparer, a, b) {\r\n    return tree_forall(function (x) { return tree_mem(comparer, x, b); }, a);\r\n}\r\nfunction tree_psubset(comparer, a, b) {\r\n    return tree_forall(function (x) { return tree_mem(comparer, x, b); }, a) ? tree_exists(function (x) { return !tree_mem(comparer, x, a); }, b) : false;\r\n}\r\nfunction tree_filterAux(comparer, f, s, acc) {\r\n    if (s.Case === \"SetOne\") {\r\n        if (f(s.Fields[0])) {\r\n            return tree_add(comparer, s.Fields[0], acc);\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }\r\n    else if (s.Case === \"SetEmpty\") {\r\n        return acc;\r\n    }\r\n    else {\r\n        var acc_1 = f(s.Fields[0]) ? tree_add(comparer, s.Fields[0], acc) : acc;\r\n        return tree_filterAux(comparer, f, s.Fields[1], tree_filterAux(comparer, f, s.Fields[2], acc_1));\r\n    }\r\n}\r\nfunction tree_filter(comparer, f, s) {\r\n    return tree_filterAux(comparer, f, s, new SetTree(\"SetEmpty\", []));\r\n}\r\nfunction tree_diffAux(comparer, m, acc) {\r\n    return m.Case === \"SetOne\" ? tree_remove(comparer, m.Fields[0], acc) : m.Case === \"SetEmpty\" ? acc : tree_diffAux(comparer, m.Fields[1], tree_diffAux(comparer, m.Fields[2], tree_remove(comparer, m.Fields[0], acc)));\r\n}\r\nfunction tree_diff(comparer, a, b) {\r\n    return tree_diffAux(comparer, b, a);\r\n}\r\nfunction tree_union(comparer, t1, t2) {\r\n    var matchValue = [t1, t2];\r\n    var $target2 = function (t) { return t; };\r\n    var $target3 = function (k1, t2_1) { return tree_add(comparer, k1, t2_1); };\r\n    if (matchValue[0].Case === \"SetEmpty\") {\r\n        var t = matchValue[1];\r\n        return t;\r\n    }\r\n    else {\r\n        if (matchValue[0].Case === \"SetOne\") {\r\n            if (matchValue[1].Case === \"SetEmpty\") {\r\n                return $target2(matchValue[0]);\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetOne\") {\r\n                    return $target3(matchValue[0].Fields[0], matchValue[1]);\r\n                }\r\n                else {\r\n                    return $target3(matchValue[0].Fields[0], matchValue[1]);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (matchValue[1].Case === \"SetEmpty\") {\r\n                return $target2(matchValue[0]);\r\n            }\r\n            else {\r\n                if (matchValue[1].Case === \"SetOne\") {\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t1_1 = matchValue[0];\r\n                    return tree_add(comparer, k2, t1_1);\r\n                }\r\n                else {\r\n                    var h1 = matchValue[0].Fields[3];\r\n                    var h2 = matchValue[1].Fields[3];\r\n                    var k1 = matchValue[0].Fields[0];\r\n                    var k2 = matchValue[1].Fields[0];\r\n                    var t11 = matchValue[0].Fields[1];\r\n                    var t12 = matchValue[0].Fields[2];\r\n                    var t21 = matchValue[1].Fields[1];\r\n                    var t22 = matchValue[1].Fields[2];\r\n                    if (h1 > h2) {\r\n                        var patternInput = tree_split(comparer, k1, t2);\r\n                        var lo = patternInput[0];\r\n                        var hi = patternInput[2];\r\n                        return tree_balance(comparer, tree_union(comparer, t11, lo), k1, tree_union(comparer, t12, hi));\r\n                    }\r\n                    else {\r\n                        var patternInput = tree_split(comparer, k2, t1);\r\n                        var lo = patternInput[0];\r\n                        var hi = patternInput[2];\r\n                        return tree_balance(comparer, tree_union(comparer, t21, lo), k2, tree_union(comparer, t22, hi));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction tree_intersectionAux(comparer, b, m, acc) {\r\n    if (m.Case === \"SetOne\") {\r\n        if (tree_mem(comparer, m.Fields[0], b)) {\r\n            return tree_add(comparer, m.Fields[0], acc);\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }\r\n    else if (m.Case === \"SetEmpty\") {\r\n        return acc;\r\n    }\r\n    else {\r\n        var acc_1 = tree_intersectionAux(comparer, b, m.Fields[2], acc);\r\n        var acc_2 = tree_mem(comparer, m.Fields[0], b) ? tree_add(comparer, m.Fields[0], acc_1) : acc_1;\r\n        return tree_intersectionAux(comparer, b, m.Fields[1], acc_2);\r\n    }\r\n}\r\nfunction tree_intersection(comparer, a, b) {\r\n    return tree_intersectionAux(comparer, b, a, new SetTree(\"SetEmpty\", []));\r\n}\r\nfunction tree_partition1(comparer, f, k, acc1, acc2) {\r\n    return f(k) ? [tree_add(comparer, k, acc1), acc2] : [acc1, tree_add(comparer, k, acc2)];\r\n}\r\nfunction tree_partitionAux(comparer, f, s, acc_0, acc_1) {\r\n    var acc = [acc_0, acc_1];\r\n    if (s.Case === \"SetOne\") {\r\n        var acc1 = acc[0];\r\n        var acc2 = acc[1];\r\n        return tree_partition1(comparer, f, s.Fields[0], acc1, acc2);\r\n    }\r\n    else {\r\n        if (s.Case === \"SetEmpty\") {\r\n            return acc;\r\n        }\r\n        else {\r\n            var acc_2 = tree_partitionAux(comparer, f, s.Fields[2], acc[0], acc[1]);\r\n            var acc_3 = tree_partition1(comparer, f, s.Fields[0], acc_2[0], acc_2[1]);\r\n            return tree_partitionAux(comparer, f, s.Fields[1], acc_3[0], acc_3[1]);\r\n        }\r\n    }\r\n}\r\nfunction tree_partition(comparer, f, s) {\r\n    var seed = [new SetTree(\"SetEmpty\", []), new SetTree(\"SetEmpty\", [])];\r\n    var arg30_ = seed[0];\r\n    var arg31_ = seed[1];\r\n    return tree_partitionAux(comparer, f, s, arg30_, arg31_);\r\n}\r\nfunction tree_minimumElementAux(s, n) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : tree_minimumElementAux(s.Fields[1], s.Fields[0]);\r\n}\r\nfunction tree_minimumElementOpt(s) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : tree_minimumElementAux(s.Fields[1], s.Fields[0]);\r\n}\r\nfunction tree_maximumElementAux(s, n) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : tree_maximumElementAux(s.Fields[2], s.Fields[0]);\r\n}\r\nfunction tree_maximumElementOpt(s) {\r\n    return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : tree_maximumElementAux(s.Fields[2], s.Fields[0]);\r\n}\r\nfunction tree_minimumElement(s) {\r\n    var matchValue = tree_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw new Error(\"Set contains no elements\");\r\n    }\r\n    else {\r\n        return matchValue;\r\n    }\r\n}\r\nfunction tree_maximumElement(s) {\r\n    var matchValue = tree_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw new Error(\"Set contains no elements\");\r\n    }\r\n    else {\r\n        return matchValue;\r\n    }\r\n}\r\nfunction tree_collapseLHS(stack) {\r\n    return stack.tail != null\r\n        ? stack.head.Case === \"SetOne\"\r\n            ? stack\r\n            : stack.head.Case === \"SetNode\"\r\n                ? tree_collapseLHS(listOfArray([\r\n                    stack.head.Fields[1],\r\n                    tree_SetOne(stack.head.Fields[0]),\r\n                    stack.head.Fields[2]\r\n                ], stack.tail))\r\n                : tree_collapseLHS(stack.tail)\r\n        : new List();\r\n}\r\nfunction tree_mkIterator(s) {\r\n    return { stack: tree_collapseLHS(new List(s, new List())), started: false };\r\n}\r\n;\r\nfunction tree_moveNext(i) {\r\n    function current(i) {\r\n        if (i.stack.tail == null) {\r\n            return null;\r\n        }\r\n        else if (i.stack.head.Case === \"SetOne\") {\r\n            return i.stack.head.Fields[0];\r\n        }\r\n        throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\r\n    }\r\n    if (i.started) {\r\n        if (i.stack.tail == null) {\r\n            return { done: true, value: null };\r\n        }\r\n        else {\r\n            if (i.stack.head.Case === \"SetOne\") {\r\n                i.stack = tree_collapseLHS(i.stack.tail);\r\n                return {\r\n                    done: i.stack.tail == null,\r\n                    value: current(i)\r\n                };\r\n            }\r\n            else {\r\n                throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return {\r\n            done: i.stack.tail == null,\r\n            value: current(i)\r\n        };\r\n    }\r\n    ;\r\n}\r\nfunction tree_compareStacks(comparer, l1, l2) {\r\n    var $target8 = function (n1k, t1) { return tree_compareStacks(comparer, listOfArray([new SetTree(\"SetEmpty\", []), tree_SetOne(n1k)], t1), l2); };\r\n    var $target9 = function (n1k, n1l, n1r, t1) { return tree_compareStacks(comparer, listOfArray([n1l, tree_SetNode(n1k, new SetTree(\"SetEmpty\", []), n1r, 0)], t1), l2); };\r\n    var $target11 = function (n2k, n2l, n2r, t2) { return tree_compareStacks(comparer, l1, listOfArray([n2l, tree_SetNode(n2k, new SetTree(\"SetEmpty\", []), n2r, 0)], t2)); };\r\n    if (l1.tail != null) {\r\n        if (l2.tail != null) {\r\n            if (l2.head.Case === \"SetOne\") {\r\n                if (l1.head.Case === \"SetOne\") {\r\n                    var n1k = l1.head.Fields[0], n2k = l2.head.Fields[0], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                    if (c !== 0) {\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        return tree_compareStacks(comparer, t1, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    if (l1.head.Case === \"SetNode\") {\r\n                        if (l1.head.Fields[1].Case === \"SetEmpty\") {\r\n                            var emp = l1.head.Fields[1], n1k = l1.head.Fields[0], n1r = l1.head.Fields[2], n2k = l2.head.Fields[0], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                            if (c !== 0) {\r\n                                return c;\r\n                            }\r\n                            else {\r\n                                return tree_compareStacks(comparer, listOfArray([n1r], t1), listOfArray([emp], t2));\r\n                            }\r\n                        }\r\n                        else {\r\n                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                        }\r\n                    }\r\n                    else {\r\n                        var n2k = l2.head.Fields[0], t2 = l2.tail;\r\n                        return tree_compareStacks(comparer, l1, listOfArray([new SetTree(\"SetEmpty\", []), tree_SetOne(n2k)], t2));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (l2.head.Case === \"SetNode\") {\r\n                    if (l2.head.Fields[1].Case === \"SetEmpty\") {\r\n                        if (l1.head.Case === \"SetOne\") {\r\n                            var n1k = l1.head.Fields[0], n2k = l2.head.Fields[0], n2r = l2.head.Fields[2], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                            if (c !== 0) {\r\n                                return c;\r\n                            }\r\n                            else {\r\n                                return tree_compareStacks(comparer, listOfArray([new SetTree(\"SetEmpty\", [])], t1), listOfArray([n2r], t2));\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (l1.head.Case === \"SetNode\") {\r\n                                if (l1.head.Fields[1].Case === \"SetEmpty\") {\r\n                                    var n1k = l1.head.Fields[0], n1r = l1.head.Fields[2], n2k = l2.head.Fields[0], n2r = l2.head.Fields[2], t1 = l1.tail, t2 = l2.tail, c = comparer.Compare(n1k, n2k);\r\n                                    if (c !== 0) {\r\n                                        return c;\r\n                                    }\r\n                                    else {\r\n                                        return tree_compareStacks(comparer, listOfArray([n1r], t1), listOfArray([n2r], t2));\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                                }\r\n                            }\r\n                            else {\r\n                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (l1.head.Case === \"SetOne\") {\r\n                            return $target8(l1.head.Fields[0], l1.tail);\r\n                        }\r\n                        else {\r\n                            if (l1.head.Case === \"SetNode\") {\r\n                                return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                            }\r\n                            else {\r\n                                return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (l1.head.Case === \"SetOne\") {\r\n                        return $target8(l1.head.Fields[0], l1.tail);\r\n                    }\r\n                    else {\r\n                        if (l1.head.Case === \"SetNode\") {\r\n                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\r\n                        }\r\n                        else {\r\n                            return tree_compareStacks(comparer, l1.tail, l2.tail);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    else {\r\n        if (l2.tail != null) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\nfunction tree_compare(comparer, s1, s2) {\r\n    if (s1.Case === \"SetEmpty\") {\r\n        if (s2.Case === \"SetEmpty\") {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else {\r\n        if (s2.Case === \"SetEmpty\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return tree_compareStacks(comparer, listOfArray([s1]), listOfArray([s2]));\r\n        }\r\n    }\r\n}\r\nfunction tree_mkFromEnumerator(comparer, acc, e) {\r\n    var cur = e.next();\r\n    while (!cur.done) {\r\n        acc = tree_add(comparer, cur.value, acc);\r\n        cur = e.next();\r\n    }\r\n    return acc;\r\n}\r\nfunction tree_ofSeq(comparer, c) {\r\n    var ie = c[Symbol.iterator]();\r\n    return tree_mkFromEnumerator(comparer, new SetTree(\"SetEmpty\", []), ie);\r\n}\r\nvar FableSet = (function () {\r\n    function FableSet() {\r\n    }\r\n    FableSet.prototype.ToString = function () {\r\n        return \"set [\" + Array.from(this).map(toString).join(\"; \") + \"]\";\r\n    };\r\n    FableSet.prototype.Equals = function (s2) {\r\n        return this.CompareTo(s2) === 0;\r\n    };\r\n    FableSet.prototype.CompareTo = function (s2) {\r\n        return this === s2 ? 0 : tree_compare(this.comparer, this.tree, s2.tree);\r\n    };\r\n    FableSet.prototype[Symbol.iterator] = function () {\r\n        var i = tree_mkIterator(this.tree);\r\n        return {\r\n            next: function () { return tree_moveNext(i); }\r\n        };\r\n    };\r\n    FableSet.prototype.values = function () {\r\n        return this[Symbol.iterator]();\r\n    };\r\n    FableSet.prototype.has = function (v) {\r\n        return tree_mem(this.comparer, v, this.tree);\r\n    };\r\n    FableSet.prototype.add = function (v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableSet.prototype.delete = function (v) {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    FableSet.prototype.clear = function () {\r\n        throw new Error(\"not supported\");\r\n    };\r\n    Object.defineProperty(FableSet.prototype, \"size\", {\r\n        get: function () {\r\n            return tree_count(this.tree);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FableSet.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Collections.FSharpSet\",\r\n            interfaces: [\"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return FableSet;\r\n}());\r\nexport default FableSet;\r\nfunction from(comparer, tree) {\r\n    var s = new FableSet();\r\n    s.tree = tree;\r\n    s.comparer = comparer || new GenericComparer();\r\n    return s;\r\n}\r\nexport function create(ie, comparer) {\r\n    comparer = comparer || new GenericComparer();\r\n    return from(comparer, ie ? tree_ofSeq(comparer, ie) : new SetTree(\"SetEmpty\", []));\r\n}\r\nexport function isEmpty(s) {\r\n    return tree_isEmpty(s.tree);\r\n}\r\nexport function add(item, s) {\r\n    return from(s.comparer, tree_add(s.comparer, item, s.tree));\r\n}\r\nexport function addInPlace(item, s) {\r\n    return s.has(item) ? false : (s.add(item), true);\r\n}\r\nexport function remove(item, s) {\r\n    return from(s.comparer, tree_remove(s.comparer, item, s.tree));\r\n}\r\nexport function union(set1, set2) {\r\n    return set2.tree.Case === \"SetEmpty\"\r\n        ? set1\r\n        : set1.tree.Case === \"SetEmpty\"\r\n            ? set2\r\n            : from(set1.comparer, tree_union(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function op_Addition(set1, set2) {\r\n    return union(set1, set2);\r\n}\r\nexport function unionInPlace(set1, set2) {\r\n    seqIterate(function (x) { set1.add(x); }, set2);\r\n}\r\nexport function unionMany(sets) {\r\n    return seqFold(function (acc, s) { return union(s, acc); }, create(), sets);\r\n}\r\nexport function difference(set1, set2) {\r\n    return set1.tree.Case === \"SetEmpty\"\r\n        ? set1\r\n        : set2.tree.Case === \"SetEmpty\"\r\n            ? set1\r\n            : from(set1.comparer, tree_diff(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function op_Subtraction(set1, set2) {\r\n    return difference(set1, set2);\r\n}\r\nexport function differenceInPlace(set1, set2) {\r\n    seqIterate(function (x) { set1.delete(x); }, set2);\r\n}\r\nexport function intersect(set1, set2) {\r\n    return set2.tree.Case === \"SetEmpty\"\r\n        ? set2\r\n        : set1.tree.Case === \"SetEmpty\"\r\n            ? set1\r\n            : from(set1.comparer, tree_intersection(set1.comparer, set1.tree, set2.tree));\r\n}\r\nexport function intersectInPlace(set1, set2) {\r\n    var set2_ = set2 instanceof Set ? set2 : new Set(set2);\r\n    seqIterate(function (x) { if (!set2_.has(x)) {\r\n        set1.delete(x);\r\n    } }, set1);\r\n}\r\nexport function intersectMany(sets) {\r\n    return seqReduce(function (s1, s2) { return intersect(s1, s2); }, sets);\r\n}\r\nexport function isProperSubsetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_psubset(set1.comparer, set1.tree, set2.tree);\r\n    }\r\n    else {\r\n        set2 = set2 instanceof Set ? set2 : new Set(set2);\r\n        return seqForAll(function (x) { return set2.has(x); }, set1) && seqExists(function (x) { return !set1.has(x); }, set2);\r\n    }\r\n}\r\nexport function isProperSubset(set1, set2) {\r\n    return isProperSubsetOf(set1, set2);\r\n}\r\nexport function isSubsetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_subset(set1.comparer, set1.tree, set2.tree);\r\n    }\r\n    else {\r\n        set2 = set2 instanceof Set ? set2 : new Set(set2);\r\n        return seqForAll(function (x) { return set2.has(x); }, set1);\r\n    }\r\n}\r\nexport function isSubset(set1, set2) {\r\n    return isSubsetOf(set1, set2);\r\n}\r\nexport function isProperSupersetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_psubset(set1.comparer, set2.tree, set1.tree);\r\n    }\r\n    else {\r\n        return isProperSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\r\n    }\r\n}\r\nexport function isProperSuperset(set1, set2) {\r\n    return isProperSupersetOf(set1, set2);\r\n}\r\nexport function isSupersetOf(set1, set2) {\r\n    if (set1 instanceof FableSet && set2 instanceof FableSet) {\r\n        return tree_subset(set1.comparer, set2.tree, set1.tree);\r\n    }\r\n    else {\r\n        return isSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\r\n    }\r\n}\r\nexport function isSuperset(set1, set2) {\r\n    return isSupersetOf(set1, set2);\r\n}\r\nexport function copyTo(xs, arr, arrayIndex, count) {\r\n    if (!Array.isArray(arr) && !ArrayBuffer.isView(arr))\r\n        throw new Error(\"Array is invalid\");\r\n    count = count || arr.length;\r\n    var i = arrayIndex || 0;\r\n    var iter = xs[Symbol.iterator]();\r\n    while (count--) {\r\n        var el = iter.next();\r\n        if (el.done)\r\n            break;\r\n        arr[i++] = el.value;\r\n    }\r\n}\r\nexport function partition(f, s) {\r\n    if (s.tree.Case === \"SetEmpty\") {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        var tuple = tree_partition(s.comparer, f, s.tree);\r\n        return [from(s.comparer, tuple[0]), from(s.comparer, tuple[1])];\r\n    }\r\n}\r\nexport function filter(f, s) {\r\n    if (s.tree.Case === \"SetEmpty\") {\r\n        return s;\r\n    }\r\n    else {\r\n        return from(s.comparer, tree_filter(s.comparer, f, s.tree));\r\n    }\r\n}\r\nexport function map(f, s) {\r\n    var comparer = new GenericComparer();\r\n    return from(comparer, tree_fold(function (acc, k) { return tree_add(comparer, f(k), acc); }, new SetTree(\"SetEmpty\", []), s.tree));\r\n}\r\nexport function exists(f, s) {\r\n    return tree_exists(f, s.tree);\r\n}\r\nexport function forAll(f, s) {\r\n    return tree_forall(f, s.tree);\r\n}\r\nexport function fold(f, seed, s) {\r\n    return tree_fold(f, seed, s.tree);\r\n}\r\nexport function foldBack(f, s, seed) {\r\n    return tree_foldBack(f, s.tree, seed);\r\n}\r\nexport function iterate(f, s) {\r\n    tree_iter(f, s.tree);\r\n}\r\nexport function minimumElement(s) {\r\n    return tree_minimumElement(s.tree);\r\n}\r\nexport function minElement(s) {\r\n    return tree_minimumElement(s.tree);\r\n}\r\nexport function maximumElement(s) {\r\n    return tree_maximumElement(s.tree);\r\n}\r\nexport function maxElement(s) {\r\n    return tree_maximumElement(s.tree);\r\n}\r\n","var Trampoline = (function () {\r\n    function Trampoline() {\r\n        this.callCount = 0;\r\n    }\r\n    Object.defineProperty(Trampoline, \"maxTrampolineCallCount\", {\r\n        get: function () {\r\n            return 2000;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Trampoline.prototype.incrementAndCheck = function () {\r\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\r\n    };\r\n    Trampoline.prototype.hijack = function (f) {\r\n        this.callCount = 0;\r\n        setTimeout(f, 0);\r\n    };\r\n    return Trampoline;\r\n}());\r\nexport { Trampoline };\r\nexport function protectedCont(f) {\r\n    return function (ctx) {\r\n        if (ctx.cancelToken.isCancelled)\r\n            ctx.onCancel(\"cancelled\");\r\n        else if (ctx.trampoline.incrementAndCheck())\r\n            ctx.trampoline.hijack(function () {\r\n                try {\r\n                    f(ctx);\r\n                }\r\n                catch (err) {\r\n                    ctx.onError(err);\r\n                }\r\n            });\r\n        else\r\n            try {\r\n                f(ctx);\r\n            }\r\n            catch (err) {\r\n                ctx.onError(err);\r\n            }\r\n    };\r\n}\r\nexport function protectedBind(computation, binder) {\r\n    return protectedCont(function (ctx) {\r\n        computation({\r\n            onSuccess: function (x) {\r\n                try {\r\n                    binder(x)(ctx);\r\n                }\r\n                catch (ex) {\r\n                    ctx.onError(ex);\r\n                }\r\n            },\r\n            onError: ctx.onError,\r\n            onCancel: ctx.onCancel,\r\n            cancelToken: ctx.cancelToken,\r\n            trampoline: ctx.trampoline\r\n        });\r\n    });\r\n}\r\nexport function protectedReturn(value) {\r\n    return protectedCont(function (ctx) { return ctx.onSuccess(value); });\r\n}\r\nvar AsyncBuilder = (function () {\r\n    function AsyncBuilder() {\r\n    }\r\n    AsyncBuilder.prototype.Bind = function (computation, binder) {\r\n        return protectedBind(computation, binder);\r\n    };\r\n    AsyncBuilder.prototype.Combine = function (computation1, computation2) {\r\n        return this.Bind(computation1, function () { return computation2; });\r\n    };\r\n    AsyncBuilder.prototype.Delay = function (generator) {\r\n        return protectedCont(function (ctx) { return generator()(ctx); });\r\n    };\r\n    AsyncBuilder.prototype.For = function (sequence, body) {\r\n        var iter = sequence[Symbol.iterator]();\r\n        var cur = iter.next();\r\n        return this.While(function () { return !cur.done; }, this.Delay(function () {\r\n            var res = body(cur.value);\r\n            cur = iter.next();\r\n            return res;\r\n        }));\r\n    };\r\n    AsyncBuilder.prototype.Return = function (value) {\r\n        return protectedReturn(value);\r\n    };\r\n    AsyncBuilder.prototype.ReturnFrom = function (computation) {\r\n        return computation;\r\n    };\r\n    AsyncBuilder.prototype.TryFinally = function (computation, compensation) {\r\n        return protectedCont(function (ctx) {\r\n            computation({\r\n                onSuccess: function (x) {\r\n                    compensation();\r\n                    ctx.onSuccess(x);\r\n                },\r\n                onError: function (x) {\r\n                    compensation();\r\n                    ctx.onError(x);\r\n                },\r\n                onCancel: function (x) {\r\n                    compensation();\r\n                    ctx.onCancel(x);\r\n                },\r\n                cancelToken: ctx.cancelToken,\r\n                trampoline: ctx.trampoline\r\n            });\r\n        });\r\n    };\r\n    AsyncBuilder.prototype.TryWith = function (computation, catchHandler) {\r\n        return protectedCont(function (ctx) {\r\n            computation({\r\n                onSuccess: ctx.onSuccess,\r\n                onCancel: ctx.onCancel,\r\n                cancelToken: ctx.cancelToken,\r\n                trampoline: ctx.trampoline,\r\n                onError: function (ex) {\r\n                    try {\r\n                        catchHandler(ex)(ctx);\r\n                    }\r\n                    catch (ex2) {\r\n                        ctx.onError(ex2);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AsyncBuilder.prototype.Using = function (resource, binder) {\r\n        return this.TryFinally(binder(resource), function () { return resource.Dispose(); });\r\n    };\r\n    AsyncBuilder.prototype.While = function (guard, computation) {\r\n        var _this = this;\r\n        if (guard())\r\n            return this.Bind(computation, function () { return _this.While(guard, computation); });\r\n        else\r\n            return this.Return(void 0);\r\n    };\r\n    AsyncBuilder.prototype.Zero = function () {\r\n        return protectedCont(function (ctx) { return ctx.onSuccess(void 0); });\r\n    };\r\n    return AsyncBuilder;\r\n}());\r\nexport { AsyncBuilder };\r\nexport var singleton = new AsyncBuilder();\r\n","import FSymbol from \"./Symbol\";\r\nimport { equalsUnions } from \"./Util\";\r\nimport { compareUnions } from \"./Util\";\r\nexport function choice1Of2(v) {\r\n    return new Choice(\"Choice1Of2\", [v]);\r\n}\r\nexport function choice2Of2(v) {\r\n    return new Choice(\"Choice2Of2\", [v]);\r\n}\r\nvar Choice = (function () {\r\n    function Choice(t, d) {\r\n        this.Case = t;\r\n        this.Fields = d;\r\n    }\r\n    Object.defineProperty(Choice.prototype, \"valueIfChoice1\", {\r\n        get: function () {\r\n            return this.Case === \"Choice1Of2\" ? this.Fields[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Choice.prototype, \"valueIfChoice2\", {\r\n        get: function () {\r\n            return this.Case === \"Choice2Of2\" ? this.Fields[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Choice.prototype.Equals = function (other) {\r\n        return equalsUnions(this, other);\r\n    };\r\n    Choice.prototype.CompareTo = function (other) {\r\n        return compareUnions(this, other);\r\n    };\r\n    Choice.prototype[FSymbol.reflection] = function () {\r\n        return {\r\n            type: \"Microsoft.FSharp.Core.FSharpChoice\",\r\n            interfaces: [\"FSharpUnion\", \"System.IEquatable\", \"System.IComparable\"]\r\n        };\r\n    };\r\n    return Choice;\r\n}());\r\nexport default Choice;\r\n","import { Trampoline } from \"./AsyncBuilder\";\r\nimport { protectedCont } from \"./AsyncBuilder\";\r\nimport { protectedBind } from \"./AsyncBuilder\";\r\nimport { protectedReturn } from \"./AsyncBuilder\";\r\nimport { choice1Of2 } from \"./Choice\";\r\nimport { choice2Of2 } from \"./Choice\";\r\nimport { map } from \"./Seq\";\r\nvar Async = (function () {\r\n    function Async() {\r\n    }\r\n    return Async;\r\n}());\r\nexport default Async;\r\nfunction emptyContinuation(x) {\r\n}\r\nexport function awaitPromise(p) {\r\n    return fromContinuations(function (conts) {\r\n        return p.then(conts[0]).catch(function (err) {\r\n            return (err == \"cancelled\" ? conts[2] : conts[1])(err);\r\n        });\r\n    });\r\n}\r\nexport function cancellationToken() {\r\n    return protectedCont(function (ctx) { return ctx.onSuccess(ctx.cancelToken); });\r\n}\r\nexport var defaultCancellationToken = { isCancelled: false };\r\nexport function catchAsync(work) {\r\n    return protectedCont(function (ctx) {\r\n        work({\r\n            onSuccess: function (x) { return ctx.onSuccess(choice1Of2(x)); },\r\n            onError: function (ex) { return ctx.onSuccess(choice2Of2(ex)); },\r\n            onCancel: ctx.onCancel,\r\n            cancelToken: ctx.cancelToken,\r\n            trampoline: ctx.trampoline\r\n        });\r\n    });\r\n}\r\nexport function fromContinuations(f) {\r\n    return protectedCont(function (ctx) { return f([ctx.onSuccess, ctx.onError, ctx.onCancel]); });\r\n}\r\nexport function ignore(computation) {\r\n    return protectedBind(computation, function (x) { return protectedReturn(void 0); });\r\n}\r\nexport function parallel(computations) {\r\n    return awaitPromise(Promise.all(map(function (w) { return startAsPromise(w); }, computations)));\r\n}\r\nexport function sleep(millisecondsDueTime) {\r\n    return protectedCont(function (ctx) {\r\n        setTimeout(function () { return ctx.cancelToken.isCancelled ? ctx.onCancel(\"cancelled\") : ctx.onSuccess(void 0); }, millisecondsDueTime);\r\n    });\r\n}\r\nexport function start(computation, cancellationToken) {\r\n    return startWithContinuations(computation, cancellationToken);\r\n}\r\nexport function startImmediate(computation, cancellationToken) {\r\n    return start(computation, cancellationToken);\r\n}\r\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\r\n    if (typeof continuation !== \"function\") {\r\n        cancelToken = continuation;\r\n        continuation = null;\r\n    }\r\n    var trampoline = new Trampoline();\r\n    computation({\r\n        onSuccess: continuation ? continuation : emptyContinuation,\r\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\r\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\r\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\r\n        trampoline: trampoline\r\n    });\r\n}\r\nexport function startAsPromise(computation, cancellationToken) {\r\n    return new Promise(function (resolve, reject) {\r\n        return startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken);\r\n    });\r\n}\r\n","﻿module TheGamma.Common\n\nopen Fable.Core\nopen Fable.Import.JS\nopen Fable.Import.Browser\nopen System.Collections.Generic\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n[<Emit(\"$0[$1]\")>]\nlet getProperty<'T> (obj:obj) (name:string) : 'T = failwith \"never\"\n\n[<Emit(\"parseInt($0, $1)\")>]\nlet parseInt (s:string) (b:int) : int = failwith \"JS\"\n\n[<Emit(\"$0.toString($1)\")>]\nlet formatInt (i:int) (b:int) : string = failwith \"JS\"\n\n[<Emit(\"(typeof($0)=='number')\")>]\nlet isNumber(n:obj) : bool = failwith \"!\"\n\n[<Emit(\"($0 instanceof Date)\")>]\nlet isDate(n:obj) : bool = failwith \"!\"\n\n[<Emit(\"$0.toISOString()\")>]\nlet toISOString(o:obj) : string = failwith \"!\"\n\n[<Emit(\"new Date($0)\")>]\nlet asDate(n:float) : System.DateTime = failwith \"!\"\n\n[<Emit(\"($0 instanceof Date) ? $0.getTime() : $0\")>]\nlet dateOrNumberAsNumber(n:obj) : float = failwith \"!\"\n\n[<Emit(\"\"\"($0.toLocaleString(\"en-US\",{day:\"numeric\",year:\"numeric\",month:\"short\"}))\"\"\")>]\nlet formatDate(d:obj) : string = failwith \"!\"\n\n[<Emit(\"\"\"$0.toLocaleString(\"en-GB\",{day:\"numeric\",year:\"numeric\",month:\"long\"})\"\"\")>]\nlet formatLongDate(d:obj) : string = failwith \"!\"\n\n[<Emit(\"\"\"($0.toLocaleString(\"en-US\",{hour:\"numeric\",minute:\"numeric\",second:\"numeric\"}))\"\"\")>]\nlet formatTime(d:obj) : string = failwith \"!\"\n\n[<Emit(\"\"\"($0.toLocaleString(\"en-US\",{hour:\"numeric\",minute:\"numeric\",second:\"numeric\"}) + \", \" +\n    $0.toLocaleString(\"en-US\",{day:\"numeric\",year:\"numeric\",month:\"short\"}))\"\"\")>]\nlet formatDateTime(d:obj) : string = failwith \"!\"\n\n[<Emit(\"(typeof($0)=='object')\")>]\nlet isObject(n:obj) : bool = failwith \"!\"\n\n[<Emit(\"Array.isArray($0)\")>]\nlet isArray(n:obj) : bool = failwith \"!\"\n\n[<Emit(\"isNaN($0)\")>]\nlet isNaN(n:float) : bool = failwith \"!\"\n\nlet niceNumber num decs =\n  let str = string num\n  let dot = str.IndexOf('.')\n  let before, after = \n    if dot = -1 then str, \"\"\n    else str.Substring(0, dot), str.Substring(dot + 1, min decs (str.Length - dot - 1))\n  let after = \n    if after.Length < decs then after + System.String [| for i in 1 .. (decs - after.Length) -> '0' |]\n    else after \n  let mutable res = before\n  if before.Length > 5 then\n    for i in before.Length-1 .. -1 .. 0 do\n      let j = before.Length - i\n      if i <> 0 && j % 3 = 0 then res <- res.Insert(i, \",\")\n  if Seq.forall ((=) '0') after then res\n  else res + \".\" + after\n\n[<Emit(\"JSON.stringify($0)\")>]\nlet jsonStringify json : string = failwith \"JS Only\"\n\n[<Emit(\"JSON.parse($0)\")>]\nlet jsonParse<'R> (str:string) : 'R = failwith \"JS Only\"\n\n[<Emit(\"console.log.apply(console, $0)\")>]\nlet consoleLog (args:obj[]) : unit = \n  let format = args.[0] :?> string\n  let mutable argIndex = 1\n  let mutable charIndex = 0\n  let mutable res = \"\"\n  while charIndex < format.Length do\n    if format.[charIndex] = '%' then\n      res <- res +\n        match format.[charIndex+1] with\n        | 'c' -> \"\"\n        | 's' -> args.[argIndex].ToString()\n        | 'O' -> sprintf \"%A\" (args.[argIndex])\n        | _ -> failwith \"consoleLog: Unsupported formatter\"\n      argIndex <- argIndex + 1\n      charIndex <- charIndex + 2\n    else \n      res <- res + format.[charIndex].ToString()\n      charIndex <- charIndex + 1\n  printfn \"%s\" res\n\n[<Emit(\"if (typeof logEvent != 'undefined') logEvent($0, $1, $2, $3)\")>]\nlet logEvent (category:string) (evt:string) (article:string) (data:obj) : unit = failwith \"JS only\"\n\n[<Emit(\"typeof window == 'undefined'\")>]\nlet windowUndefined () : bool = true\n\nlet isLocalHost() = \n  windowUndefined () ||\n  window.location.hostname = \"localhost\" || \n  window.location.hostname = \"127.0.0.1\"\n\nlet mutable enabledCategories = \n  if not (isLocalHost ()) then set []\n  //else set [\"TYPECHECKER\"; \"PROVIDERS\"] \n  else set [\"*\"] \ntype Log =\n  static member setEnabled(cats) = enabledCategories <- cats\n\n  static member event(category:string, evt:string, article:string, data:obj) = \n    logEvent category evt article data\n\n  static member message(level:string, category:string, msg:string, [<System.ParamArray>] args) = \n    let args = if args = null then [| |] else args\n    let category = category.ToUpper()\n    if not (isLocalHost ()) && level = \"EXCEPTION\" then\n      logEvent \"system\" \"exception\" \"\" (JsInterop.createObj [\"category\", box category; \"msg\", box msg; \"args\", box args ])\n\n    if level = \"EXCEPTION\" || level = \"ERROR\" || enabledCategories.Contains \"*\" || enabledCategories.Contains category then\n      let dt = System.DateTime.Now\n      let p2 (s:int) = (string s).PadLeft(2, '0')\n      let p4 (s:int) = (string s).PadLeft(4, '0')\n      let prefix = sprintf \"[%s:%s:%s:%s] %s: \" (p2 dt.Hour) (p2 dt.Minute) (p2 dt.Second) (p4 dt.Millisecond) category\n      let color = \n        match level with\n        | \"TRACE\" -> \"color:#808080\"\n        | \"EXCEPTION\" -> \"color:#c00000\"\n        | \"ERROR\" -> \"color:#900000\"\n        | _ -> \"\"\n      consoleLog(FSharp.Collections.Array.append [|box (\"%c\" + prefix + msg); box color|] args)\n\n  static member trace(category:string, msg:string, [<System.ParamArray>] args) = \n    Log.message(\"TRACE\", category, msg, args)\n\n  static member exn(category:string, msg:string, [<System.ParamArray>] args) = \n    Log.message(\"EXCEPTION\", category, msg, args)\n\n  static member error(category:string, msg:string, [<System.ParamArray>] args) = \n    Log.message(\"ERROR\", category, msg, args)\n\ntype Http =\n  /// Send HTTP request asynchronously\n  static member Request(meth, url, ?data, ?cookies) =\n    Async.FromContinuations(fun (cont, econt, _) ->\n      let xhr = XMLHttpRequest.Create()\n      xhr.``open``(meth, url, true)\n      match cookies with \n      | Some cookies when cookies <> \"\" -> xhr.setRequestHeader(\"X-Cookie\", cookies)\n      | _ -> ()\n      xhr.onreadystatechange <- fun _ ->\n        if xhr.readyState > 3. && xhr.status = 200. then\n          cont(xhr.responseText)\n        if xhr.readyState > 3. && xhr.status = 0. then\n          econt(System.Exception(meth + \" \" + url + \" failed: \" + xhr.statusText))\n        obj()\n      xhr.send(defaultArg data \"\") )\n\ntype Future<'T> = \n  abstract Then : ('T -> unit) -> unit\n\ntype Microsoft.FSharp.Control.Async with\n  static member AwaitFuture (f:Future<'T>) = Async.FromContinuations(fun (cont, _, _) ->\n    f.Then(cont))\n\n  static member Future (n:string option) op start = \n    let mutable res = Choice1Of3()\n    let mutable handlers = []\n    let mutable running = false\n\n    let trigger h = \n      match res with\n      | Choice1Of3 () -> handlers <- h::handlers \n      | Choice2Of3 v -> h v\n      | Choice3Of3 e -> raise e\n\n    let ensureStarted() = \n      if not running then \n        n |> FsOption.iter (fun n -> Log.trace(\"system\", \"Starting future '%s'....\", n))\n        running <- true\n        async { try \n                  let! r = op\n                  n |> FsOption.iter (fun n -> Log.trace(\"system\", \"Future '%s' evaluated to: %O\", n, r))\n                  res <- Choice2Of3 r                  \n                with e ->\n                  Log.exn(\"system\", \"Evaluating future failed: %O\", e)\n                  res <- Choice3Of3 e\n                for h in handlers do trigger h } |> Async.StartImmediate\n    if start = true then ensureStarted()\n\n    { new Future<_> with\n        member x.Then(f) = \n          ensureStarted()\n          trigger f }\n\n  static member CreateFuture(op) = Async.Future None op false\n  static member StartAsFuture(op) = Async.Future None op true\n  static member CreateNamedFuture name op = Async.Future (Some name) op false\n  static member StartAsNamedFuture name op = Async.Future (Some name) op true\n\nmodule Async = \n  module Array =\n    module Parallel =\n      let rec map f (ar:_[]) = async {\n        let res = FSharp.Collections.Array.zeroCreate ar.Length\n        let work = \n          [ for i in 0 .. ar.Length-1 -> async {\n              let! v = f ar.[i]\n              res.[i] <- v } ] |> Async.Parallel\n        let! _ = work\n        return res }\n\n    let rec map f (ar:_[]) = async {\n      let res = FSharp.Collections.Array.zeroCreate ar.Length\n      for i in 0 .. ar.Length-1 do\n        let! v = f ar.[i]\n        res.[i] <- v\n      return res }\n\n  let rec collect f l = async {\n    match l with \n    | x::xs -> \n        let! y = f x\n        let! ys = collect f xs\n        return List.append y ys\n    | [] -> return [] }\n\n  let rec choose f l = async {\n    match l with \n    | x::xs -> \n        let! y = f x\n        let! ys = choose f xs\n        return match y with None -> ys | Some y -> y::ys \n    | [] -> return [] }\n\n  let rec map f l = async {\n    match l with \n    | x::xs -> \n        let! y = f x\n        let! ys = map f xs\n        return y::ys\n    | [] -> return [] }\n\n  let rec foldMap f st l = async {\n    match l with\n    | x::xs ->\n        let! y, st = f st x\n        let! st, ys = foldMap f st xs\n        return st, y::ys\n    | [] -> return st, [] }\n\n  let rec fold f st l = async {\n    match l with\n    | x::xs ->\n        let! st = f st x\n        return! fold f st xs \n    | [] -> return st }\n\n/// Symbol is a unique immutable identiifer (we use JavaScript symbols)\ntype Symbol = interface end\n\n[<Emit(\"Symbol()\")>]\nlet createSymbol () = { new Symbol }\n\ntype ListDictionaryNode<'K, 'T> = \n  { mutable Result : 'T option\n    Nested : Dictionary<'K, ListDictionaryNode<'K, 'T>> }\n\ntype ListDictionary<'K, 'V> = Dictionary<'K, ListDictionaryNode<'K, 'V>>\n\nmodule JsHelpers = \n  type KeyValue = \n    abstract key : string\n    abstract value : obj\n\n  [<Emit(\"(function(o) { return Object.keys(o).map(function(k) { return {\\\"key\\\":k, \\\"value\\\":o[k] }; }); })($0)\")>]\n  let properties(o:obj) : KeyValue[] = failwith \"!\"\n\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule ListDictionary = \n  let tryFind ks dict = \n    let rec loop ks node =\n      match ks, node with\n      | [], { Result = Some r } -> Some r\n      | k::ks, { Nested = d } when d.ContainsKey k -> loop ks (d.[k])\n      | _ -> None\n    loop ks { Nested = dict; Result = None }\n\n  let set ks v dict =\n    let rec loop ks (dict:ListDictionary<_, _>) = \n      match ks with\n      | [] -> failwith \"Empty key not supported\"\n      | k::ks ->\n          if not (dict.ContainsKey k) then dict.[k] <- { Nested = Dictionary<_, _>(); Result = None }\n          if List.isEmpty ks then dict.[k].Result <- Some v\n          else loop ks (dict.[k].Nested)\n    loop ks dict\n\n  let count (dict:ListDictionary<_, _>) = \n    let rec loop node = \n      let nest = node.Nested |> Seq.sumBy (fun kv -> loop kv.Value)\n      if node.Result.IsSome then 1 + nest else nest\n    dict |> Seq.sumBy (fun kv -> loop kv.Value)\n\nmodule List = \n  let groupWith f list = \n    let groups = ResizeArray<_ * ResizeArray<_>>()\n    for e in list do\n      let mutable added = false \n      let mutable i = 0\n      while not added && i < groups.Count do\n        if f e (fst groups.[i]) then \n          (snd groups.[i]).Add(e)\n          added <- true\n        i <- i + 1\n      if not added then \n        groups.Add(e, ResizeArray<_>([e]))\n    groups |> Seq.map (snd >> List.ofSeq) |> List.ofSeq\n\n  let unreduce f s = s |> Seq.unfold (fun s -> \n    f s |> Microsoft.FSharp.Core.Option.map (fun v -> v, v)) |> List.ofSeq\n","﻿namespace TheGamma.Babel\n\n// ------------------------------------------------------------------------------------------------\n// Babel AST and formatting it as JSON\n// ------------------------------------------------------------------------------------------------\n\nopen Fable\nopen Fable.Core\n\n/// Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\ntype Position =\n  { line: int; column: int; }\n\ntype SourceLocation =\n  { start: Position; ``end``: Position; }\n\ntype AssignmentOperator =\n  | AssignEqual\n  | AssignMinus\n  | AssignPlus\n  | AssignMultiply\n  | AssignDivide\n  | AssignModulus\n  | AssignShiftLeft\n  | AssignShiftRightSignPropagating\n  | AssignShiftRightZeroFill\n  | AssignOrBitwise\n  | AssignXorBitwise\n  | AssignAndBitwise    \n\ntype BinaryOperator =\n  | BinaryEqual\n  | BinaryUnequal\n  | BinaryEqualStrict\n  | BinaryUnequalStrict\n  | BinaryLess\n  | BinaryLessOrEqual\n  | BinaryGreater\n  | BinaryGreaterOrEqual\n  | BinaryShiftLeft\n  | BinaryShiftRightSignPropagating\n  | BinaryShiftRightZeroFill\n  | BinaryMinus\n  | BinaryPlus\n  | BinaryMultiply\n  | BinaryDivide\n  | BinaryModulus\n  | BinaryExponent\n  | BinaryOrBitwise\n  | BinaryXorBitwise\n  | BinaryAndBitwise\n  | BinaryIn\n  | BinaryInstanceOf\n\ntype Pattern = \n  | IdentifierPattern of name:string * location:SourceLocation option\n\ntype VariableDeclarationKind = \n  | Var | Let | Const\n\ntype VariableDeclarator = \n  | VariableDeclarator of id:Pattern * init:Expression option * location:SourceLocation option\n\nand ObjectMember = \n  | ObjectProperty of key:Expression * value:Expression * computed:bool * location:SourceLocation option\n\nand Expression = \n  | IdentifierExpression of name:string * location:SourceLocation option\n  | FunctionExpression of id:string option * ``params``:Pattern list * body:Statement * generator:bool * async:bool * location:SourceLocation option\n  | NullLiteral of location:SourceLocation option\n  | StringLiteral of value:string * location:SourceLocation option\n  | BooleanLiteral of value:bool * location:SourceLocation option\n  | NumericLiteral of value:float * location:SourceLocation option\n  | AssignmentExpression of operator:AssignmentOperator * left:Expression * right:Expression * location:SourceLocation option\n  | CallExpression of callee:Expression * args:Expression list * location:SourceLocation option\n  | ArrayExpression of elements:Expression list * location:SourceLocation option\n  | MemberExpression of obj:Expression * property:Expression * computed:bool * location:SourceLocation option\n  | NewExpression of callee:Expression * arguments:Expression list * location:SourceLocation option\n  | BinaryExpression of operator:BinaryOperator * left:Expression * right:Expression * location:SourceLocation option\n  | ObjectExpression of properties:ObjectMember list * location:SourceLocation option\n\nand Statement =\n  | ExpressionStatement of expression:Expression * location:SourceLocation option\n  | BlockStatement of body:Statement list * location:SourceLocation option\n  | EmptyStatement of location:SourceLocation option\n  | ReturnStatement of argument:Expression * location:SourceLocation option\n  | VariableDeclaration of kind:VariableDeclarationKind * declarations:VariableDeclarator list * location:SourceLocation option\n\ntype Program = \n  { location : SourceLocation option\n    body: Statement list }\n\nmodule Serializer = \n  let createObj props = JsInterop.createObj (List.concat props)\n  let inline (=>) k v = [ k, box v ]\n  let inline (=?>) k v = match v with Some v -> [ k, box v] | _ -> []\n\n  let serializeBinaryOperator = function\n    | BinaryEqual -> \"==\"\n    | BinaryUnequal -> \"!=\"\n    | BinaryEqualStrict -> \"===\"\n    | BinaryUnequalStrict -> \"!==\"\n    | BinaryLess -> \"<\"\n    | BinaryLessOrEqual -> \"<=\"\n    | BinaryGreater -> \">\"\n    | BinaryGreaterOrEqual -> \">=\"\n    | BinaryShiftLeft -> \"<<\"\n    | BinaryShiftRightSignPropagating -> \">>\"\n    | BinaryShiftRightZeroFill -> \">>>\"\n    | BinaryMinus -> \"-\"\n    | BinaryPlus -> \"+\"\n    | BinaryMultiply -> \"*\"\n    | BinaryDivide -> \"/\"\n    | BinaryModulus -> \"%\"\n    | BinaryExponent -> \"**\"\n    | BinaryOrBitwise -> \"|\"\n    | BinaryXorBitwise -> \"^\"\n    | BinaryAndBitwise -> \"&\"\n    | BinaryIn -> \"in\"\n    | BinaryInstanceOf -> \"instanceof\"\n\n  let serializeAssignOperator = function\n    | AssignEqual -> \"=\"\n    | AssignMinus -> \"-=\"\n    | AssignPlus -> \"+=\"\n    | AssignMultiply -> \"*=\"\n    | AssignDivide -> \"/=\"\n    | AssignModulus -> \"%=\"\n    | AssignShiftLeft -> \"<<=\"\n    | AssignShiftRightSignPropagating -> \">>=\"\n    | AssignShiftRightZeroFill -> \">>>=\"\n    | AssignOrBitwise -> \"|=\"\n    | AssignXorBitwise -> \"^=\"\n    | AssignAndBitwise -> \"&=\"\n\n  let serializePattern pat = \n    match pat with\n    | IdentifierPattern(name, loc) ->\n        createObj [ \"type\" => \"Identifier\"; \"name\" => name; \"loc\" =?> loc ]\n\n  let rec serializeMember mem = \n    match mem with\n    | ObjectProperty(key, value, computed, loc) ->\n        createObj [ \n          \"type\" => \"ObjectProperty\"; \"key\" => serializeExpression key\n          \"value\" => serializeExpression value; \"computed\" => computed       \n          \"loc\" =?> loc ]\n\n  and serializeDeclarator (VariableDeclarator(id, init, loc)) = \n    createObj [ \n      \"type\" => \"VariableDeclarator\"; \"id\" => serializePattern id; \n      \"init\" =?> Option.map serializeExpression init; \"loc\" =?> loc ]\n    \n  and serializeExpression expr = \n    match expr with\n    | IdentifierExpression(name, loc) ->\n        createObj [ \"type\" => \"Identifier\"; \"name\" => name; \"loc\" =?> loc ]\n    | NewExpression(callee, args, loc) ->\n        createObj [ \n          \"type\" => \"NewExpression\"; \"callee\" => serializeExpression callee\n          \"arguments\" => Array.ofList (List.map serializeExpression args); \"loc\" =?> loc ]\n    | FunctionExpression(id, pars, body, generator, async, loc) ->\n        createObj [ \n          \"type\" => \"FunctionExpression\"; \"id\" =?> id; \"params\" => Array.ofList (List.map serializePattern pars)\n          \"body\" => serializeStatement body; \"generator\" => generator; \"async\" => async; \"loc\" =?> loc ]\n    | AssignmentExpression(op, l, r, loc) ->\n        createObj [ \n          \"type\" => \"AssignmentExpression\"; \"left\" => serializeExpression l; \"right\" => serializeExpression r;\n          \"operator\" => serializeAssignOperator op; \"loc\" =?> loc ]\n    | CallExpression(callee, args, loc) ->\n        createObj [ \n          \"type\" => \"CallExpression\"; \"callee\" => serializeExpression callee\n          \"arguments\" => Array.ofSeq (List.map serializeExpression args); \"loc\" =?> loc ]\n    | MemberExpression(obj, prop, computed, loc) ->\n        createObj [\n          \"type\" => \"MemberExpression\"; \"object\" => serializeExpression obj;\n          \"property\" => serializeExpression prop; \"computed\" => computed; \"loc\" =?> loc ]\n    | BinaryExpression(op, l, r, loc) ->\n        createObj [ \n          \"type\" => \"BinaryExpression\"; \"left\" => serializeExpression l; \"right\" => serializeExpression r;\n          \"operator\" => serializeBinaryOperator op; \"loc\" =?> loc ]\n    | ObjectExpression(props, loc) ->\n        createObj [ \"type\" => \"ObjectExpression\"; \"properties\" => Array.ofList (List.map serializeMember props); \"loc\" =?> loc ]\n    \n    | ArrayExpression(elements, loc) ->\n        createObj [ \"type\" => \"ArrayExpression\"; \"elements\" => Array.ofSeq (List.map serializeExpression elements); \"loc\" =?> loc ]\n\n    | NullLiteral(loc) ->\n        createObj [ \"type\" => \"NullLiteral\"; \"loc\" =?> loc ]\n    | StringLiteral(v, loc) ->\n        createObj [ \"type\" => \"StringLiteral\"; \"value\" => v; \"loc\" =?> loc ]\n    | BooleanLiteral(v, loc) ->\n        createObj [ \"type\" => \"BooleanLiteral\"; \"value\" => v; \"loc\" =?> loc ]\n    | NumericLiteral(v, loc) ->\n        createObj [ \"type\" => \"NumericLiteral\"; \"value\" => v; \"loc\" =?> loc ]\n\n  and serializeStatement stm = \n    match stm with\n    | ExpressionStatement(e, loc) ->  \n        createObj [ \"type\" => \"ExpressionStatement\"; \"loc\" =?> loc; \"expression\" => serializeExpression e ]\n    | BlockStatement(b, loc) ->\n        createObj [ \"type\" => \"BlockStatement\"; \"loc\" =?> loc; \"body\" => Array.ofList (List.map serializeStatement b) ]\n    | EmptyStatement(loc) ->\n        createObj [ \"type\" => \"EmptyStatement\"; \"loc\" =?> loc  ]\n    | ReturnStatement(arg, loc) ->\n        createObj [ \"type\" => \"ReturnStatement\"; \"loc\" =?> loc; \"argument\" => serializeExpression arg ]\n    | VariableDeclaration(kind, decls, loc) ->\n        let kind = match kind with Var -> \"var\" | Let -> \"let\" | Const -> \"const\"\n        createObj [ \n          \"type\" => \"VariableDeclaration\"; \"kind\" => kind; \n          \"declarations\" => Array.ofList (List.map serializeDeclarator decls); \"loc\" =?> loc  ]\n\n  let serializeProgram prog = \n    createObj [\n      \"type\" => \"Program\"\n      \"loc\" =?> prog.location \n      \"sourceType\" => \"module\"\n      \"body\" => Array.ofList (List.map serializeStatement prog.body)\n      \"directives\" => box [||]\n    ]\n\n// ------------------------------------------------------------------------------------------------\n// Operators that make constructing Babel ASTs easier\n// ------------------------------------------------------------------------------------------------\n\nmodule BabelOperators = \n  let ident s = IdentifierExpression(s, None)\n  let str v = StringLiteral(v, None)\n  let num v = NumericLiteral(v, None)\n  let bool v = BooleanLiteral(v, None)\n  let arr l = ArrayExpression(l, None)\n\n  let (?) (e:Expression) (s:string) = MemberExpression(e, IdentifierExpression(s, None), false, None)\n  let (/?/) (e:Expression) a = MemberExpression(e, a, true, None)\n\n  let (/@/) (e:Expression) (args) = CallExpression(e, args, None)\n\n  let func v f = \n    let body = BlockStatement([ReturnStatement(f (ident v), None)], None)\n    FunctionExpression(None, [IdentifierPattern(v, None)], body, false, false, None)\n  \n  let funcN n f = \n    let args = List.init n (fun i -> \"_arg\" + string i)\n    let body = BlockStatement([ReturnStatement(f (List.map ident args), None)], None)\n    FunctionExpression(None, List.map (fun s -> IdentifierPattern(s, None)) args, body, false, false, None)\n\n\n\n(*\ntype NumberKind =\n    | Int8 | UInt8 | Int16 | UInt16 | Int32 | UInt32 | Float32 | Float64\n\ntype RegexFlag =\n    | RegexGlobal | RegexIgnoreCase | RegexMultiline | RegexSticky\n\ntype UnaryOperator =\n    | UnaryMinus\n    | UnaryPlus\n    | UnaryNot\n    | UnaryNotBitwise\n    | UnaryTypeof\n    | UnaryVoid\n    | UnaryDelete\n    \ntype UpdateOperator =\n    | UpdateMinus\n    | UpdatePlus\n        \ntype LogicalOperator =\n    | LogicalOr\n    | LogicalAnd\n    \ntype AssignmentOperator =\n    | AssignEqual\n    | AssignMinus\n    | AssignPlus\n    | AssignMultiply\n    | AssignDivide\n    | AssignModulus\n    | AssignShiftLeft\n    | AssignShiftRightSignPropagating\n    | AssignShiftRightZeroFill\n    | AssignOrBitwise\n    | AssignXorBitwise\n    | AssignAndBitwise    \n*)\n(*\n/// The type field is a string representing the AST variant type. \n/// Each subtype of Node is documented below with the specific string of its type field. \n/// You can use this field to determine which interface a node implements.\n/// The loc field represents the source location information of the node. \n/// If the node contains no information about the source location, the field is null; \n/// otherwise it is an object consisting of a start position (the position of the first character of the parsed source region) \n/// and an end position (the position of the first character after the parsed source region):\n[<AbstractClass>]\ntype Node(typ, ?loc) =\n    member x.``type``: string = typ\n    member x.loc: SourceLocation option = loc\n\n/// Since the left-hand side of an assignment may be any expression in general, an expression can also be a pattern.\n[<AbstractClass>] type Expression(typ, ?loc) = inherit Node(typ, ?loc = loc)\n\n[<AbstractClass>] type Literal(typ, ?loc) = inherit Expression(typ, ?loc = loc)\n\n[<AbstractClass>] type Statement(typ, ?loc) = inherit Node(typ, ?loc = loc)\n\n/// Note that declarations are considered statements; this is because declarations can appear in any statement context.\n[<AbstractClass>] type Declaration(typ, ?loc) = inherit Statement(typ, ?loc = loc)\n\n/// A module import or export declaration.\n[<AbstractClass>] type ModuleDeclaration(typ, ?loc) = inherit Node(typ, ?loc = loc)\n\ntype Pattern = interface end\n\n/// Placeholder, doesn't belong to Babel specs\ntype EmptyExpression() =\n    inherit Expression(\"EmptyExpression\")\n\n/// Not in Babel specs, disguised as StringLiteral    \ntype MacroExpression(value, args, ?loc) =\n    inherit Literal(\"StringLiteral\", ?loc = loc)\n    member x.value: string = value\n    member x.args: Node[] = args\n    member x.macro = true\n\n(** ##Template Literals *)\ntype TemplateElement(value: string, tail, ?loc) =\n    inherit Node(\"TemplateElement\", ?loc = loc)\n    member x.tail: bool = tail\n    member x.value = dict [ (\"raw\", value); (\"cooked\", value) ]\n\ntype TemplateLiteral(quasis, expressions, ?loc) =\n    inherit Literal(\"TemplateLiteral\", ?loc = loc)\n    member x.quasis: TemplateElement[] = quasis\n    member x.expressions: Expression[] = expressions\n    \ntype TaggedTemplateExpression(tag, quasi, ?loc) =\n    inherit Expression(\"TaggedTemplateExpression\", ?loc = loc)\n    member x.tag: Expression = tag\n    member x.quasi: TemplateLiteral = quasi\n\n(** ##Identifier *)\n/// Note that an identifier may be an expression or a destructuring pattern.\ntype Identifier(name, ?loc) =\n    inherit Expression(\"Identifier\", ?loc = loc)\n    member x.name: string = name\n    interface Pattern\n    override x.ToString() = x.name\n\n(** ##Literals *)\ntype RegExpLiteral(pattern, flags, ?loc) =\n    inherit Literal(\"RegExpLiteral\", ?loc = loc)\n    member x.pattern: string = pattern\n    member x.flags =\n        flags |> Seq.map (function\n            | RegexGlobal -> \"g\"\n            | RegexIgnoreCase -> \"i\"\n            | RegexMultiline -> \"m\"\n            | RegexSticky -> \"y\") |> Seq.fold (+) \"\"\n\ntype NullLiteral(?loc) =\n    inherit Literal(\"NullLiteral\", ?loc = loc)\n\ntype StringLiteral(value, ?loc) =\n    inherit Literal(\"StringLiteral\", ?loc = loc)\n    member x.value: string = value\n\ntype BooleanLiteral(value, ?loc) =\n    inherit Literal(\"BooleanLiteral\", ?loc = loc)\n    member x.value: bool = value\n\ntype NumericLiteral(value, ?loc) =\n    inherit Literal(\"NumericLiteral\", ?loc = loc)\n    member x.value: U2<int, float> = value    \n\n(** ##Misc *)\ntype Decorator(value, ?loc) =\n    inherit Node(\"Decorator\", ?loc = loc)\n    member x.value = value\n    \ntype DirectiveLiteral(?loc) =\n    inherit StringLiteral(\"DirectiveLiteral\", ?loc = loc)\n\n/// e.g. \"use strict\";\ntype Directive(value, ?loc) =\n    inherit Node(\"Directive\", ?loc = loc)\n    member x.value: DirectiveLiteral = value    \n\n(** ##Program *)\n/// A complete program source tree.\n/// Parsers must specify sourceType as \"module\" if the source has been parsed as an ES6 module. \n/// Otherwise, sourceType must be \"script\".\ntype Program(fileName, originalFileName, loc, body, ?directives) =\n    inherit Node(\"Program\", loc)\n    member x.sourceType = \"module\" // Don't use \"script\"\n    member x.body: U2<Statement, ModuleDeclaration>[] = body\n    member x.directives: Directive[] = defaultArg directives [||]\n    // Properties below don't belong to babel specs\n    member x.fileName: string = fileName\n    member x.originalFileName: string = originalFileName\n\n(** ##Statements *)\n/// An expression statement, i.e., a statement consisting of a single expression.\ntype ExpressionStatement(expression, ?loc) =\n    inherit Statement(\"ExpressionStatement\", ?loc = loc)\n    member x.expression: Expression = expression\n\n/// A block statement, i.e., a sequence of statements surrounded by braces.\ntype BlockStatement(body, ?directives, ?loc) =\n    inherit Statement(\"BlockStatement\", ?loc = loc)\n    member x.body: Statement[] = body\n    member x.directives: Directive[] = defaultArg directives [||]\n\n/// An empty statement, i.e., a solitary semicolon.\ntype EmptyStatement(?loc) =\n    inherit Statement(\"EmptyStatement\", ?loc = loc)\n\ntype DebuggerStatement(?loc) =\n    inherit Statement(\"DebuggerStatement\", ?loc = loc)\n    \n// type WithStatement\n\n(** ##Control Flow *)\ntype ReturnStatement(argument, ?loc) =\n    inherit Statement(\"ReturnStatement\", ?loc = loc)\n    member x.argument: Expression = argument\n\n// type LabeledStatement\n// type BreakStatement\n// type ContinueStatement\n\n(** ##Choice *)\ntype IfStatement(test, consequent, ?alternate, ?loc) =\n    inherit Statement(\"IfStatement\", ?loc = loc)\n    member x.test: Expression = test\n    member x.consequent: Statement = consequent\n    member x.alternate: Statement option = alternate    \n\n/// A case (if test is an Expression) or default (if test === null) clause in the body of a switch statement.\ntype SwitchCase(consequent, ?test, ?loc) =\n    inherit Node(\"SwitchCase\", ?loc = loc)\n    member x.test: Expression option = test\n    member x.consequent: Statement[] = consequent\n\ntype SwitchStatement(discriminant, cases, ?loc) =\n    inherit Statement(\"SwitchStatement\", ?loc = loc)\n    member x.discriminant: Expression = discriminant\n    member x.cases: SwitchCase[] = cases\n\n(** ##Exceptions *)\ntype ThrowStatement(argument, ?loc) =\n    inherit Statement(\"ThrowStatement\", ?loc = loc)\n    member x.argument: Expression = argument\n\n/// A catch clause following a try block.\ntype CatchClause(param, body, ?loc) =\n    inherit Node(\"CatchClause\", ?loc = loc)\n    member x.param: Pattern = param\n    member x.body: BlockStatement = body\n\n/// If handler is null then finalizer must be a BlockStatement.\ntype TryStatement(block, ?handler, ?finalizer, ?loc) =\n    inherit Statement(\"TryStatement\", ?loc = loc)\n    member x.block: BlockStatement = block\n    member x.handler: CatchClause option = handler\n    member x.finalizer: BlockStatement option = finalizer\n\n(** ##Declarations *)\ntype VariableDeclarator(id, ?init, ?loc) =\n    inherit Declaration(\"VariableDeclarator\", ?loc = loc)\n    member x.id: Pattern = id\n    member x.init: Expression option = init\n\ntype VariableDeclarationKind = Var | Let | Const\n\ntype VariableDeclaration(kind, declarations, ?loc) =\n    inherit Declaration(\"VariableDeclaration\", ?loc = loc)\n    new (var, ?init, ?loc) =\n        VariableDeclaration(Var, [|VariableDeclarator(var, ?init=init, ?loc=loc)|], ?loc=loc)\n    member x.declarations: VariableDeclarator[] = declarations\n    member x.kind =\n        match kind with Var -> \"var\" | Let -> \"let\" | Const -> \"const\"\n\n(** ##Loops *)\ntype WhileStatement(test, body, ?loc) =\n    inherit Statement(\"WhileStatement\", ?loc = loc)\n    member x.test: Expression = test\n    member x.body: BlockStatement = body\n\ntype DoWhileStatement(body, test, ?loc) =\n    inherit Statement(\"DoWhileStatement\", ?loc = loc)\n    member x.body: BlockStatement = body\n    member x.test: Expression = test\n\ntype ForStatement(body, ?init, ?test, ?update, ?loc) =\n    inherit Statement(\"ForStatement\", ?loc = loc)\n    member x.body: BlockStatement = body\n    member x.init: U2<VariableDeclaration, Expression> option = init\n    member x.test: Expression option = test\n    member x.update: Expression option = update\n\n/// When passing a VariableDeclaration, the bound value must go through\n/// the `right` parameter instead of `init` property in VariableDeclarator\ntype ForInStatement(left, right, body, ?loc) =\n    inherit Statement(\"ForInStatement\", ?loc = loc)\n    member x.body: BlockStatement = body\n    member x.left: U2<VariableDeclaration, Expression> = left\n    member x.right: Expression = right\n\n/// When passing a VariableDeclaration, the bound value must go through\n/// the `right` parameter instead of `init` property in VariableDeclarator\ntype ForOfStatement(left, right, body, ?loc) =\n    inherit Statement(\"ForOfStatement\", ?loc = loc)\n    member x.body: BlockStatement = body\n    member x.left: U2<VariableDeclaration, Expression> = left\n    member x.right: Expression = right\n\n/// A function declaration. Note that id cannot be null.\ntype FunctionDeclaration(id, args, body, ?generator, ?async, ?loc) =\n    inherit Declaration(\"FunctionDeclaration\", ?loc = loc)\n    member x.id: Identifier = id\n    member x.``params``: Pattern[] = args\n    member x.body: BlockStatement = body\n    member x.generator = defaultArg generator false\n    member x.async = defaultArg async false\n\n(** ##Expressions *)\n\n/// A super pseudo-expression.\ntype Super(?loc) =\n    inherit Expression(\"Super\", ?loc = loc)\n\ntype ThisExpression(?loc) =\n    inherit Expression(\"ThisExpression\", ?loc = loc)\n\n/// A fat arrow function expression, e.g., let foo = (bar) => { /* body */ }.\ntype ArrowFunctionExpression(args, body, isExpression, ?async, ?loc) =\n    inherit Expression(\"ArrowFunctionExpression\", ?loc = loc)\n    member x.expression = isExpression\n    member x.``params``: Pattern[] = args\n    member x.body: U2<BlockStatement, Expression> = body\n    member x.async: bool = defaultArg async false\n        \ntype FunctionExpression(args, body, ?generator, ?async, ?id, ?loc) =\n    inherit Expression(\"FunctionExpression\", ?loc = loc)\n    member x.id: Identifier option = id\n    member x.``params``: Pattern[] = args\n    member x.body: BlockStatement = body\n    member x.generator: bool = defaultArg generator false\n    member x.async: bool = defaultArg async false\n    \n/// e.g., x = do { var t = f(); t * t + 1 };\n/// http://wiki.ecmascript.org/doku.php?id=strawman:do_expressions\n/// Doesn't seem to work well with block-scoped variables (let, const)\ntype DoExpression(body, ?loc) =\n    inherit Expression(\"DoExpression\", ?loc = loc)\n    member x.body: BlockStatement = body\n    \ntype YieldExpression(argument, ``delegate``, ?loc) =\n    inherit Expression(\"YieldExpression\", ?loc = loc)\n    member x.argument: Expression option = argument\n    /// Delegates to another generator? (yield* )\n    member x.``delegate``: bool = ``delegate``    \n\ntype AwaitExpression(argument, ?loc) =\n    inherit Expression(\"AwaitExpression\", ?loc = loc)\n    member x.argument: Expression option = argument\n\ntype RestProperty(argument, ?loc) =\n    inherit Node(\"RestProperty\", ?loc = loc)\n    member x.argument: Expression = argument\n\n/// e.g., var z = { x: 1, ...y } // Copy all properties from y \ntype SpreadProperty(argument, ?loc) =\n    inherit Node(\"SpreadProperty\", ?loc = loc)\n    member x.argument: Expression = argument\n\ntype SpreadElement(argument, ?loc) =\n    inherit Node(\"SpreadElement\", ?loc = loc)\n    member x.argument: Expression = argument\n    \ntype ArrayExpression(elements, ?loc) =\n    inherit Expression(\"ArrayExpression\", ?loc = loc)\n    member x.elements: U2<Expression, SpreadElement> option[] = elements\n\n[<AbstractClass>]\ntype ObjectMember(typ, key, ?value, ?computed, ?loc) =\n    inherit Node(typ, ?loc = loc)\n    member x.key: Expression = key\n    member x.value: Expression option = value\n    member x.computed: bool = defaultArg computed false\n    // member x.decorators: Decorator[] = defaultArg decorators []\n    \ntype ObjectProperty(key, value, ?shorthand, ?computed, ?loc) =\n    inherit ObjectMember(\"ObjectProperty\", key, value, ?computed=computed, ?loc=loc)\n    member x.shorthand: bool = defaultArg shorthand false\n\ntype ObjectMethodKind = ObjectGetter | ObjectSetter | ObjectMeth\n\ntype ObjectMethod(kind, key, args, body, ?computed, ?generator, ?async, ?loc) =\n    inherit ObjectMember(\"ObjectMethod\", key, ?computed=computed, ?loc=loc)\n    member x.kind = match kind with ObjectGetter -> \"get\"\n                                  | ObjectSetter -> \"set\"\n                                  | ObjectMeth -> \"method\"\n    member x.``params``: Pattern[] = args\n    member x.body: BlockStatement = body\n    member x.generator: bool = defaultArg generator false\n    member x.async: bool = defaultArg async false\n\n/// If computed is true, the node corresponds to a computed (a[b]) member expression and property is an Expression. \n/// If computed is false, the node corresponds to a static (a.b) member expression and property is an Identifier.\ntype MemberExpression(``object``, property, ?computed, ?loc) =\n    inherit Expression(\"MemberExpression\", ?loc = loc)\n    member x.``object``: Expression = ``object``\n    member x.property: Expression = property\n    member x.computed: bool = defaultArg computed false\n    interface Pattern\n\ntype ObjectExpression(properties, ?loc) =\n    inherit Expression(\"ObjectExpression\", ?loc = loc)\n    member x.properties: U3<ObjectProperty, ObjectMethod, SpreadProperty>[] = properties\n\n/// A conditional expression, i.e., a ternary ?/: expression.\ntype ConditionalExpression(test, consequent, alternate, ?loc) =\n    inherit Expression(\"ConditionalExpression\", ?loc = loc)\n    member x.test: Expression = test\n    member x.consequent: Expression = consequent\n    member x.alternate: Expression = alternate\n\n/// A function or method call expression.  \ntype CallExpression(callee, args, ?loc) =\n    inherit Expression(\"CallExpression\", ?loc = loc)\n    member x.callee: Expression = callee\n    member x.arguments: U2<Expression, SpreadElement>[] = args\n\ntype NewExpression(callee, args, ?loc) =\n    inherit Expression(\"NewExpression\", ?loc = loc)\n    member x.callee: Expression = callee\n    member x.arguments: U2<Expression, SpreadElement>[] = args\n\n/// A comma-separated sequence of expressions.\ntype SequenceExpression(expressions, ?loc) =\n    inherit Expression(\"SequenceExpression\", ?loc = loc)\n    member x.expressions: Expression[] = expressions\n\n(** ##Unary Operations *)\ntype UnaryExpression(operator, argument, ?prefix, ?loc) =\n    inherit Expression(\"UnaryExpression\", ?loc = loc)\n    member x.prefix: bool = defaultArg prefix true\n    member x.argument: Expression = argument\n    member x.operator =\n        match operator with\n        | UnaryMinus -> \"-\"\n        | UnaryPlus -> \"+\"\n        | UnaryNot -> \"!\"\n        | UnaryNotBitwise -> \"~\"\n        | UnaryTypeof -> \"typeof\"\n        | UnaryVoid -> \"void\"\n        | UnaryDelete -> \"delete\"           \n\ntype UpdateExpression(operator, prefix, argument, ?loc) =\n    inherit Expression(\"UpdateExpression\", ?loc = loc)\n    member x.prefix: bool = prefix\n    member x.argument: Expression = argument\n    member x.operator =\n        match operator with\n        | UpdateMinus -> \"--\"\n        | UpdatePlus -> \"++\"\n    \n\ntype AssignmentExpression(operator, left, right, ?loc) =\n    inherit Expression(\"AssignmentExpression\", ?loc = loc)\n    member x.left: Expression = left\n    member x.right: Expression = right\n    member x.operator =\n        match operator with    \n        | AssignEqual -> \"=\"\n        | AssignMinus -> \"-=\"\n        | AssignPlus -> \"+=\"\n        | AssignMultiply -> \"*=\"\n        | AssignDivide -> \"/=\"\n        | AssignModulus -> \"%=\"\n        | AssignShiftLeft -> \"<<=\"\n        | AssignShiftRightSignPropagating -> \">>=\"\n        | AssignShiftRightZeroFill -> \">>>=\"\n        | AssignOrBitwise -> \"|=\"\n        | AssignXorBitwise -> \"^=\"\n        | AssignAndBitwise -> \"&=\"\n    \ntype LogicalExpression(operator, left, right, ?loc) =\n    inherit Expression(\"LogicalExpression\", ?loc = loc)\n    member x.left: Expression = left\n    member x.right: Expression = right\n    member x.operator =\n        match operator with\n        | LogicalOr -> \"||\"\n        | LogicalAnd-> \"&&\"\n        \n\n(** ##Patterns *)\n// type AssignmentProperty(key, value, ?loc) =\n//     inherit ObjectProperty(\"AssignmentProperty\", ?loc = loc)\n//     member x.value: Pattern = value\n\n// type ObjectPattern(properties, ?loc) =\n//     inherit Node(\"ObjectPattern\", ?loc = loc)\n//     member x.properties: U2<AssignmentProperty, RestProperty>[] = properties\n//     interface Pattern\n\ntype ArrayPattern(elements, ?loc) =\n    inherit Node(\"ArrayPattern\", ?loc = loc)\n    member x.elements: Pattern option[] = elements\n    interface Pattern\n\ntype AssignmentPattern(left, right, ?loc) =\n    inherit Node(\"AssignmentPattern\", ?loc = loc)\n    member x.left: Pattern = left\n    member x.right: Expression = right\n    interface Pattern\n\ntype RestElement(argument, ?loc) =\n    inherit Node(\"RestElement\", ?loc = loc)\n    member x.argument: Pattern = argument\n    interface Pattern        \n\n(** ##Classes *)\ntype ClassMethodKind =\n    | ClassConstructor | ClassFunction | ClassGetter | ClassSetter\n\ntype ClassMethod(kind, key, args, body, computed, ``static``, ?loc) =\n    inherit Node(\"ClassMethod\", ?loc = loc)\n    member x.kind = match kind with ClassConstructor -> \"constructor\"\n                                  | ClassGetter -> \"get\"\n                                  | ClassSetter -> \"set\"\n                                  | ClassFunction -> \"method\"\n    member x.key: Expression = key\n    member x.``params``: Pattern[] = args\n    member x.body: BlockStatement = body\n    member x.computed: bool = computed\n    member x.``static``: bool = ``static``\n    // member x.decorators: Decorator[] = defaultArg decorators []\n    // This appears in astexplorer.net but it's not documented\n    // member x.expression: bool = false\n\n/// ES Class Fields & Static Properties\n/// https://github.com/jeffmo/es-class-fields-and-static-properties\n/// e.g, class MyClass { static myStaticProp = 5; myProp /* = 10 */; }\ntype ClassProperty(key, value, ?loc) =\n    inherit Node(\"ClassProperty\", ?loc = loc)\n    member x.key: Identifier = key\n    member x.value: Expression = value\n\ntype ClassBody(body, ?loc) =\n    inherit Node(\"ClassBody\", ?loc = loc)\n    member x.body: U2<ClassMethod, ClassProperty>[] = body\n\ntype ClassDeclaration(body, id, ?super, ?loc) =\n    inherit Declaration(\"ClassDeclaration\", ?loc = loc)\n    member x.body: ClassBody = body\n    member x.id: Identifier = id\n    member x.superClass: Expression option = super\n    // member x.decorators: Decorator[] = defaultArg decorators []\n\n/// Anonymous class: e.g., var myClass = class { }\ntype ClassExpression(body, ?id, ?super, ?loc) =\n    inherit Expression(\"ClassExpression\", ?loc = loc)\n    member x.body: ClassBody = body\n    member x.id: Identifier option = id    \n    member x.superClass: Expression option = super\n    // member x.decorators: Decorator[] = defaultArg decorators []\n\n// type MetaProperty(meta, property, ?loc) =\n//     inherit Expression(\"MetaProperty\", ?loc = loc)\n//     member x.meta: Identifier = meta\n//     member x.property: Expression = property\n\n(** ##Modules *)\n/// A specifier in an import or export declaration.\n[<AbstractClass>]\ntype ModuleSpecifier(typ, local, ?loc) =\n    inherit Node(typ, ?loc = loc)\n    member x.local: Identifier = local\n\n/// An imported variable binding, e.g., {foo} in import {foo} from \"mod\" or {foo as bar} in import {foo as bar} from \"mod\". \n/// The imported field refers to the name of the export imported from the module. \n/// The local field refers to the binding imported into the local module scope. \n/// If it is a basic named import, such as in import {foo} from \"mod\", both imported and local are equivalent Identifier nodes; in this case an Identifier node representing foo. \n/// If it is an aliased import, such as in import {foo as bar} from \"mod\", the imported field is an Identifier node representing foo, and the local field is an Identifier node representing bar.\ntype ImportSpecifier(local, imported, ?loc) =\n    inherit ModuleSpecifier(\"ImportSpecifier\", local, ?loc = loc)\n    member x.imported: Identifier = imported\n\n/// A default import specifier, e.g., foo in import foo from \"mod\".\ntype ImportDefaultSpecifier(local, ?loc) =\n    inherit ModuleSpecifier(\"ImportDefaultSpecifier\", local, ?loc = loc)\n    \n/// A namespace import specifier, e.g., * as foo in import * as foo from \"mod\".\ntype ImportNamespaceSpecifier(local, ?loc) =\n    inherit ModuleSpecifier(\"ImportNamespaceSpecifier\", local, ?loc = loc)\n\n/// e.g., import foo from \"mod\";.\ntype ImportDeclaration(specifiers, source, ?loc) =\n    inherit ModuleDeclaration(\"ImportDeclaration\", ?loc = loc)\n    member x.specifiers: U3<ImportSpecifier, ImportDefaultSpecifier, ImportNamespaceSpecifier>[] = specifiers\n    member x.source: Literal = source\n\n/// An exported variable binding, e.g., {foo} in export {foo} or {bar as foo} in export {bar as foo}. \n/// The exported field refers to the name exported in the module. \n/// The local field refers to the binding into the local module scope. \n/// If it is a basic named export, such as in export {foo}, both exported and local are equivalent Identifier nodes; \n/// in this case an Identifier node representing foo. If it is an aliased export, such as in export {bar as foo}, \n/// the exported field is an Identifier node representing foo, and the local field is an Identifier node representing bar.\ntype ExportSpecifier(local, exported, ?loc) =\n    inherit ModuleSpecifier(\"ExportSpecifier\", local, ?loc = loc)\n    member x.exported: Identifier = exported\n    \n/// An export named declaration, e.g., export {foo, bar};, export {foo} from \"mod\"; or export var foo = 1;.\n/// Note: Having declaration populated with non-empty specifiers or non-null source results in an invalid state.\ntype ExportNamedDeclaration(?declaration, ?specifiers, ?source, ?loc) =\n    inherit ModuleDeclaration(\"ExportNamedDeclaration\", ?loc = loc)\n    member x.declaration: Declaration option = declaration\n    member x.specifiers: ExportSpecifier[] = defaultArg specifiers [||]\n    member x.source: Literal option = source\n\n/// An export default declaration, e.g., export default function () {}; or export default 1;. \ntype ExportDefaultDeclaration(declaration, ?loc) =\n    inherit ModuleDeclaration(\"ExportDefaultDeclaration\", ?loc = loc)\n    member x.declaration: U2<Declaration, Expression> = declaration\n\n/// An export batch declaration, e.g., export * from \"mod\";.\ntype ExportAllDeclaration(source, ?loc) =\n    inherit ModuleDeclaration(\"ExportAllDeclaration\", ?loc = loc)\n    member x.source: Literal = source\n*)","﻿namespace TheGamma\nopen TheGamma.Common\n\n// ------------------------------------------------------------------------------------------------\n// Tokens and common \n// ------------------------------------------------------------------------------------------------\n\n/// Represents a range as character offset in a file. 0-indexed, the End position is the position\n/// of the last character of the thing in the range. Consider range of \"42\" in \"1 + 42 + 2\".\n/// The range of the token 42 here would be { Start = 4; End = 5 }:\n///\n///     1   +   4 2   +   2 \n///     0 1 2 3 4 5 6 7 8 9\n///\ntype Range = \n  { Start : int\n    End : int }\n\n/// Error with a range. Message can be Markdown, Range is generic so that we can reuse \n/// the data structure with both `Range` and line-based range when reporting errors.\ntype Error<'Range> =\n  { Number : int\n    Message : string\n    Range : 'Range }\n\n/// Binary operators (Equals is tokenized as separate token, but after parsing it can be operator)\ntype [<RequireQualifiedAccess>] Operator = \n  | Equals\n  | Modulo\n  | Plus\n  | Minus\n  | Multiply\n  | Divide\n  | Power\n  | GreaterThan\n  | LessThan\n  | GreaterThanOrEqual\n  | LessThanOrEqual\n\n/// Tokens produced by tokenizer\ntype [<RequireQualifiedAccess>] TokenKind = \n  | LParen\n  | RParen\n  | Equals\n  | Dot\n  | Comma\n  | Let\n  | LSquare\n  | RSquare\n  | Colon\n  | Fun\n  | Arrow\n  | Operator of Operator\n  | Boolean of bool\n  | Number of string * float\n  | String of string\n  | Ident of string\n  | QIdent of string\n  | White of string\n  | Newline\n  | Error of char\n  | EndOfFile\n\n/// Token with a range\ntype Token = \n  { Token : TokenKind \n    Range : Range }\n\n// ------------------------------------------------------------------------------------------------\n// Types and code generation\n// ------------------------------------------------------------------------------------------------\n\ntype Emitter = \n  { Emit : Babel.Expression (* Babel.Expression list *) -> Babel.Expression }\n\ntype Metadata = \n  { Context : string\n    Type : string\n    Data : obj }\n\ntype [<RequireQualifiedAccess>] Documentation = \n  | Text of string\n  | Details of string * string\n  | None \n\ntype Member = \n  { Name : string \n    Type : Type \n    Metadata : Metadata list \n    Emitter : Emitter }\n\nand ObjectType = \n  abstract Members : Member[] \n  abstract TypeEquals : ObjectType -> bool\n\nand [<RequireQualifiedAccess>] PrimitiveType = \n  | Number\n  | Date\n  | String\n  | Bool\n  | Unit\n\nand MethodArgument =\n  { Name : string\n    Optional : bool\n    Static : bool\n    Type : Type }\n\nand [<RequireQualifiedAccess>] Type =\n  | Delayed of Future<Type>\n  | Object of ObjectType\n  | Primitive of PrimitiveType\n  | List of elementType:Type\n  | Method of arguments:MethodArgument list * typ:((Type * RuntimeValue option) list -> Type option) \n  | Any\n\n// ------------------------------------------------------------------------------------------------\n// Entities - binder attaches those to individual constructs in the parsed AST\n// ------------------------------------------------------------------------------------------------\n\n/// Name. In expressions, it usually appears as Node<Name> \nand Name = \n  { Name : string }\n\n/// Represents constants that can appear in the code\n/// (We create separate entity for each, so that we can calculate\n/// values of entities and not just types)\nand [<RequireQualifiedAccess>] Constant = \n  | Number of float\n  | String of string\n  | Boolean of bool\n  | Empty\n\n/// Represents different kinds of entities that we create. Roughhly\n/// corresponds to all places in code where something has a name.\nand [<RequireQualifiedAccess>] EntityKind = \n\n  // Entities that represent root node, program and commands\n  | Root\n  | Program of commands:Entity list\n  | RunCommand of body:Entity\n  | LetCommand of variable:Entity * assignment:Entity\n\n  // Standard constructs of the language\n  | List of elements:Entity list\n  | Constant of Constant\n  | Function of variable:Entity * body:Entity\n  | Operator of left:Entity * operator:Operator * right:Entity\n\n  /// Reference to a global symbol or a local variable\n  | GlobalValue of name:Name * Babel.Expression option \n  | Variable of name:Name * value:Entity\n\n  /// Variable binding in lambda abstraction\n  | Binding of name:Name * callSite:Entity\n  /// Call site in which a lambda function appears. Marks method reference & argument\n  /// (the argument is the name or the index of the parameter in the list)\n  | CallSite of instance:Entity * parameter:Choice<string, int>\n\n  /// Represents all arguments passed to method; Antecedants are individual arguments\n  /// (a mix of named parameter & ordinary expression entities)\n  | ArgumentList of arguments:Entity list\n  /// Named param in a call site with an expression assigned to it\n  | NamedParam of name:Name * assignment:Entity\n\n  /// Placeholder with its name and the body entity\n  | Placeholder of name:Name * body:Entity\n\n  /// Member access and call with arguments (call has member access \n  /// as the instance; second argument of Member is MemberName)\n  | Call of instance:Entity * arguments:Entity\n  | Member of instance:Entity * name:Entity \n  | MemberAccess of membr:Entity\n  | MemberName of name:Name\n\n\n  \n/// An entity represents a thing in the source code to which we attach additional info.\n/// It is uniquely identified by its `Symbol` (which is also used for lookups)\nand Entity = \n  { Kind : EntityKind\n    Symbol : Symbol \n    mutable Value : EntityValue option\n    mutable Meta : Metadata list\n    mutable Type : Type option \n    mutable Errors : Error<Range> list }\n\nand RuntimeValue = obj\n\nand EntityValue =\n  { Value : RuntimeValue\n    Preview : Lazy<RuntimeValue option> }\n\n// ------------------------------------------------------------------------------------------------\n// Parsed AST \n// ------------------------------------------------------------------------------------------------\n\n/// Node wraps syntax element with other information. Whitespce before/after are tokens \n/// around it that the parser skipped (they may be whitespace, but also skipped error tokens).\n/// Entity is assigned to the expression later by a binder.\ntype Node<'T> = \n  { WhiteBefore : Token list\n    WhiteAfter : Token list\n    Range : Range \n    Node : 'T\n    mutable Entity : Entity option }\n\n/// Method call argument, optionally with a named\ntype Argument =\n  { Name : Node<Name> option\n    Value : Node<Expr> }\n\n/// A program is a list of commands (with range info)\nand Program = \n  { Body : Node<Node<Command> list> }\n\n/// Variable binding or an expression\nand Command = \n  | Let of Node<Name> * Node<Expr>\n  | Expr of Node<Expr>\n\n/// An expression (does not include let binding, which is a command)\nand [<RequireQualifiedAccess>] Expr = \n  | Variable of Node<Name>\n  | Member of Node<Expr> * Node<Expr>\n  | Call of Node<Expr> * Node<Argument list>\n  | Function of Node<Name> * Node<Expr>\n  | Placeholder of Node<Name> * Node<Expr>\n  | String of string\n  | Number of float\n  | Boolean of bool\n  | Binary of Node<Expr> * Node<Operator> * Node<Expr>\n  | List of Node<Expr> list\n  | Empty\n\n","namespace TheGamma.TypeProviders\n\nopen TheGamma\nopen TheGamma.Babel\nopen TheGamma.Common\nopen Fable.Import\n\ntype ProvidedType = \n  | NamedType of name:string * typ:Type\n  | GlobalValue of string * Metadata list * Expression * Type\n\nmodule ProviderHelpers = \n  let docMeta doc = \n    { Context = \"http://thegamma.net\"\n      Type = \"Documentation\"\n      Data = box doc }\n","﻿module Fable.Helpers.Babel\n\nopen Fable.Core\n\n[<Emit(\"eval($0)\")>]\nlet eval (s:string) : 'T = failwith \"JS only\"\n\ntype BabelOptions = \n  { presets : string[] }\n\ntype BabelResult = \n  { code : string }\n\ntype Babel =\n  abstract transformFromAst : obj * string * BabelOptions -> BabelResult\n\n[<Emit(\"Babel\")>]\nlet babel : Babel = Unchecked.defaultof<_> \n","namespace TheGamma.General\n\nopen System\nopen TheGamma\nopen TheGamma.Html\nopen TheGamma.Common\nopen Fable.Import.Browser\nopen Fable.Core\n\ntype math = \n  static member sqrt(f:float) = sqrt f\n  static member pow(f:float, k) = Math.Pow(f, k)\n  static member log(f:float, ?b) = match b with Some b -> Math.Log(f, b) | _ -> log f\n  static member min(f1:float, f2:float) = min f1 f2\n  static member max(f1:float, f2:float) = max f1 f2\n  static member round(n:float, decimals:int) = Math.Round(n, decimals)\n  static member ceil(n:float) = Math.Ceiling(n)\n  static member floor(n:float) = Math.Floor(n)\n\ntype date = \n  static member now() = DateTime.Now\n  static member date(year,month,day) = DateTime(year,month,day)\n  static member time(year,month,day,hour,minute,second) = DateTime(year,month,day,hour,minute,second)\n\ntype dateformat = \n  static member longDate(dt:obj) : string = formatLongDate (unbox<System.DateTime> dt)\n  \ntype number = \n  static member format(n:float, ?decimals) = niceNumber n (defaultArg decimals 999) \n\ntype pair<'t1, 't2> internal (v1:'t1, v2:'t2) = \n  member x.first = v1\n  member x.second = v2","﻿namespace TheGamma.Series\n\nopen Fable.Core\nopen TheGamma.Common\n\n// --------------------------------------------------------------------------------------------------------------------\n// Series helpers - various JavaScript functions needed for simple series implementation\n// --------------------------------------------------------------------------------------------------------------------\n\nmodule SeriesInternals =\n  open System.Collections.Generic\n\n  [<Emit(\"($0==null)\")>]\n  let isNull(o:obj) : bool = failwith \"never\"\n\n  [<Emit(\"$0[$1]\")>]\n  let getProperty<'T> (obj:obj) (name:string) : 'T = failwith \"never\"\n\n  [<Emit(\"($0 < $1 ? -1 : ($0 == $1 ? 0 : 1))\")>]\n  let compare (x:'a) (y:'a) : int = failwith \"never\"\n\n  let slice lo hi (arr:'T[]) =\n    Array.init (hi - lo + 1) (fun i -> arr.[lo + i])\n\n  let dictAny (v:seq<'k*'v>) = unbox<IDictionary<'k,'v>> (dict (unbox<seq<obj * obj>> v))\n\n  let zipUnsorted (arr1:_[]) (arr2:_[]) =\n    let d1 = dictAny arr1\n    let d2 = dictAny arr2\n    let res = ResizeArray<_>()\n    for kv1 in d1 do\n      let v2 =\n        if d2.ContainsKey(kv1.Key) then Some(d2.[kv1.Key])\n        else None\n      res.Add(kv1.Key, (Some kv1.Value, v2))\n    for kv2 in d2 do\n      if not (d1.ContainsKey(kv2.Key)) then\n        res.Add(kv2.Key, (None, Some kv2.Value))\n    Array.ofSeq res\n\n  let isSortedUsing test proj (arr:_[]) =\n    let rec loop i =\n      if i = arr.Length then true\n      else test (proj arr.[i-1]) (proj arr.[i]) && loop (i+1)\n    arr.Length = 0 || loop 1\n\n  let zipSorted (arr1:('k*'v1)[]) (arr2:('k*'v2)[]) =\n    let mutable i1 = 0\n    let mutable i2 = 0\n    let inline (<.) (a:'k) (b:'k) = compare a b < 0\n    let inline eq (a:'k) (b:'k) = compare a b = 0\n    let res = ResizeArray<_>()\n    while i1 < arr1.Length && i2 < arr2.Length do\n      let (k1, v1), (k2, v2) = arr1.[i1], arr2.[i2]\n      if eq k1 k2 then\n        res.Add(k1, (Some v1, Some v2))\n        i1 <- i1 + 1\n        i2 <- i2 + 1\n      elif k1 <. k2 then\n        res.Add(k1, (Some v1, None))\n        i1 <- i1 + 1\n      elif k2 <. k1 then\n        res.Add(k2, (None, Some v2))\n        i2 <- i2 + 1\n    while i1 < arr1.Length do\n      let k1, v1 = arr1.[i1]\n      res.Add(k1, (Some v1, None))\n      i1 <- i1 + 1\n    while i2 < arr2.Length do\n      let k2, v2 = arr2.[i2]\n      res.Add(k2, (None, Some v2))\n      i2 <- i2 + 2\n    Array.ofSeq res\n\n  let zipAny (arr1:('k*'v1)[]) (arr2:('k*'v2)[]) =\n    let (<=.) (a:'k) (b:'k) = compare a b <= 0\n    let (>=.) (a:'k) (b:'k) = compare a b >= 0\n    if isSortedUsing (<=.) fst arr1 && isSortedUsing (<=.) fst arr2 then zipSorted arr1 arr2\n    elif isSortedUsing (>=.) fst arr1 && isSortedUsing (>=.) fst arr2 then Array.rev (zipSorted (Array.rev arr1) (Array.rev arr2))\n    else zipUnsorted arr1 arr2\n\n// --------------------------------------------------------------------------------------------------------------------\n// Async series library for TheGamma - implements type `series<'k, 'v>` with various operations\n// --------------------------------------------------------------------------------------------------------------------\n\nopen SeriesInternals\n\ntype ``val``<'k> = \n  { value : Async<'k> }\n  member s.map(f) =\n    { value = async { \n        let! r = s.value \n        return f r } }\n\ntype internal helpers = \n  static member inline lift (f:('a*'b)[] -> ('c*'d)[]) (s:series<_, _>) =\n    let nd = async {\n      let! vs = s.data |> Async.AwaitFuture\n      return f vs } |> Async.StartAsFuture\n    { data = nd\n      keyName = s.keyName\n      valueName = s.valueName\n      seriesName = s.seriesName } \n  static member inline asyncLift (f:('a*'b)[] -> Async<('c*'d)[]>) (s:series<_, _>) =\n    let nd = async {\n      let! vs = s.data |> Async.AwaitFuture\n      return! f vs } |> Async.StartAsFuture\n    { data = nd\n      keyName = s.keyName\n      valueName = s.valueName\n      seriesName = s.seriesName }\n\n  static member inline liftAggregation f (s:series<_, _>) : ``val``<_> =\n    { value = async {\n        let! vs = s.data |> Async.AwaitFuture\n        return f vs } }\n\nand series<'k, 'v> = \n  internal \n    { data : Future<('k * 'v)[]> \n      keyName : string\n      valueName : string\n      seriesName : string }\n\n  member internal x.set(data, ?keyName, ?valueName, ?seriesName) = \n    { data = data \n      keyName = defaultArg keyName x.keyName\n      valueName = defaultArg valueName x.valueName\n      seriesName = defaultArg seriesName x.seriesName }\n  member x.setProperties(?keyName, ?valueName, ?seriesName) = \n    { x with \n        keyName = defaultArg keyName x.keyName\n        valueName = defaultArg valueName x.valueName\n        seriesName = defaultArg seriesName x.seriesName }\n\n//type series =\n  static member create(data, keyName, valueName, seriesName) = \n    { data = data |> Async.StartAsFuture; keyName = keyName; valueName = valueName; seriesName = seriesName }\n\n  // TODO: This is where the naming starts to suck\n  static member values(values) = \n    let data = async {\n      return values |> Array.mapi (fun i v -> i, v) } |> Async.StartAsFuture\n    { data = data; keyName = \"key\"; valueName = \"value\"; seriesName = \"\" }\n\n  static member range(from, ``to``) = \n    series<int, int>.values [| from .. ``to`` |]\n\n  static member rangeBy(from, ``to``, step) = \n    series<int, int>.values [| from .. step .. ``to`` |]\n\n  static member ordinal(data, keyName, valueName, seriesName) = \n    let data = async {\n      let! values = data\n      return values |> Array.mapi (fun i v -> i, v) } |> Async.StartAsFuture\n    { data = data; keyName = keyName; valueName = valueName; seriesName = seriesName }\n\n  member s.sortKeys(?reverse) =\n    s |> helpers.lift (fun arr ->\n      arr |> Array.sortWith (fun (k1, _) (k2, _) -> compare k1 k2)\n          |> (if reverse = Some true then Array.rev else id))\n\n  member s.sortValues(?reverse) =\n    s |> helpers.lift (fun arr ->\n      arr |> Array.sortWith (fun (_,v1) (_,v2) -> compare v1 v2)\n          |> (if reverse = Some true then Array.rev else id))\n\n  member s.sortBy(f, ?reverse) =\n    s |> helpers.lift (fun arr ->\n      arr |> Array.sortWith (fun (_,v1) (_,v2) -> compare (f v1) (f v2))\n          |> (if reverse = Some true then Array.rev else id))\n\n  member s.reverse() =\n    s |> helpers.lift (Array.rev)\n\n  member s.take(count) =\n    s |> helpers.lift (fun arr -> slice 0 ((min arr.Length count)-1) arr)\n\n  member s.skip(count) =\n    s |> helpers.lift (fun arr -> slice (min arr.Length count) (arr.Length-1) arr)\n\n  member s.shuffle() =\n    s |> helpers.lift (fun arr -> \n      let rnd = System.Random()\n      arr |> Array.sortBy (fun _ -> rnd.Next()) )\n\n  member s.map(f) =\n    s |> helpers.lift (Array.map (fun (k, v) -> k, f v))\n(*\n  member s.mapTask(f:'v -> value<'r>) =\n    s.set(async {\n      let! arr = s.data\n      let res = Array.init arr.Length (fun _ -> None)\n      for i in 0 .. arr.Length-1 do\n        let! r = (f(snd arr.[i])).value\n        res.[i] <- Some r\n      return Array.init arr.Length (fun i -> fst arr.[i], res.[i].Value)\n    })\n*)\n  member s.mapKeys(f) =\n    s |> helpers.lift (Array.map (fun (k, v) -> f k, v))\n\n  member s.mapPairs(f) =\n    s |> helpers.lift (Array.map (fun (k, v) -> k, f k v))\n\n  member s.filter(f) =\n    s |> helpers.lift (Array.filter (snd >> f))\n\n  member s.filterIndex(f) =\n    s |> helpers.lift (Array.mapi (fun i v -> f i, v) >> Array.filter fst >> Array.map snd)\n\n  member s.choose(f) =\n    s |> helpers.lift (Array.choose (fun (k, v) -> match f v with None -> None | Some r -> Some(k, r)))\n\n  member s.joinOuter<'v2>(s2:series<'k, 'v2>) : series<'k, 'v option * 'v2 option>=\n    let data = async {\n      let! v1 = s.data |> Async.AwaitFuture\n      let! v2 = s2.data |> Async.AwaitFuture\n      return zipAny v1 v2 }\n    series<obj,obj>.create(data, s.keyName, \"Values\", s.seriesName + \" and \" + s2.seriesName)\n\n  member s.joinInner<'v2>(s2:series<'k, 'v2>) : series<'k, TheGamma.General.pair<'v,'v2>> =\n    s.joinOuter(s2).choose(function Some(v1), Some(v2) -> Some(TheGamma.General.pair(v1, v2)) | _ -> None)\n\n  member s.appendScalar(key:'k, value:'v) =\n    s |> helpers.lift (fun arr -> Array.append arr [| key, value |])\n(*\n  member s.appendValue(key:'k, value:value<'v>) =\n    s.set(async {\n      let! arr = s.data\n      let! v = value.value\n      return Array.append arr [| key, v |] })\n*)\n  member s.append(s2:series<'k, 'v>) =\n    s.set(async {\n      let! arr1 = s.data |> Async.AwaitFuture\n      let! arr2 = s2.data |> Async.AwaitFuture\n      return Array.append arr1 arr2 } |> Async.StartAsFuture)\n\n  member s.count() =\n    s |> helpers.liftAggregation (fun arr -> arr.Length)\n\n  member s.last() =\n    s |> helpers.liftAggregation (fun arr -> snd arr.[arr.Length - 1])\n\n  member s.first() =\n    s |> helpers.liftAggregation (fun arr -> snd arr.[0])\n\n  member s.sumBy(f:'v -> float) =\n    s |> helpers.liftAggregation (Array.sumBy (fun (k, v) -> f v))\n\n  member s.minBy(f) =\n    s |> helpers.liftAggregation (Array.minBy (fun (k, v) -> f v))\n\n  member s.maxBy(f) =\n    s |> helpers.liftAggregation (Array.maxBy (fun (k, v) -> f v))\n\n  member s.realign(newKeys:series<'k, 'v>, defaultValue) = \n    s |> helpers.asyncLift (fun arr -> async {\n      let! newKeys = newKeys.data |> Async.AwaitFuture\n      let newKeys = newKeys |> Array.map (fun (k, v) -> unbox<System.IComparable> v)\n      let lookup = Map.ofArray (unbox<(System.IComparable * 'v)[]> arr)\n      return newKeys |> Array.map (fun k ->\n        match lookup.TryFind k with\n        | Some res -> unbox<'k> k, res\n        | None -> unbox<'k> k, defaultValue) })\n\n  member s.preview() = s.take(10)\n      \ntype ``inline`` =\n  { value : ``val``<obj> }\n  static member create(value:``val``<'v>) =\n    { value = unbox value }\n  member i.show(outputId) = Async.StartImmediate <| async {\n    let! v = i.value.value\n    Fable.Import.Browser.document.getElementById(outputId).innerText <- string v }\n\n\n(*\nopen System.Runtime.CompilerServices\n\n[<Extension>]\ntype SeriesExtensions =\n  [<Extension>]\n  static member sum(s:series<'k, float>) =\n    s |> helpers.liftAggregation (Array.sumBy snd)\n\n  [<Extension>]\n  static member series(values:seq<'v>) =\n    let getKey i (v:'v) =\n      let name = getProperty<string> v \"name\"\n      let id = getProperty<string> v \"id\"\n      if not (isNull name) then name\n        elif not (isNull id) then id\n          else string i\n    let data = async { return values |> Array.ofSeq |> Array.mapi (fun i v -> getKey i v, v) }\n    series.create(data, \"Key\", \"Value\", \"Series\")\n\n  [<Extension>]\n  static member series(values:list<'v>) =\n     SeriesExtensions.series(values :> seq<_>)\n[<Extension>]\ntype ListExtensions =\n  [<Extension>]\n  static member map(list, f) = List.map f list\n\n[<Extension>]\ntype TupleExtensions =\n  [<Extension>]\n  static member map((a,b), f) = (f a, f b)\n  [<Extension>]\n  static member map((a,b,c), f) = (f a, f b, f c)\n  [<Extension>]\n  static member map((a,b,c,d), f) = (f a, f b, f c, f d)\n  [<Extension>]\n  static member map((a,b,c,d,e), f) = (f a, f b, f c, f d, f e)\n  [<Extension>]\n  static member map((a,b,c,d,e,g), f) = (f a, f b, f c, f d, f e, f g)\n  [<Extension>]\n  static member map((a,b,c,d,e,g,h), f) = (f a, f b, f c, f d, f e, f g, f h)\n  *)","﻿module TheGamma.TypeProvidersRuntime\nopen System\nopen TheGamma.Common\n\nlet convertTupleSequence f g data = async {\n  let! values = data\n  return values |> Array.map (fun (a, b) -> f a, g b) }\n\nlet convertSequence f data = async {\n  let! values = data\n  return values |> Array.map f }\n\nlet trimLeft c (s:string) = s.ToCharArray() |> Array.skipWhile ((=) c) |> System.String\nlet trimRight c (s:string) = s.ToCharArray() |> Array.rev |> Array.skipWhile ((=) c) |> Array.rev |> System.String\n\nlet concatUrl (a:string) (b:string) =\n  (trimRight '/' a) + \"/\" + (trimLeft '/' b)\n\ntype RuntimeContext(root:string, cookies:string, trace:string) = \n  member x.root = root\n  member x.trace = trace\n  \n  member x.addTrace(suffix) = \n    let traces = \n      [ if not (String.IsNullOrEmpty trace) then yield trace\n        if not (String.IsNullOrEmpty suffix) then yield suffix ]\n    RuntimeContext(root, cookies, String.concat \"&\" traces)\n  \n  member x.getValue(endpoint:string) =     \n    async { \n      let! res = Http.Request(\"POST\", concatUrl root endpoint, trace, cookies)\n      // TODO: This is wrong - it may return an integer too!\n      return jsonParse<obj> res }\n\ntype PivotContext(root, calls) = \n  member x.addCall(callid:string, values:obj[]) =\n    let values = values |> Array.map (fun v ->\n      if isDate v then box (toISOString v) else v)\n    PivotContext(root, Array.append [| callid, values |] calls)\n\n  member x.getData(conv:obj -> obj, tfs:string, isPreview) = async {\n    let url = calls |> Array.fold (fun (tfs:string) (id, vals) -> \n      let vals = String.concat \",\" (Seq.map string vals)\n      tfs.Replace(id, string vals)) tfs\n    let url = Fable.Import.JS.encodeURIComponent url\n    let url = root + \"?\" + url + if isPreview then \"&preview\" else \"\"\n    Log.trace(\"runtime\", \"Pivot: %s\", url)\n    let! res = Http.Request(\"GET\", url)\n    return jsonParse<obj[]> res |> Array.map conv }\n","﻿// --------------------------------------------------------------------------------------------------------------------\n// Google chart API\n// --------------------------------------------------------------------------------------------------------------------\nnamespace TheGamma.GoogleCharts\n\nopen TheGamma.Common\nopen TheGamma.Series\nopen Fable.Core\nopen Fable.Import\n\nmodule GoogleCharts = \n  type DataTable =\n    abstract addRows : obj[][] -> unit\n    abstract addColumn : string * string -> unit \n    \n  [<Emit(\"new google.visualization.DataTable()\")>]\n  let createTable() : DataTable = failwith \"Never\"\n\n\ntype ChartData =\n  { data : Async<GoogleCharts.DataTable> }\n\ntype Chart = interface end\n\nmodule LazyCharting = \n  let chartsToDraw = ResizeArray<_>()\n  let mutable googleLoaded = false\n\n  let drawChartOnLoad f = \n    if googleLoaded then f()\n    else chartsToDraw.Add(f)\n\n  [<Emit(\"\"\"\n    if (typeof google != \"undefined\")\n      google.load('visualization', '1', { 'packages': ['corechart'], 'callback': function() { $0(); } });\n  \"\"\")>]\n  let initGoogle (f:unit -> unit) : unit = failwith \"JS\"\n\n  do initGoogle (fun () ->\n    googleLoaded <- true\n    for f in chartsToDraw do f() )\n\n  [<Emit(\"\"\"\n    var ctor = eval(\"(function(a) { return new google.visualization.\" + $0.typeName + \" (a); })\");\n    var ch = ctor(document.getElementById($2));\n    if ($0.options.height == undefined) $0.options.height = 400;\n    ch.draw($1, $0.options);\"\"\")>]\n  let drawChart (chart:#Chart) (data:GoogleCharts.DataTable) (id:string) : unit = failwith \"JS\"\n\nmodule Helpers =\n\n  [<Emit(\"undefined\")>]\n  let undefined<'T>() : 'T = failwith \"!\"\n\n  [<Emit(\"$0==null\")>]\n  let isNull(o:obj) : bool = failwith \"never\"\n\n  [<Emit(\"$0[$1]\")>]\n  let getProperty<'T> (obj:obj) (name:string) : 'T = failwith \"never\"\n\n  let copy o prop =\n    if isNull o then undefined<_>() else getProperty o prop\n\n  let orDefault newValue =\n    match newValue with\n    | Some a -> a\n    | _ -> undefined<_>()\n\n  let right o prop newValue =\n    match newValue with\n    | Some a -> a\n    | _ when isNull o -> undefined<_>()\n    | _ -> getProperty o prop\n\n  let showChart (chart:#Chart) (outputId:string) =\n    LazyCharting.drawChartOnLoad(fun () ->\n      async {\n        try\n          let! dt = (getProperty<ChartData> chart \"data\").data\n          LazyCharting.drawChart chart dt outputId \n        with e ->\n          Log.error(\"google\", \"Error when getting data or rendering chart: %O\", e) }\n        |> Async.StartImmediate)\n\nmodule ChartDataOperations =\n  let rec collect f l = async {\n    match l with \n    | x::xs -> \n        let! y = f x\n        let! ys = collect f xs\n        return List.append y ys\n    | [] -> return [] }\n\n  let oneKeyValue keyType (v:series<'k, float>) = { data = async {\n    let data = GoogleCharts.createTable()\n    data.addColumn(keyType, v.keyName) |> ignore\n    data.addColumn(\"number\", v.seriesName) |> ignore\n    let! vals = v.mapPairs(fun k v -> [| box k; box v |]).data |> Async.AwaitFuture\n    vals |> Array.map snd |> data.addRows |> ignore\n    return data } }\n\n  let oneKeyTwoValues keyType (v:series<'k, float * float>) = { data = async {\n    let data = GoogleCharts.createTable()\n    data.addColumn(keyType, v.keyName) |> ignore\n    data.addColumn(\"number\", v.seriesName) |> ignore\n    data.addColumn(\"number\", v.seriesName) |> ignore\n    let! vals = v.mapPairs(fun k (v1, v2) -> [| box k; box v1; box v2 |]).data |> Async.AwaitFuture\n    vals |> Array.map snd |> data.addRows |> ignore\n    return data } }\n\n  let oneKeyAppendValues keyType (vs:series<'k, float>[]) colors = { data = async {\n    let data = GoogleCharts.createTable()\n    data.addColumn(keyType, vs.[0].keyName) |> ignore\n    data.addColumn(\"number\", vs.[0].valueName) |> ignore\n    JsInterop.(?) data \"addColumn\" (JsInterop.createObj [ \"type\", box \"string\"; \"role\", box \"style\" ]) |> ignore    \n    let! all = Array.zip vs colors |> List.ofArray |> collect (fun (v, clr) -> async {\n      let! res = v.mapPairs(fun k v -> k, v, clr).data |> Async.AwaitFuture\n      return res |> Array.map snd |> List.ofArray })\n\n    all \n    |> List.sortByDescending (fun (_, v, _) -> v) |> Array.ofList\n    |> Array.map (fun (k, v, c) -> [| box k; box v; box c |])\n    |> data.addRows \n\n    return data } }\n\n(*\n  let oneKeyNValues keyType (v:seq<series<'k, float>>) = { data = async {\n    let data = GoogleCharts.createTable()\n    let v = Array.ofSeq v\n    data.addColumn(keyType, v.[0].keyName) |> ignore\n    for i in 0 .. v.Length - 1 do\n      data.addColumn(\"number\", v.[i].seriesName) |> ignore\n\n    let head = v.[0].map(fun v -> Map.ofList [0,v])\n    let tail = SeriesInternals.slice 1 (v.Length-1) v |> Array.mapi (fun i v -> i+1, v)\n    let all = (head,tail) ||> Array.fold (fun s1 (i, s2) ->\n      s1.joinOuter(s2).map(fun (l, r) ->\n        match defaultArg l Map.empty, r with\n        | lm, Some r -> Map.add i r lm\n        | lm, None -> lm ))\n\n    let! vals = all.mapPairs(fun k vals ->\n      let data = Array.init v.Length (fun i -> box (defaultArg (Map.tryFind i vals) (Helpers.undefined<_>())))\n      Array.append [| box k |] data).data\n    vals |> Array.map snd |> data.addRows |> ignore\n    return data } }\n*)\n  let oneKeyNValues keyType (v:series<'a, series<'k, float>>) = { data = async {\n    let data = GoogleCharts.createTable()\n    let! v = v.data |> Async.AwaitFuture\n    let v = Array.map snd v\n    data.addColumn(keyType, v.[0].keyName) |> ignore\n    for i in 0 .. v.Length - 1 do\n      data.addColumn(\"number\", v.[i].seriesName) |> ignore\n\n    let head = v.[0].map(fun v -> Map.ofList [0,v])\n    let tail = SeriesInternals.slice 1 (v.Length-1) v |> Array.mapi (fun i v -> i+1, v)\n    let all = (head,tail) ||> Array.fold (fun s1 (i, s2) ->\n      s1.joinOuter(s2).map(fun (l, r) ->\n        match defaultArg l Map.empty, r with\n        | lm, Some r -> Map.add i r lm\n        | lm, None -> lm ))\n\n    let! vals = all.mapPairs(fun k vals ->\n      let data = Array.init v.Length (fun i -> box (defaultArg (Map.tryFind i vals) (Helpers.undefined<_>())))\n      Array.append [| box k |] data).data |> Async.AwaitFuture\n    vals |> Array.map snd |> data.addRows |> ignore\n    return data } }\n\n  let twoValues (v1:series<'k, float>) (v2:series<'k,float>) = { data = async {\n    let data = GoogleCharts.createTable()\n    data.addColumn(\"number\", v1.seriesName) |> ignore\n    data.addColumn(\"number\", v2.seriesName) |> ignore\n    let! vals = v1.joinInner(v2).map(fun v -> [| box v.first; box v.second |]).data |> Async.AwaitFuture\n    vals |> Array.map snd |> data.addRows |> ignore\n    return data } }\n","﻿// --------------------------------------------------------------------------------------------------------------------\n// Google chart API \n// --------------------------------------------------------------------------------------------------------------------\n[<AutoOpen>]\nmodule TheGamma.GoogleCharts.Options\n\nopen System\n\ntype ChartSizeAxis = {\n    maxSize : float\n    maxValue : float\n    minSize : float\n    minValue : float\n}\n\ntype ChartTextStyle = {\n    fontName : string\n    fontSize : float\n    bold : bool\n    italic : bool\n    color : string\n    auraColor : string\n    opacity : float\n}\n\ntype ChartTooltip = {\n    isHtml : bool\n    showColorCode : bool\n    textStyle : ChartTextStyle\n    trigger : string\n}\n\ntype ChartLegend = {\n    alignment : string\n    maxLines : float\n    position : string\n    textStyle : ChartTextStyle\n    numberFormat : string\n}\n\ntype ChartColorAxis = {\n    minValue : float\n    maxValue : float\n    values : float[]\n    colors : string[]\n    legend : ChartLegend\n}\n\ntype GeoChartMagnifyingGlass = {\n    enable : bool\n    zoomFactor : float\n}\n\ntype GeoChartOptions = {\n    backgroundColor : obj\n    colorAxis : ChartColorAxis\n    datalessRegionColor : string\n    displayMode : string\n    enableRegionInteractivity : bool\n    height : float\n    keepAspectRatio : bool\n    legend : ChartLegend\n    region : string\n    magnifyingGlass : GeoChartMagnifyingGlass\n    markerOpacity : float\n    resolution : string\n    sizeAxis : ChartSizeAxis\n    tooltip : ChartTooltip\n    width : float\n}\n\ntype ChartBoxStyleGradient = {\n    color1: string\n    color2: string\n    x1: string\n    y1: string\n    x2: string\n    y2: string\n    useObjectBoundingBoxUnits : bool\n}\ntype ChartBoxStyle = {\n    stroke : string\n    strokeWidth : float\n    rx : float\n    ry : float\n    gradient : ChartBoxStyleGradient\n}\n\ntype ChartAnnotations = {\n    boxStyle : ChartBoxStyle\n    textStyle : ChartTextStyle\n}\n\ntype ChartCrosshairFocused = {\n    color : string\n    opacity : float\n}\ntype ChartCrosshairSelected = {\n    color : string\n    opacity : float\n}\ntype ChartCrosshair = {\n    color : string\n    focused : ChartCrosshairFocused\n    opacity : float\n    orientation : string\n    selected : ChartCrosshairSelected \n    trigger : string\n}\n\ntype ChartExplorer = {\n    actions : string[]\n    axis : string\n    keepInBounds : bool\n    maxZoomIn : float\n    maxZoomOut : float\n    zoomDelta : float\n}\n\ntype ChartStroke = {\n    stroke: string\n    strokeWidth: float\n    fill: string\n}\n\ntype ChartArea = {\n    top : obj\n    left : obj\n    width : obj\n    height : obj\n}\n\n\ntype TransitionAnimation = {\n    duration : float\n    easing : string // linear, in, out, inAndOut\n}\n\ntype ChartGridlines = {\n    color : string\n    count : float\n}\n\ntype ChartViewWindow = {\n    max : float\n    min : float\n}\n\ntype ChartAxis = {\n    baseline : float // This option is only supported for a continuous axis. https://google-developers.appspot.com/chart/interactive/docs/customizing_axes#Terminology\n    baselineColor : string // google's documentation on this is wrong, specifies it as a number. The color of the baseline for the horizontal axis. Can be obj HTML color string, for example: 'red' or '#00cc00'\n    direction : float // The direction in which the values along the horizontal axis grow. Specify -1 to reverse the order of the values.\n    format : string // icu pattern set http://icu-project.org/apiref/icu4c/classDecimalFormat.html#_details\n    gridlines : ChartGridlines\n    minorGridlines : ChartGridlines\n    logScale : bool\n    textPosition : string\n    textStyle : ChartTextStyle\n    ticks : obj[]\n    title : string\n    titleTextStyle : ChartTextStyle\n    allowContainerBoundaryTextCufoff : bool\n    slantedText : bool\n    slantedTextAngle : float\n    maxAlternation : float\n    maxTextLines : float\n    minTextSpacing : float\n    showTextEvery : float\n    maxValue : float\n    minValue : float\n    viewWindowMode : string\n    viewWindow : ChartViewWindow\n}\n\ntype ChartBoundingBox = {\n    left: float\n    top: float\n    width: float\n    height: float\n}\n\ntype GroupWidth = {\n    groupWidth: obj // number | string\n}\n\ntype Trendline = {\n    color: string\n    lineWidth: float\n    labelInLegend : string\n    opacity: float\n    pointSize: float \n    pointsVisible: bool\n    showR2 : bool\n    ``type``: string\n    visibleInLegend: float\n}\n\ntype ScatterChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    annotations : ChartAnnotations\n    axisTitlesPosition : string // in, out, none\n    backgroundColor : obj\n    chartArea : ChartArea\n    colors : string[]\n    crosshair : ChartCrosshair\n    curveType : string\n    dataOpacity : float\n    enableInteractivity : bool\n    explorer : ChartExplorer\n    fontSize : float\n    fontName : string\n    forceIFrame : bool\n    hAxis : ChartAxis\n    height : float\n    legend : ChartLegend\n    lineWidth : float\n    pointSize : float\n    selectionMode : string\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    trendlines : Trendline[]\n    vAxis : ChartAxis\n    width : float\n}\n\ntype ColumnChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    annotations : ChartAnnotations\n    axisTitlesPosition : string // in, out, none\n    backgroundColor : obj\n    bar : GroupWidth\n    chartArea : ChartArea\n    colors : string[]\n    enableInteractivity : bool\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    height : float\n    isStacked : bool\n    legend : ChartLegend\n    reverseCategories : bool\n    selectionMode : string // single / multiple\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype LineChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    annotations : ChartAnnotations\n    axisTitlesPosition : string\n    backgroundColor : obj\n    chartArea : ChartArea\n    colors : string[]\n    crosshair : ChartCrosshair\n    curveType : string\n    dataOpacity : float\n    enableInteractivity : bool\n    explorer : ChartExplorer\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    height : float\n    interpolateNulls : bool\n    legend : ChartLegend\n    lineWidth : float\n    orientation : string\n    pointSize : float\n    reverseCategories : bool\n    selectionMode : string // single / multiple\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype BarChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    annotations : ChartAnnotations\n    axisTitlesPosition : string // in, out, none\n    backgroundColor : obj\n    bar : GroupWidth\n    chartArea : ChartArea\n    colors : string[]\n    dataOpacity : float\n    enableInteractivity : bool\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxes : obj\n    hAxis : ChartAxis\n    height : float\n    isStacked : bool\n    legend : ChartLegend\n    reverseCategories : bool\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype HistogramHistogram = {\n    bucketSize : float\n    hideBucketItems : bool\n    lastBucketPercentile : float\n}\n\ntype HistogramOptions = {\n    animation : TransitionAnimation\n    axisTitlesPosition : string // in, out, none\n    backgroundColor : obj\n    bar : GroupWidth\n    chartArea : ChartArea\n    colors : string[]\n    dataOpacity : float\n    enableInteractivity : bool\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    histogram : HistogramHistogram\n    height : float\n    interpolateNulls : bool\n    isStacked : bool\n    legend : ChartLegend\n    orientation : string\n    reverseCategories : bool\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype AreaChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    areaOpacity : float\n    axisTitlesPosition : string\n    backgroundColor : obj\n    chartArea : ChartArea\n    colors : string[]\n    crosshair : ChartCrosshair\n    dataOpacity : float\n    enableInteractivity : bool\n    explorer : ChartExplorer\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    height : float\n    interpolateNulls : bool\n    isStacked : bool\n    legend : ChartLegend\n    lineWidth : float\n    orientation : string\n    pointSize : float\n    reverseCategories : bool\n    selectionMode : string // single / multiple\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype AnnotationChartOptions = {\n    allowHtml : bool\n    allValuesSuffix : string\n    annotationsWidth : float\n    colors : string[]\n    dateFormat : string\n    displayAnnotations : bool\n    displayAnnotationsFilter : bool\n    displayDateTimeBarSeparator : bool\n    displayExactValues : bool\n    displayLegendDots : bool\n    displayLegendValues : bool\n    displayRangeSelector : bool\n    displayZoomButtons : bool\n    fill : float\n    legendPosition : string\n    max : float\n    min : float\n    numberFormats : obj\n    scaleColumns : float[]\n    scaleFormat : string\n    scaleType : string\n    thickness : float\n    zoomEndTime : DateTime\n    zoomStartTime : DateTime\n}\n\ntype SteppedAreaChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    areaOpacity : float\n    axisTitlesPosition : string\n    backgroundColor : obj\n    chartArea : ChartArea\n    colors : string[]\n    connectSteps : bool\n    enableInteractivity : bool\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    height : float\n    interpolateNulls : bool\n    isStacked : bool\n    legend : ChartLegend\n    reverseCategories : bool\n    selectionMode : string // single / multiple\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n\ntype PieChartOptions = {\n    backgroundColor : obj\n    chartArea : ChartArea\n    colors : string[]\n    enableInteractivity : bool\n    fontSize : float\n    fontName : string\n    height : float\n    is3D : bool\n    legend : ChartLegend\n    pieHole : float\n    pieSliceBorderColor : string\n    pieSliceText : string\n    pieSliceTextStyle : ChartTextStyle\n    pieStartAngle : float\n    reverseCategories : bool\n    pieResidueSliceColor : string\n    pieResidueSliceLabel : string\n    slices : obj\n    sliceVisibilityThreshold : float\n    title : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    width : float\n}\n\ntype ChartBubble = {\n    opacity : float\n    stroke : string\n    textStyle : ChartTextStyle\n}\n\ntype BubbleChartOptions = {\n    animation : TransitionAnimation\n    axisTitlesPosition : string // in, out, none\n    backgroundColor : obj\n    bubble : ChartBubble\n    chartArea : ChartArea\n    colors : string[]\n    colorAxis : ChartColorAxis\n    enableInteractivity : bool\n    explorer : ChartExplorer\n    fontSize : float\n    fontName : string\n    forceIFrame : bool\n    hAxis : ChartAxis\n    height : float\n    legend : ChartLegend\n    selectionMode : string\n    series : obj\n    sizeAxis : ChartSizeAxis\n    sortBubblesBySize : bool\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxis : ChartAxis\n    width : float\n}\n\ntype TreeMapOptions = {\n    fontColor : string\n    fontFamily : string\n    fontSize : float\n    forceIFrame : bool\n    headerColor : string\n    headerHeight : float\n    headerHighlightColor : string\n    hintOpacity : float\n    maxColor : string\n    maxDepth : float\n    maxHighlightColor : string\n    maxPostDepth : float\n    maxColorValue : float\n    midColor : string\n    midHighlightColor : string\n    minColor : string\n    minHighlightColor : string\n    minColorValue : float\n    showScale : bool\n    showTooltips : bool\n    textStyle : ChartTextStyle\n    title : string\n    titleTextStyle : ChartTextStyle\n    useWeightedAverageForAggregation : bool\n}\n\ntype CssClassNames = {\n    headerRow : string\n    tableRow : string\n    oddTableRow : string\n    selectedTableRow : string\n    hoverTableRow : string\n    headerCell : string\n    tableCell : string\n    rowNumberCell : string\n}\n\ntype TableOptions = {\n    allowHtml : bool\n    alternatingRowStyle : bool\n    cssClassName : CssClassNames\n    firstRowNumber : float\n    height : string\n    page : string\n    pageSize : float\n    rtlTable : bool\n    scrollLeftStartPosition : float\n    showRowNumber : bool\n    sort : string\n    sortAscending : bool\n    sortColumn : float\n    startPage : float\n    width : string\n}\n\ntype LabelStyle = {\n    color: string\n    fontName: string\n    fontSize: string\n}\n\ntype TimelineTimeline = {\n    barLabelStyle : LabelStyle\n    colorByRowLabel : bool\n    groupByRowLabel : bool\n    rowLabelStyle : LabelStyle\n    showRowLabels : bool\n    singleColor : string\n}\n\ntype TimelineOptions = {\n    avoidOverlappingGridLines : bool\n    backgroundColor : obj\n    colors : string[]\n    enableInteractivity : bool\n    forceIFrame : bool\n    height : float\n    timeline : TimelineTimeline\n    width : float\n}\n\ntype CandlestickCandlestick = {\n    hollowIsRising : bool\n    fallingColor : ChartStroke\n    risingColor : ChartStroke\n}\n\ntype CandlestickChartOptions = {\n    aggregationTarget : string\n    animation : TransitionAnimation\n    axisTitlesPosition : string\n    backgroundColor : obj\n    bar : GroupWidth\n    candlestick : CandlestickCandlestick\n    chartArea : ChartArea\n    colors : string[]\n    enableInteractivity : bool\n    focusTarget : string\n    fontSize : float\n    fontName : string\n    hAxis : ChartAxis\n    height : float\n    legend : ChartLegend\n    orientation : string\n    reverseCategories : bool\n    selectionMode : string // single / multiple\n    series : obj\n    theme : string\n    title : string\n    titlePosition : string\n    titleTextStyle : ChartTextStyle\n    tooltip : ChartTooltip\n    vAxes : obj\n    vAxis : ChartAxis\n    width : float\n}\n    ","// AUTO-GENERATED - DO NOT EDIT\n[<ReflectedDefinition;AutoOpen>]\nmodule TheGamma.GoogleCharts.Extensions\n\nopen System\nopen TheGamma.GoogleCharts\nopen TheGamma.GoogleCharts.Helpers\nopen TheGamma.GoogleCharts.Options\n\ntype Geo = \n  { data : ChartData; typeName : string; \n    options : GeoChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?backgroundColor:obj,?datalessRegionColor:string,?displayMode:string,?enableRegionInteractivity:bool,?height:float,?keepAspectRatio:bool,?region:string,?markerOpacity:float,?resolution:string,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with backgroundColor = right o \"backgroundColor\" backgroundColor; datalessRegionColor = right o \"datalessRegionColor\" datalessRegionColor; displayMode = right o \"displayMode\" displayMode; enableRegionInteractivity = right o \"enableRegionInteractivity\" enableRegionInteractivity; height = right o \"height\" height; keepAspectRatio = right o \"keepAspectRatio\" keepAspectRatio; region = right o \"region\" region; markerOpacity = right o \"markerOpacity\" markerOpacity; resolution = right o \"resolution\" resolution; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.colorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>) =\n    let o = x.options.colorAxis\n    let newNested = { ChartColorAxis.minValue = right o \"minValue\" minValue; maxValue = right o \"maxValue\" maxValue; values = right o \"values\" (Option.map Array.ofSeq values); colors = right o \"colors\" (Option.map Array.ofSeq colors); legend = copy o \"legend\" }\n    { x with options = { x.options with colorAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.magnifyingGlass(?enable:bool,?zoomFactor:float) =\n    let o = x.options.magnifyingGlass\n    let newNested = { GeoChartMagnifyingGlass.enable = right o \"enable\" enable; zoomFactor = right o \"zoomFactor\" zoomFactor;  }\n    { x with options = { x.options with magnifyingGlass = newNested } }\n  member x.sizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\n    let o = x.options.sizeAxis\n    let newNested = { ChartSizeAxis.maxSize = right o \"maxSize\" maxSize; maxValue = right o \"maxValue\" maxValue; minSize = right o \"minSize\" minSize; minValue = right o \"minValue\" minValue;  }\n    { x with options = { x.options with sizeAxis = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\ntype Scatter = \n  { data : ChartData; typeName : string; \n    options : ScatterChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?curveType:string,?dataOpacity:float,?enableInteractivity:bool,?fontSize:float,?fontName:string,?forceIFrame:bool,?height:float,?lineWidth:float,?pointSize:float,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); curveType = right o \"curveType\" curveType; dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; lineWidth = right o \"lineWidth\" lineWidth; pointSize = right o \"pointSize\" pointSize; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.trendlines(?trendlines:seq<Trendline>) =\n    let o = x.options\n    { x with options = { x.options with trendlines = right o \"trendlines\" (Option.map Array.ofSeq trendlines) } }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\n    let o = x.options.crosshair\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\n    { x with options = { x.options with crosshair = newNested } }\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\n    let o = x.options.explorer\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\n    { x with options = { x.options with explorer = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Column = \n  { data : ChartData; typeName : string; \n    options : ColumnChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?isStacked:bool,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.bar(?groupWidth:obj) =\n    let o = x.options.bar\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\n    { x with options = { x.options with bar = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Line = \n  { data : ChartData; typeName : string; \n    options : LineChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?curveType:string,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?lineWidth:float,?orientation:string,?pointSize:float,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); curveType = right o \"curveType\" curveType; dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; lineWidth = right o \"lineWidth\" lineWidth; orientation = right o \"orientation\" orientation; pointSize = right o \"pointSize\" pointSize; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\n    let o = x.options.crosshair\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\n    { x with options = { x.options with crosshair = newNested } }\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\n    let o = x.options.explorer\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\n    { x with options = { x.options with explorer = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Bar = \n  { data : ChartData; typeName : string; \n    options : BarChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?hAxes:obj,?height:float,?isStacked:bool,?reverseCategories:bool,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; hAxes = right o \"hAxes\" hAxes; height = right o \"height\" height; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.bar(?groupWidth:obj) =\n    let o = x.options.bar\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\n    { x with options = { x.options with bar = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Histogram = \n  { data : ChartData; typeName : string; \n    options : HistogramOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?orientation:string,?reverseCategories:bool,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; orientation = right o \"orientation\" orientation; reverseCategories = right o \"reverseCategories\" reverseCategories; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.bar(?groupWidth:obj) =\n    let o = x.options.bar\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\n    { x with options = { x.options with bar = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.histogram(?bucketSize:float,?hideBucketItems:bool,?lastBucketPercentile:float) =\n    let o = x.options.histogram\n    let newNested = { HistogramHistogram.bucketSize = right o \"bucketSize\" bucketSize; hideBucketItems = right o \"hideBucketItems\" hideBucketItems; lastBucketPercentile = right o \"lastBucketPercentile\" lastBucketPercentile;  }\n    { x with options = { x.options with histogram = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Area = \n  { data : ChartData; typeName : string; \n    options : AreaChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?areaOpacity:float,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?lineWidth:float,?orientation:string,?pointSize:float,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; areaOpacity = right o \"areaOpacity\" areaOpacity; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; lineWidth = right o \"lineWidth\" lineWidth; orientation = right o \"orientation\" orientation; pointSize = right o \"pointSize\" pointSize; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\n    let o = x.options.crosshair\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\n    { x with options = { x.options with crosshair = newNested } }\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\n    let o = x.options.explorer\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\n    { x with options = { x.options with explorer = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Annotation = \n  { data : ChartData; typeName : string; \n    options : AnnotationChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?allowHtml:bool,?allValuesSuffix:string,?annotationsWidth:float,?colors:seq<string>,?dateFormat:string,?displayAnnotations:bool,?displayAnnotationsFilter:bool,?displayDateTimeBarSeparator:bool,?displayExactValues:bool,?displayLegendDots:bool,?displayLegendValues:bool,?displayRangeSelector:bool,?displayZoomButtons:bool,?fill:float,?legendPosition:string,?max:float,?min:float,?numberFormats:obj,?scaleColumns:seq<float>,?scaleFormat:string,?scaleType:string,?thickness:float,?zoomEndTime:DateTime,?zoomStartTime:DateTime) = \n    let o = x.options\n    let newOptions = { x.options with allowHtml = right o \"allowHtml\" allowHtml; allValuesSuffix = right o \"allValuesSuffix\" allValuesSuffix; annotationsWidth = right o \"annotationsWidth\" annotationsWidth; colors = right o \"colors\" (Option.map Array.ofSeq colors); dateFormat = right o \"dateFormat\" dateFormat; displayAnnotations = right o \"displayAnnotations\" displayAnnotations; displayAnnotationsFilter = right o \"displayAnnotationsFilter\" displayAnnotationsFilter; displayDateTimeBarSeparator = right o \"displayDateTimeBarSeparator\" displayDateTimeBarSeparator; displayExactValues = right o \"displayExactValues\" displayExactValues; displayLegendDots = right o \"displayLegendDots\" displayLegendDots; displayLegendValues = right o \"displayLegendValues\" displayLegendValues; displayRangeSelector = right o \"displayRangeSelector\" displayRangeSelector; displayZoomButtons = right o \"displayZoomButtons\" displayZoomButtons; fill = right o \"fill\" fill; legendPosition = right o \"legendPosition\" legendPosition; max = right o \"max\" max; min = right o \"min\" min; numberFormats = right o \"numberFormats\" numberFormats; scaleColumns = right o \"scaleColumns\" (Option.map Array.ofSeq scaleColumns); scaleFormat = right o \"scaleFormat\" scaleFormat; scaleType = right o \"scaleType\" scaleType; thickness = right o \"thickness\" thickness; zoomEndTime = right o \"zoomEndTime\" zoomEndTime; zoomStartTime = right o \"zoomStartTime\" zoomStartTime }\n    { x with options = newOptions }\ntype SteppedArea = \n  { data : ChartData; typeName : string; \n    options : SteppedAreaChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?areaOpacity:float,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?connectSteps:bool,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; areaOpacity = right o \"areaOpacity\" areaOpacity; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); connectSteps = right o \"connectSteps\" connectSteps; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype Pie = \n  { data : ChartData; typeName : string; \n    options : PieChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?fontSize:float,?fontName:string,?height:float,?is3D:bool,?pieHole:float,?pieSliceBorderColor:string,?pieSliceText:string,?pieStartAngle:float,?reverseCategories:bool,?pieResidueSliceColor:string,?pieResidueSliceLabel:string,?slices:obj,?sliceVisibilityThreshold:float,?title:string,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; is3D = right o \"is3D\" is3D; pieHole = right o \"pieHole\" pieHole; pieSliceBorderColor = right o \"pieSliceBorderColor\" pieSliceBorderColor; pieSliceText = right o \"pieSliceText\" pieSliceText; pieStartAngle = right o \"pieStartAngle\" pieStartAngle; reverseCategories = right o \"reverseCategories\" reverseCategories; pieResidueSliceColor = right o \"pieResidueSliceColor\" pieResidueSliceColor; pieResidueSliceLabel = right o \"pieResidueSliceLabel\" pieResidueSliceLabel; slices = right o \"slices\" slices; sliceVisibilityThreshold = right o \"sliceVisibilityThreshold\" sliceVisibilityThreshold; title = right o \"title\" title; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.pieSliceTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.pieSliceTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with pieSliceTextStyle = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\ntype Bubble = \n  { data : ChartData; typeName : string; \n    options : BubbleChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?fontSize:float,?fontName:string,?forceIFrame:bool,?height:float,?selectionMode:string,?series:obj,?sortBubblesBySize:bool,?theme:string,?title:string,?titlePosition:string,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; sortBubblesBySize = right o \"sortBubblesBySize\" sortBubblesBySize; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.bubble(?opacity:float,?stroke:string) =\n    let o = x.options.bubble\n    let newNested = { ChartBubble.opacity = right o \"opacity\" opacity; stroke = right o \"stroke\" stroke; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with bubble = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.colorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>) =\n    let o = x.options.colorAxis\n    let newNested = { ChartColorAxis.minValue = right o \"minValue\" minValue; maxValue = right o \"maxValue\" maxValue; values = right o \"values\" (Option.map Array.ofSeq values); colors = right o \"colors\" (Option.map Array.ofSeq colors); legend = copy o \"legend\" }\n    { x with options = { x.options with colorAxis = newNested } }\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\n    let o = x.options.explorer\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\n    { x with options = { x.options with explorer = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.sizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\n    let o = x.options.sizeAxis\n    let newNested = { ChartSizeAxis.maxSize = right o \"maxSize\" maxSize; maxValue = right o \"maxValue\" maxValue; minSize = right o \"minSize\" minSize; minValue = right o \"minValue\" minValue;  }\n    { x with options = { x.options with sizeAxis = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\ntype TreeMap = \n  { data : ChartData; typeName : string; \n    options : TreeMapOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?fontColor:string,?fontFamily:string,?fontSize:float,?forceIFrame:bool,?headerColor:string,?headerHeight:float,?headerHighlightColor:string,?hintOpacity:float,?maxColor:string,?maxDepth:float,?maxHighlightColor:string,?maxPostDepth:float,?maxColorValue:float,?midColor:string,?midHighlightColor:string,?minColor:string,?minHighlightColor:string,?minColorValue:float,?showScale:bool,?showTooltips:bool,?title:string,?useWeightedAverageForAggregation:bool) = \n    let o = x.options\n    let newOptions = { x.options with fontColor = right o \"fontColor\" fontColor; fontFamily = right o \"fontFamily\" fontFamily; fontSize = right o \"fontSize\" fontSize; forceIFrame = right o \"forceIFrame\" forceIFrame; headerColor = right o \"headerColor\" headerColor; headerHeight = right o \"headerHeight\" headerHeight; headerHighlightColor = right o \"headerHighlightColor\" headerHighlightColor; hintOpacity = right o \"hintOpacity\" hintOpacity; maxColor = right o \"maxColor\" maxColor; maxDepth = right o \"maxDepth\" maxDepth; maxHighlightColor = right o \"maxHighlightColor\" maxHighlightColor; maxPostDepth = right o \"maxPostDepth\" maxPostDepth; maxColorValue = right o \"maxColorValue\" maxColorValue; midColor = right o \"midColor\" midColor; midHighlightColor = right o \"midHighlightColor\" midHighlightColor; minColor = right o \"minColor\" minColor; minHighlightColor = right o \"minHighlightColor\" minHighlightColor; minColorValue = right o \"minColorValue\" minColorValue; showScale = right o \"showScale\" showScale; showTooltips = right o \"showTooltips\" showTooltips; title = right o \"title\" title; useWeightedAverageForAggregation = right o \"useWeightedAverageForAggregation\" useWeightedAverageForAggregation }\n    { x with options = newOptions }\n  member x.textStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.textStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with textStyle = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\ntype Table = \n  { data : ChartData; typeName : string; \n    options : TableOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?allowHtml:bool,?alternatingRowStyle:bool,?firstRowNumber:float,?height:string,?page:string,?pageSize:float,?rtlTable:bool,?scrollLeftStartPosition:float,?showRowNumber:bool,?sort:string,?sortAscending:bool,?sortColumn:float,?startPage:float,?width:string) = \n    let o = x.options\n    let newOptions = { x.options with allowHtml = right o \"allowHtml\" allowHtml; alternatingRowStyle = right o \"alternatingRowStyle\" alternatingRowStyle; firstRowNumber = right o \"firstRowNumber\" firstRowNumber; height = right o \"height\" height; page = right o \"page\" page; pageSize = right o \"pageSize\" pageSize; rtlTable = right o \"rtlTable\" rtlTable; scrollLeftStartPosition = right o \"scrollLeftStartPosition\" scrollLeftStartPosition; showRowNumber = right o \"showRowNumber\" showRowNumber; sort = right o \"sort\" sort; sortAscending = right o \"sortAscending\" sortAscending; sortColumn = right o \"sortColumn\" sortColumn; startPage = right o \"startPage\" startPage; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.cssClassName(?headerRow:string,?tableRow:string,?oddTableRow:string,?selectedTableRow:string,?hoverTableRow:string,?headerCell:string,?tableCell:string,?rowNumberCell:string) =\n    let o = x.options.cssClassName\n    let newNested = { CssClassNames.headerRow = right o \"headerRow\" headerRow; tableRow = right o \"tableRow\" tableRow; oddTableRow = right o \"oddTableRow\" oddTableRow; selectedTableRow = right o \"selectedTableRow\" selectedTableRow; hoverTableRow = right o \"hoverTableRow\" hoverTableRow; headerCell = right o \"headerCell\" headerCell; tableCell = right o \"tableCell\" tableCell; rowNumberCell = right o \"rowNumberCell\" rowNumberCell;  }\n    { x with options = { x.options with cssClassName = newNested } }\ntype Timeline = \n  { data : ChartData; typeName : string; \n    options : TimelineOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?avoidOverlappingGridLines:bool,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?forceIFrame:bool,?height:float,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with avoidOverlappingGridLines = right o \"avoidOverlappingGridLines\" avoidOverlappingGridLines; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.timeline(?colorByRowLabel:bool,?groupByRowLabel:bool,?showRowLabels:bool,?singleColor:string) =\n    let o = x.options.timeline\n    let newNested = { TimelineTimeline.colorByRowLabel = right o \"colorByRowLabel\" colorByRowLabel; groupByRowLabel = right o \"groupByRowLabel\" groupByRowLabel; showRowLabels = right o \"showRowLabels\" showRowLabels; singleColor = right o \"singleColor\" singleColor; barLabelStyle = copy o \"barLabelStyle\"; rowLabelStyle = copy o \"rowLabelStyle\" }\n    { x with options = { x.options with timeline = newNested } }\ntype Candlestick = \n  { data : ChartData; typeName : string; \n    options : CandlestickChartOptions }\n  interface Chart\n  member x.show(outputId) = Helpers.showChart x outputId\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?orientation:string,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \n    let o = x.options\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; orientation = right o \"orientation\" orientation; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\n    { x with options = newOptions }\n  member x.animation(?duration:float,?easing:string) =\n    let o = x.options.animation\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\n    { x with options = { x.options with animation = newNested } }\n  member x.bar(?groupWidth:obj) =\n    let o = x.options.bar\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\n    { x with options = { x.options with bar = newNested } }\n  member x.candlestick(?hollowIsRising:bool) =\n    let o = x.options.candlestick\n    let newNested = { CandlestickCandlestick.hollowIsRising = right o \"hollowIsRising\" hollowIsRising; fallingColor = copy o \"fallingColor\"; risingColor = copy o \"risingColor\" }\n    { x with options = { x.options with candlestick = newNested } }\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    let o = x.options.chartArea\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\n    { x with options = { x.options with chartArea = newNested } }\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.hAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with hAxis = newNested } }\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\n    let o = x.options.legend\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with legend = newNested } }\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    let o = x.options.titleTextStyle\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\n    { x with options = { x.options with titleTextStyle = newNested } }\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\n    let o = x.options.tooltip\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\n    { x with options = { x.options with tooltip = newNested } }\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\n    let o = x.options.vAxis\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\n    { x with options = { x.options with vAxis = newNested } }\n\ntype GeoChartOptions with\n  static member empty =\n    { GeoChartOptions.backgroundColor = undefined<_>(); colorAxis = undefined<_>(); datalessRegionColor = undefined<_>(); displayMode = undefined<_>(); enableRegionInteractivity = undefined<_>(); height = undefined<_>(); keepAspectRatio = undefined<_>(); legend = undefined<_>(); region = undefined<_>(); magnifyingGlass = undefined<_>(); markerOpacity = undefined<_>(); resolution = undefined<_>(); sizeAxis = undefined<_>(); tooltip = undefined<_>(); width = undefined<_>() }\ntype ScatterChartOptions with\n  static member empty =\n    { ScatterChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); curveType = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); forceIFrame = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); pointSize = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); trendlines = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype ColumnChartOptions with\n  static member empty =\n    { ColumnChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype LineChartOptions with\n  static member empty =\n    { LineChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); curveType = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); orientation = undefined<_>(); pointSize = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype BarChartOptions with\n  static member empty =\n    { BarChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxes = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype HistogramOptions with\n  static member empty =\n    { HistogramOptions.animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); histogram = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); orientation = undefined<_>(); reverseCategories = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype AreaChartOptions with\n  static member empty =\n    { AreaChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); areaOpacity = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); orientation = undefined<_>(); pointSize = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype AnnotationChartOptions with\n  static member empty =\n    { AnnotationChartOptions.allowHtml = undefined<_>(); allValuesSuffix = undefined<_>(); annotationsWidth = undefined<_>(); colors = undefined<_>(); dateFormat = undefined<_>(); displayAnnotations = undefined<_>(); displayAnnotationsFilter = undefined<_>(); displayDateTimeBarSeparator = undefined<_>(); displayExactValues = undefined<_>(); displayLegendDots = undefined<_>(); displayLegendValues = undefined<_>(); displayRangeSelector = undefined<_>(); displayZoomButtons = undefined<_>(); fill = undefined<_>(); legendPosition = undefined<_>(); max = undefined<_>(); min = undefined<_>(); numberFormats = undefined<_>(); scaleColumns = undefined<_>(); scaleFormat = undefined<_>(); scaleType = undefined<_>(); thickness = undefined<_>(); zoomEndTime = undefined<_>(); zoomStartTime = undefined<_>() }\ntype SteppedAreaChartOptions with\n  static member empty =\n    { SteppedAreaChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); areaOpacity = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); connectSteps = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype PieChartOptions with\n  static member empty =\n    { PieChartOptions.backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); height = undefined<_>(); is3D = undefined<_>(); legend = undefined<_>(); pieHole = undefined<_>(); pieSliceBorderColor = undefined<_>(); pieSliceText = undefined<_>(); pieSliceTextStyle = undefined<_>(); pieStartAngle = undefined<_>(); reverseCategories = undefined<_>(); pieResidueSliceColor = undefined<_>(); pieResidueSliceLabel = undefined<_>(); slices = undefined<_>(); sliceVisibilityThreshold = undefined<_>(); title = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); width = undefined<_>() }\ntype BubbleChartOptions with\n  static member empty =\n    { BubbleChartOptions.animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bubble = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); colorAxis = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); forceIFrame = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); sizeAxis = undefined<_>(); sortBubblesBySize = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\ntype TreeMapOptions with\n  static member empty =\n    { TreeMapOptions.fontColor = undefined<_>(); fontFamily = undefined<_>(); fontSize = undefined<_>(); forceIFrame = undefined<_>(); headerColor = undefined<_>(); headerHeight = undefined<_>(); headerHighlightColor = undefined<_>(); hintOpacity = undefined<_>(); maxColor = undefined<_>(); maxDepth = undefined<_>(); maxHighlightColor = undefined<_>(); maxPostDepth = undefined<_>(); maxColorValue = undefined<_>(); midColor = undefined<_>(); midHighlightColor = undefined<_>(); minColor = undefined<_>(); minHighlightColor = undefined<_>(); minColorValue = undefined<_>(); showScale = undefined<_>(); showTooltips = undefined<_>(); textStyle = undefined<_>(); title = undefined<_>(); titleTextStyle = undefined<_>(); useWeightedAverageForAggregation = undefined<_>() }\ntype TableOptions with\n  static member empty =\n    { TableOptions.allowHtml = undefined<_>(); alternatingRowStyle = undefined<_>(); cssClassName = undefined<_>(); firstRowNumber = undefined<_>(); height = undefined<_>(); page = undefined<_>(); pageSize = undefined<_>(); rtlTable = undefined<_>(); scrollLeftStartPosition = undefined<_>(); showRowNumber = undefined<_>(); sort = undefined<_>(); sortAscending = undefined<_>(); sortColumn = undefined<_>(); startPage = undefined<_>(); width = undefined<_>() }\ntype TimelineOptions with\n  static member empty =\n    { TimelineOptions.avoidOverlappingGridLines = undefined<_>(); backgroundColor = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); forceIFrame = undefined<_>(); height = undefined<_>(); timeline = undefined<_>(); width = undefined<_>() }\ntype CandlestickChartOptions with\n  static member empty =\n    { CandlestickChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); candlestick = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); orientation = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\n\ntype options =\n  static member chartSizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\n    { ChartSizeAxis.maxSize = orDefault maxSize; maxValue = orDefault maxValue; minSize = orDefault minSize; minValue = orDefault minValue }\n  static member chartTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\n    { ChartTextStyle.fontName = orDefault fontName; fontSize = orDefault fontSize; bold = orDefault bold; italic = orDefault italic; color = orDefault color; auraColor = orDefault auraColor; opacity = orDefault opacity }\n  static member chartTooltip(?isHtml:bool,?showColorCode:bool,?textStyle:ChartTextStyle,?trigger:string) =\n    { ChartTooltip.isHtml = orDefault isHtml; showColorCode = orDefault showColorCode; textStyle = orDefault textStyle; trigger = orDefault trigger }\n  static member chartLegend(?alignment:string,?maxLines:float,?position:string,?textStyle:ChartTextStyle,?numberFormat:string) =\n    { ChartLegend.alignment = orDefault alignment; maxLines = orDefault maxLines; position = orDefault position; textStyle = orDefault textStyle; numberFormat = orDefault numberFormat }\n  static member chartColorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>,?legend:ChartLegend) =\n    { ChartColorAxis.minValue = orDefault minValue; maxValue = orDefault maxValue; values = orDefault (Option.map Array.ofSeq values); colors = orDefault (Option.map Array.ofSeq colors); legend = orDefault legend }\n  static member geoChartMagnifyingGlass(?enable:bool,?zoomFactor:float) =\n    { GeoChartMagnifyingGlass.enable = orDefault enable; zoomFactor = orDefault zoomFactor }\n  static member chartBoxStyleGradient(?color1:string,?color2:string,?x1:string,?y1:string,?x2:string,?y2:string,?useObjectBoundingBoxUnits:bool) =\n    { ChartBoxStyleGradient.color1 = orDefault color1; color2 = orDefault color2; x1 = orDefault x1; y1 = orDefault y1; x2 = orDefault x2; y2 = orDefault y2; useObjectBoundingBoxUnits = orDefault useObjectBoundingBoxUnits }\n  static member chartBoxStyle(?stroke:string,?strokeWidth:float,?rx:float,?ry:float,?gradient:ChartBoxStyleGradient) =\n    { ChartBoxStyle.stroke = orDefault stroke; strokeWidth = orDefault strokeWidth; rx = orDefault rx; ry = orDefault ry; gradient = orDefault gradient }\n  static member chartAnnotations(?boxStyle:ChartBoxStyle,?textStyle:ChartTextStyle) =\n    { ChartAnnotations.boxStyle = orDefault boxStyle; textStyle = orDefault textStyle }\n  static member chartCrosshairFocused(?color:string,?opacity:float) =\n    { ChartCrosshairFocused.color = orDefault color; opacity = orDefault opacity }\n  static member chartCrosshairSelected(?color:string,?opacity:float) =\n    { ChartCrosshairSelected.color = orDefault color; opacity = orDefault opacity }\n  static member chartCrosshair(?color:string,?focused:ChartCrosshairFocused,?opacity:float,?orientation:string,?selected:ChartCrosshairSelected,?trigger:string) =\n    { ChartCrosshair.color = orDefault color; focused = orDefault focused; opacity = orDefault opacity; orientation = orDefault orientation; selected = orDefault selected; trigger = orDefault trigger }\n  static member chartExplorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\n    { ChartExplorer.actions = orDefault (Option.map Array.ofSeq actions); axis = orDefault axis; keepInBounds = orDefault keepInBounds; maxZoomIn = orDefault maxZoomIn; maxZoomOut = orDefault maxZoomOut; zoomDelta = orDefault zoomDelta }\n  static member chartStroke(?stroke:string,?strokeWidth:float,?fill:string) =\n    { ChartStroke.stroke = orDefault stroke; strokeWidth = orDefault strokeWidth; fill = orDefault fill }\n  static member chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\n    { ChartArea.top = orDefault top; left = orDefault left; width = orDefault width; height = orDefault height }\n  static member transitionAnimation(?duration:float,?easing:string) =\n    { TransitionAnimation.duration = orDefault duration; easing = orDefault easing }\n  static member chartGridlines(?color:string,?count:float) =\n    { ChartGridlines.color = orDefault color; count = orDefault count }\n  static member chartViewWindow(?max:float,?min:float) =\n    { ChartViewWindow.max = orDefault max; min = orDefault min }\n  static member chartAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?gridlines:ChartGridlines,?minorGridlines:ChartGridlines,?logScale:bool,?textPosition:string,?textStyle:ChartTextStyle,?ticks:seq<obj>,?title:string,?titleTextStyle:ChartTextStyle,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string,?viewWindow:ChartViewWindow) =\n    { ChartAxis.baseline = orDefault baseline; baselineColor = orDefault baselineColor; direction = orDefault direction; format = orDefault format; gridlines = orDefault gridlines; minorGridlines = orDefault minorGridlines; logScale = orDefault logScale; textPosition = orDefault textPosition; textStyle = orDefault textStyle; ticks = orDefault (Option.map Array.ofSeq ticks); title = orDefault title; titleTextStyle = orDefault titleTextStyle; allowContainerBoundaryTextCufoff = orDefault allowContainerBoundaryTextCufoff; slantedText = orDefault slantedText; slantedTextAngle = orDefault slantedTextAngle; maxAlternation = orDefault maxAlternation; maxTextLines = orDefault maxTextLines; minTextSpacing = orDefault minTextSpacing; showTextEvery = orDefault showTextEvery; maxValue = orDefault maxValue; minValue = orDefault minValue; viewWindowMode = orDefault viewWindowMode; viewWindow = orDefault viewWindow }\n  static member chartBoundingBox(?left:float,?top:float,?width:float,?height:float) =\n    { ChartBoundingBox.left = orDefault left; top = orDefault top; width = orDefault width; height = orDefault height }\n  static member groupWidth(?groupWidth:obj) =\n    { GroupWidth.groupWidth = orDefault groupWidth }\n  static member trendline(?color:string,?lineWidth:float,?labelInLegend:string,?opacity:float,?pointSize:float,?pointsVisible:bool,?showR2:bool,?``type``:string,?visibleInLegend:float) =\n    { Trendline.color = orDefault color; lineWidth = orDefault lineWidth; labelInLegend = orDefault labelInLegend; opacity = orDefault opacity; pointSize = orDefault pointSize; pointsVisible = orDefault pointsVisible; showR2 = orDefault showR2; ``type`` = orDefault ``type``; visibleInLegend = orDefault visibleInLegend }\n  static member histogramHistogram(?bucketSize:float,?hideBucketItems:bool,?lastBucketPercentile:float) =\n    { HistogramHistogram.bucketSize = orDefault bucketSize; hideBucketItems = orDefault hideBucketItems; lastBucketPercentile = orDefault lastBucketPercentile }\n  static member chartBubble(?opacity:float,?stroke:string,?textStyle:ChartTextStyle) =\n    { ChartBubble.opacity = orDefault opacity; stroke = orDefault stroke; textStyle = orDefault textStyle }\n  static member cssClassNames(?headerRow:string,?tableRow:string,?oddTableRow:string,?selectedTableRow:string,?hoverTableRow:string,?headerCell:string,?tableCell:string,?rowNumberCell:string) =\n    { CssClassNames.headerRow = orDefault headerRow; tableRow = orDefault tableRow; oddTableRow = orDefault oddTableRow; selectedTableRow = orDefault selectedTableRow; hoverTableRow = orDefault hoverTableRow; headerCell = orDefault headerCell; tableCell = orDefault tableCell; rowNumberCell = orDefault rowNumberCell }\n  static member labelStyle(?color:string,?fontName:string,?fontSize:string) =\n    { LabelStyle.color = orDefault color; fontName = orDefault fontName; fontSize = orDefault fontSize }\n  static member timelineTimeline(?barLabelStyle:LabelStyle,?colorByRowLabel:bool,?groupByRowLabel:bool,?rowLabelStyle:LabelStyle,?showRowLabels:bool,?singleColor:string) =\n    { TimelineTimeline.barLabelStyle = orDefault barLabelStyle; colorByRowLabel = orDefault colorByRowLabel; groupByRowLabel = orDefault groupByRowLabel; rowLabelStyle = orDefault rowLabelStyle; showRowLabels = orDefault showRowLabels; singleColor = orDefault singleColor }\n  static member candlestickCandlestick(?hollowIsRising:bool,?fallingColor:ChartStroke,?risingColor:ChartStroke) =\n    { CandlestickCandlestick.hollowIsRising = orDefault hollowIsRising; fallingColor = orDefault fallingColor; risingColor = orDefault risingColor }\n","namespace TheGamma.GoogleCharts\n\nopen System\nopen TheGamma\nopen TheGamma.Series\nopen TheGamma.GoogleCharts\n\ntype chart =\n  static member scatter(xval:series<_, _>, yval:series<_, _>) = \n    { Scatter.data = ChartDataOperations.twoValues xval yval; \n      typeName = \"ScatterChart\"; options = ScatterChartOptions.empty }\n\n  static member geo(data:series<string, float>) = \n    { Geo.data = ChartDataOperations.oneKeyValue \"string\" data; \n      typeName = \"GeoChart\"; options = GeoChartOptions.empty }\n  (*\n  static member geo(data:series<string, float * float>) = \n    { Geo.data = ChartDataOperations.oneKeyTwoValues \"string\" data; \n      typeName = \"GeoChart\"; options = GeoChartOptions.empty }\n  *)\n  static member pie(data:series<string, float>) = \n    { Pie.data = ChartDataOperations.oneKeyValue \"string\" data; \n      typeName = \"PieChart\"; options = PieChartOptions.empty }\n\n  static member bar(data:series<string, float>) = \n    { Bar.data = ChartDataOperations.oneKeyValue \"string\" data; \n      typeName = \"BarChart\"; options = BarChartOptions.empty }\n  (*\n  static member bar(data:seq<series<string, float>>) = \n    { Bar.data = ChartDataOperations.oneKeyNValues \"string\" data; \n      typeName = \"BarChart\"; options = BarChartOptions.empty }\n  static member column(data:seq<series<string, float>>) = \n    { Column.data = ChartDataOperations.oneKeyNValues \"string\" data; \n      typeName = \"ColumnChart\"; options = ColumnChartOptions.empty }\n  *)\n  static member column(data:series<string, float>) = \n    { Column.data = ChartDataOperations.oneKeyValue \"string\" data; \n      typeName = \"ColumnChart\"; options = ColumnChartOptions.empty }\n\n  static member columns(data:series<string, float>[], colors:string[]) = \n    { Line.data = ChartDataOperations.oneKeyAppendValues \"string\" data colors; \n      typeName = \"ColumnChart\"; options = LineChartOptions.empty }\n\n  static member line(data:series<int, float>) = \n    { Line.data = ChartDataOperations.oneKeyValue \"number\" data; \n      typeName = \"LineChart\"; options = LineChartOptions.empty }\n\n  static member lines(data:series<'a, series<'b, float>>) = \n    { Line.data = ChartDataOperations.oneKeyNValues \"number\" data; \n      typeName = \"LineChart\"; options = LineChartOptions.empty }\n(*\n  static member line(data:series<string, float>) = \n    { Line.data = ChartDataOperations.oneKeyValue \"string\" data; \n      typeName = \"LineChart\"; options = LineChartOptions.empty }\n  static member line(data:seq<series<string, float>>) = \n    { Line.data = ChartDataOperations.oneKeyNValues \"string\" data; \n      typeName = \"LineChart\"; options = LineChartOptions.empty }\n  static member line(data:seq<series<int, float>>) = \n    { Line.data = ChartDataOperations.oneKeyNValues \"number\" data; \n      typeName = \"LineChart\"; options = LineChartOptions.empty }\n*)\n(*\n  static member histogram(data) = \n    { Histogram.data = data; options = HistogramOptions.empty }\n*)\n  static member area(data:series<int, float>) = \n    { Area.data = ChartDataOperations.oneKeyValue \"number\" data; \n      typeName = \"AreaChart\"; options = AreaChartOptions.empty }\n\n  static member areas(data:series<'a, series<int, float>>, ?names:string[]) = \n    let i = ref 0;\n    let data = \n      match names with \n      | Some names -> data.map(fun s -> incr i; s.setProperties(seriesName=names.[i.Value-1]))\n      | None -> data\n    { Area.data = ChartDataOperations.oneKeyNValues \"number\" data; \n      typeName = \"AreaChart\"; options = AreaChartOptions.empty }\n(*\n  static member annotation(data) = \n    { Annotation.data = data; options = AnnotationChartOptions.empty }\n  static member steppedArea(data) = \n    { SteppedArea.data = data; options = SteppedAreaChartOptions.empty }\n  static member bubble(data) = \n    { Bubble.data = data; options = BubbleChartOptions.empty }\n  static member treeMap(data) = \n    { TreeMap.data = data; options = TreeMapOptions.empty }\n  static member table(data) = \n    { Table.data = data; options = TableOptions.empty }\n  static member timeline(data) = \n    { Timeline.data = data; options = TimelineOptions.empty }\n  static member candlestick(data) = \n    { Candlestick.data = data; options = CandlestickChartOptions.empty }\n*)\n\n  static member show(chart:#Chart) = \n    Helpers.showChart(chart)","var nativeIsArray = Array.isArray\nvar toString = Object.prototype.toString\n\nmodule.exports = nativeIsArray || isArray\n\nfunction isArray(obj) {\n    return toString.call(obj) === \"[object Array]\"\n}\n","module.exports = \"2\"\n","var version = require(\"./version\")\n\nVirtualPatch.NONE = 0\nVirtualPatch.VTEXT = 1\nVirtualPatch.VNODE = 2\nVirtualPatch.WIDGET = 3\nVirtualPatch.PROPS = 4\nVirtualPatch.ORDER = 5\nVirtualPatch.INSERT = 6\nVirtualPatch.REMOVE = 7\nVirtualPatch.THUNK = 8\n\nmodule.exports = VirtualPatch\n\nfunction VirtualPatch(type, vNode, patch) {\n    this.type = Number(type)\n    this.vNode = vNode\n    this.patch = patch\n}\n\nVirtualPatch.prototype.version = version\nVirtualPatch.prototype.type = \"VirtualPatch\"\n","var version = require(\"./version\")\n\nmodule.exports = isVirtualNode\n\nfunction isVirtualNode(x) {\n    return x && x.type === \"VirtualNode\" && x.version === version\n}\n","var version = require(\"./version\")\n\nmodule.exports = isVirtualText\n\nfunction isVirtualText(x) {\n    return x && x.type === \"VirtualText\" && x.version === version\n}\n","module.exports = isWidget\n\nfunction isWidget(w) {\n    return w && w.type === \"Widget\"\n}\n","module.exports = isThunk\r\n\r\nfunction isThunk(t) {\r\n    return t && t.type === \"Thunk\"\r\n}\r\n","var isVNode = require(\"./is-vnode\")\nvar isVText = require(\"./is-vtext\")\nvar isWidget = require(\"./is-widget\")\nvar isThunk = require(\"./is-thunk\")\n\nmodule.exports = handleThunk\n\nfunction handleThunk(a, b) {\n    var renderedA = a\n    var renderedB = b\n\n    if (isThunk(b)) {\n        renderedB = renderThunk(b, a)\n    }\n\n    if (isThunk(a)) {\n        renderedA = renderThunk(a, null)\n    }\n\n    return {\n        a: renderedA,\n        b: renderedB\n    }\n}\n\nfunction renderThunk(thunk, previous) {\n    var renderedThunk = thunk.vnode\n\n    if (!renderedThunk) {\n        renderedThunk = thunk.vnode = thunk.render(previous)\n    }\n\n    if (!(isVNode(renderedThunk) ||\n            isVText(renderedThunk) ||\n            isWidget(renderedThunk))) {\n        throw new Error(\"thunk did not return a valid node\");\n    }\n\n    return renderedThunk\n}\n","\"use strict\";\n\nmodule.exports = function isObject(x) {\n\treturn typeof x === \"object\" && x !== null;\n};\n","module.exports = isHook\n\nfunction isHook(hook) {\n    return hook &&\n      (typeof hook.hook === \"function\" && !hook.hasOwnProperty(\"hook\") ||\n       typeof hook.unhook === \"function\" && !hook.hasOwnProperty(\"unhook\"))\n}\n","var isObject = require(\"is-object\")\nvar isHook = require(\"../vnode/is-vhook\")\n\nmodule.exports = diffProps\n\nfunction diffProps(a, b) {\n    var diff\n\n    for (var aKey in a) {\n        if (!(aKey in b)) {\n            diff = diff || {}\n            diff[aKey] = undefined\n        }\n\n        var aValue = a[aKey]\n        var bValue = b[aKey]\n\n        if (aValue === bValue) {\n            continue\n        } else if (isObject(aValue) && isObject(bValue)) {\n            if (getPrototype(bValue) !== getPrototype(aValue)) {\n                diff = diff || {}\n                diff[aKey] = bValue\n            } else if (isHook(bValue)) {\n                 diff = diff || {}\n                 diff[aKey] = bValue\n            } else {\n                var objectDiff = diffProps(aValue, bValue)\n                if (objectDiff) {\n                    diff = diff || {}\n                    diff[aKey] = objectDiff\n                }\n            }\n        } else {\n            diff = diff || {}\n            diff[aKey] = bValue\n        }\n    }\n\n    for (var bKey in b) {\n        if (!(bKey in a)) {\n            diff = diff || {}\n            diff[bKey] = b[bKey]\n        }\n    }\n\n    return diff\n}\n\nfunction getPrototype(value) {\n  if (Object.getPrototypeOf) {\n    return Object.getPrototypeOf(value)\n  } else if (value.__proto__) {\n    return value.__proto__\n  } else if (value.constructor) {\n    return value.constructor.prototype\n  }\n}\n","var isArray = require(\"x-is-array\")\n\nvar VPatch = require(\"../vnode/vpatch\")\nvar isVNode = require(\"../vnode/is-vnode\")\nvar isVText = require(\"../vnode/is-vtext\")\nvar isWidget = require(\"../vnode/is-widget\")\nvar isThunk = require(\"../vnode/is-thunk\")\nvar handleThunk = require(\"../vnode/handle-thunk\")\n\nvar diffProps = require(\"./diff-props\")\n\nmodule.exports = diff\n\nfunction diff(a, b) {\n    var patch = { a: a }\n    walk(a, b, patch, 0)\n    return patch\n}\n\nfunction walk(a, b, patch, index) {\n    if (a === b) {\n        return\n    }\n\n    var apply = patch[index]\n    var applyClear = false\n\n    if (isThunk(a) || isThunk(b)) {\n        thunks(a, b, patch, index)\n    } else if (b == null) {\n\n        // If a is a widget we will add a remove patch for it\n        // Otherwise any child widgets/hooks must be destroyed.\n        // This prevents adding two remove patches for a widget.\n        if (!isWidget(a)) {\n            clearState(a, patch, index)\n            apply = patch[index]\n        }\n\n        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))\n    } else if (isVNode(b)) {\n        if (isVNode(a)) {\n            if (a.tagName === b.tagName &&\n                a.namespace === b.namespace &&\n                a.key === b.key) {\n                var propsPatch = diffProps(a.properties, b.properties)\n                if (propsPatch) {\n                    apply = appendPatch(apply,\n                        new VPatch(VPatch.PROPS, a, propsPatch))\n                }\n                apply = diffChildren(a, b, patch, apply, index)\n            } else {\n                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))\n                applyClear = true\n            }\n        } else {\n            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))\n            applyClear = true\n        }\n    } else if (isVText(b)) {\n        if (!isVText(a)) {\n            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))\n            applyClear = true\n        } else if (a.text !== b.text) {\n            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))\n        }\n    } else if (isWidget(b)) {\n        if (!isWidget(a)) {\n            applyClear = true\n        }\n\n        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))\n    }\n\n    if (apply) {\n        patch[index] = apply\n    }\n\n    if (applyClear) {\n        clearState(a, patch, index)\n    }\n}\n\nfunction diffChildren(a, b, patch, apply, index) {\n    var aChildren = a.children\n    var orderedSet = reorder(aChildren, b.children)\n    var bChildren = orderedSet.children\n\n    var aLen = aChildren.length\n    var bLen = bChildren.length\n    var len = aLen > bLen ? aLen : bLen\n\n    for (var i = 0; i < len; i++) {\n        var leftNode = aChildren[i]\n        var rightNode = bChildren[i]\n        index += 1\n\n        if (!leftNode) {\n            if (rightNode) {\n                // Excess nodes in b need to be added\n                apply = appendPatch(apply,\n                    new VPatch(VPatch.INSERT, null, rightNode))\n            }\n        } else {\n            walk(leftNode, rightNode, patch, index)\n        }\n\n        if (isVNode(leftNode) && leftNode.count) {\n            index += leftNode.count\n        }\n    }\n\n    if (orderedSet.moves) {\n        // Reorder nodes last\n        apply = appendPatch(apply, new VPatch(\n            VPatch.ORDER,\n            a,\n            orderedSet.moves\n        ))\n    }\n\n    return apply\n}\n\nfunction clearState(vNode, patch, index) {\n    // TODO: Make this a single walk, not two\n    unhook(vNode, patch, index)\n    destroyWidgets(vNode, patch, index)\n}\n\n// Patch records for all destroyed widgets must be added because we need\n// a DOM node reference for the destroy function\nfunction destroyWidgets(vNode, patch, index) {\n    if (isWidget(vNode)) {\n        if (typeof vNode.destroy === \"function\") {\n            patch[index] = appendPatch(\n                patch[index],\n                new VPatch(VPatch.REMOVE, vNode, null)\n            )\n        }\n    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {\n        var children = vNode.children\n        var len = children.length\n        for (var i = 0; i < len; i++) {\n            var child = children[i]\n            index += 1\n\n            destroyWidgets(child, patch, index)\n\n            if (isVNode(child) && child.count) {\n                index += child.count\n            }\n        }\n    } else if (isThunk(vNode)) {\n        thunks(vNode, null, patch, index)\n    }\n}\n\n// Create a sub-patch for thunks\nfunction thunks(a, b, patch, index) {\n    var nodes = handleThunk(a, b)\n    var thunkPatch = diff(nodes.a, nodes.b)\n    if (hasPatches(thunkPatch)) {\n        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)\n    }\n}\n\nfunction hasPatches(patch) {\n    for (var index in patch) {\n        if (index !== \"a\") {\n            return true\n        }\n    }\n\n    return false\n}\n\n// Execute hooks when two nodes are identical\nfunction unhook(vNode, patch, index) {\n    if (isVNode(vNode)) {\n        if (vNode.hooks) {\n            patch[index] = appendPatch(\n                patch[index],\n                new VPatch(\n                    VPatch.PROPS,\n                    vNode,\n                    undefinedKeys(vNode.hooks)\n                )\n            )\n        }\n\n        if (vNode.descendantHooks || vNode.hasThunks) {\n            var children = vNode.children\n            var len = children.length\n            for (var i = 0; i < len; i++) {\n                var child = children[i]\n                index += 1\n\n                unhook(child, patch, index)\n\n                if (isVNode(child) && child.count) {\n                    index += child.count\n                }\n            }\n        }\n    } else if (isThunk(vNode)) {\n        thunks(vNode, null, patch, index)\n    }\n}\n\nfunction undefinedKeys(obj) {\n    var result = {}\n\n    for (var key in obj) {\n        result[key] = undefined\n    }\n\n    return result\n}\n\n// List diff, naive left to right reordering\nfunction reorder(aChildren, bChildren) {\n    // O(M) time, O(M) memory\n    var bChildIndex = keyIndex(bChildren)\n    var bKeys = bChildIndex.keys\n    var bFree = bChildIndex.free\n\n    if (bFree.length === bChildren.length) {\n        return {\n            children: bChildren,\n            moves: null\n        }\n    }\n\n    // O(N) time, O(N) memory\n    var aChildIndex = keyIndex(aChildren)\n    var aKeys = aChildIndex.keys\n    var aFree = aChildIndex.free\n\n    if (aFree.length === aChildren.length) {\n        return {\n            children: bChildren,\n            moves: null\n        }\n    }\n\n    // O(MAX(N, M)) memory\n    var newChildren = []\n\n    var freeIndex = 0\n    var freeCount = bFree.length\n    var deletedItems = 0\n\n    // Iterate through a and match a node in b\n    // O(N) time,\n    for (var i = 0 ; i < aChildren.length; i++) {\n        var aItem = aChildren[i]\n        var itemIndex\n\n        if (aItem.key) {\n            if (bKeys.hasOwnProperty(aItem.key)) {\n                // Match up the old keys\n                itemIndex = bKeys[aItem.key]\n                newChildren.push(bChildren[itemIndex])\n\n            } else {\n                // Remove old keyed items\n                itemIndex = i - deletedItems++\n                newChildren.push(null)\n            }\n        } else {\n            // Match the item in a with the next free item in b\n            if (freeIndex < freeCount) {\n                itemIndex = bFree[freeIndex++]\n                newChildren.push(bChildren[itemIndex])\n            } else {\n                // There are no free items in b to match with\n                // the free items in a, so the extra free nodes\n                // are deleted.\n                itemIndex = i - deletedItems++\n                newChildren.push(null)\n            }\n        }\n    }\n\n    var lastFreeIndex = freeIndex >= bFree.length ?\n        bChildren.length :\n        bFree[freeIndex]\n\n    // Iterate through b and append any new keys\n    // O(M) time\n    for (var j = 0; j < bChildren.length; j++) {\n        var newItem = bChildren[j]\n\n        if (newItem.key) {\n            if (!aKeys.hasOwnProperty(newItem.key)) {\n                // Add any new keyed items\n                // We are adding new items to the end and then sorting them\n                // in place. In future we should insert new items in place.\n                newChildren.push(newItem)\n            }\n        } else if (j >= lastFreeIndex) {\n            // Add any leftover non-keyed items\n            newChildren.push(newItem)\n        }\n    }\n\n    var simulate = newChildren.slice()\n    var simulateIndex = 0\n    var removes = []\n    var inserts = []\n    var simulateItem\n\n    for (var k = 0; k < bChildren.length;) {\n        var wantedItem = bChildren[k]\n        simulateItem = simulate[simulateIndex]\n\n        // remove items\n        while (simulateItem === null && simulate.length) {\n            removes.push(remove(simulate, simulateIndex, null))\n            simulateItem = simulate[simulateIndex]\n        }\n\n        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n            // if we need a key in this position...\n            if (wantedItem.key) {\n                if (simulateItem && simulateItem.key) {\n                    // if an insert doesn't put this key in place, it needs to move\n                    if (bKeys[simulateItem.key] !== k + 1) {\n                        removes.push(remove(simulate, simulateIndex, simulateItem.key))\n                        simulateItem = simulate[simulateIndex]\n                        // if the remove didn't put the wanted item in place, we need to insert it\n                        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                            inserts.push({key: wantedItem.key, to: k})\n                        }\n                        // items are matching, so skip ahead\n                        else {\n                            simulateIndex++\n                        }\n                    }\n                    else {\n                        inserts.push({key: wantedItem.key, to: k})\n                    }\n                }\n                else {\n                    inserts.push({key: wantedItem.key, to: k})\n                }\n                k++\n            }\n            // a key in simulate has no matching wanted key, remove it\n            else if (simulateItem && simulateItem.key) {\n                removes.push(remove(simulate, simulateIndex, simulateItem.key))\n            }\n        }\n        else {\n            simulateIndex++\n            k++\n        }\n    }\n\n    // remove all the remaining nodes from simulate\n    while(simulateIndex < simulate.length) {\n        simulateItem = simulate[simulateIndex]\n        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))\n    }\n\n    // If the only moves we have are deletes then we can just\n    // let the delete patch remove these items.\n    if (removes.length === deletedItems && !inserts.length) {\n        return {\n            children: newChildren,\n            moves: null\n        }\n    }\n\n    return {\n        children: newChildren,\n        moves: {\n            removes: removes,\n            inserts: inserts\n        }\n    }\n}\n\nfunction remove(arr, index, key) {\n    arr.splice(index, 1)\n\n    return {\n        from: index,\n        key: key\n    }\n}\n\nfunction keyIndex(children) {\n    var keys = {}\n    var free = []\n    var length = children.length\n\n    for (var i = 0; i < length; i++) {\n        var child = children[i]\n\n        if (child.key) {\n            keys[child.key] = i\n        } else {\n            free.push(i)\n        }\n    }\n\n    return {\n        keys: keys,     // A hash of key name to index\n        free: free      // An array of unkeyed item indices\n    }\n}\n\nfunction appendPatch(apply, patch) {\n    if (apply) {\n        if (isArray(apply)) {\n            apply.push(patch)\n        } else {\n            apply = [apply, patch]\n        }\n\n        return apply\n    } else {\n        return patch\n    }\n}\n","var diff = require(\"./vtree/diff.js\")\n\nmodule.exports = diff\n","var slice = Array.prototype.slice\n\nmodule.exports = iterativelyWalk\n\nfunction iterativelyWalk(nodes, cb) {\n    if (!('length' in nodes)) {\n        nodes = [nodes]\n    }\n    \n    nodes = slice.call(nodes)\n\n    while(nodes.length) {\n        var node = nodes.shift(),\n            ret = cb(node)\n\n        if (ret) {\n            return ret\n        }\n\n        if (node.childNodes && node.childNodes.length) {\n            nodes = slice.call(node.childNodes).concat(nodes)\n        }\n    }\n}\n","module.exports = Comment\n\nfunction Comment(data, owner) {\n    if (!(this instanceof Comment)) {\n        return new Comment(data, owner)\n    }\n\n    this.data = data\n    this.nodeValue = data\n    this.length = data.length\n    this.ownerDocument = owner || null\n}\n\nComment.prototype.nodeType = 8\nComment.prototype.nodeName = \"#comment\"\n\nComment.prototype.toString = function _Comment_toString() {\n    return \"[object Comment]\"\n}\n","module.exports = DOMText\n\nfunction DOMText(value, owner) {\n    if (!(this instanceof DOMText)) {\n        return new DOMText(value)\n    }\n\n    this.data = value || \"\"\n    this.length = this.data.length\n    this.ownerDocument = owner || null\n}\n\nDOMText.prototype.type = \"DOMTextNode\"\nDOMText.prototype.nodeType = 3\nDOMText.prototype.nodeName = \"#text\"\n\nDOMText.prototype.toString = function _Text_toString() {\n    return this.data\n}\n\nDOMText.prototype.replaceData = function replaceData(index, length, value) {\n    var current = this.data\n    var left = current.substring(0, index)\n    var right = current.substring(index + length, current.length)\n    this.data = left + value + right\n    this.length = this.data.length\n}\n","module.exports = dispatchEvent\n\nfunction dispatchEvent(ev) {\n    var elem = this\n    var type = ev.type\n\n    if (!ev.target) {\n        ev.target = elem\n    }\n\n    if (!elem.listeners) {\n        elem.listeners = {}\n    }\n\n    var listeners = elem.listeners[type]\n\n    if (listeners) {\n        return listeners.forEach(function (listener) {\n            ev.currentTarget = elem\n            if (typeof listener === 'function') {\n                listener(ev)\n            } else {\n                listener.handleEvent(ev)\n            }\n        })\n    }\n\n    if (elem.parentNode) {\n        elem.parentNode.dispatchEvent(ev)\n    }\n}\n","module.exports = addEventListener\n\nfunction addEventListener(type, listener) {\n    var elem = this\n\n    if (!elem.listeners) {\n        elem.listeners = {}\n    }\n\n    if (!elem.listeners[type]) {\n        elem.listeners[type] = []\n    }\n\n    if (elem.listeners[type].indexOf(listener) === -1) {\n        elem.listeners[type].push(listener)\n    }\n}\n","module.exports = removeEventListener\n\nfunction removeEventListener(type, listener) {\n    var elem = this\n\n    if (!elem.listeners) {\n        return\n    }\n\n    if (!elem.listeners[type]) {\n        return\n    }\n\n    var list = elem.listeners[type]\n    var index = list.indexOf(listener)\n    if (index !== -1) {\n        list.splice(index, 1)\n    }\n}\n","module.exports = serializeNode\n\nvar voidElements = [\"area\",\"base\",\"br\",\"col\",\"embed\",\"hr\",\"img\",\"input\",\"keygen\",\"link\",\"menuitem\",\"meta\",\"param\",\"source\",\"track\",\"wbr\"];\n\nfunction serializeNode(node) {\n    switch (node.nodeType) {\n        case 3:\n            return escapeText(node.data)\n        case 8:\n            return \"<!--\" + node.data + \"-->\"\n        default:\n            return serializeElement(node)\n    }\n}\n\nfunction serializeElement(elem) {\n    var strings = []\n\n    var tagname = elem.tagName\n\n    if (elem.namespaceURI === \"http://www.w3.org/1999/xhtml\") {\n        tagname = tagname.toLowerCase()\n    }\n\n    strings.push(\"<\" + tagname + properties(elem) + datasetify(elem))\n\n    if (voidElements.indexOf(tagname) > -1) {\n        strings.push(\" />\")\n    } else {\n        strings.push(\">\")\n\n        if (elem.childNodes.length) {\n            strings.push.apply(strings, elem.childNodes.map(serializeNode))\n        } else if (elem.textContent || elem.innerText) {\n            strings.push(escapeText(elem.textContent || elem.innerText))\n        } else if (elem.innerHTML) {\n            strings.push(elem.innerHTML)\n        }\n\n        strings.push(\"</\" + tagname + \">\")\n    }\n\n    return strings.join(\"\")\n}\n\nfunction isProperty(elem, key) {\n    var type = typeof elem[key]\n\n    if (key === \"style\" && Object.keys(elem.style).length > 0) {\n      return true\n    }\n\n    return elem.hasOwnProperty(key) &&\n        (type === \"string\" || type === \"boolean\" || type === \"number\") &&\n        key !== \"nodeName\" && key !== \"className\" && key !== \"tagName\" &&\n        key !== \"textContent\" && key !== \"innerText\" && key !== \"namespaceURI\" &&  key !== \"innerHTML\"\n}\n\nfunction stylify(styles) {\n    if (typeof styles === 'string') return styles\n    var attr = \"\"\n    Object.keys(styles).forEach(function (key) {\n        var value = styles[key]\n        key = key.replace(/[A-Z]/g, function(c) {\n            return \"-\" + c.toLowerCase();\n        })\n        attr += key + \":\" + value + \";\"\n    })\n    return attr\n}\n\nfunction datasetify(elem) {\n    var ds = elem.dataset\n    var props = []\n\n    for (var key in ds) {\n        props.push({ name: \"data-\" + key, value: ds[key] })\n    }\n\n    return props.length ? stringify(props) : \"\"\n}\n\nfunction stringify(list) {\n    var attributes = []\n    list.forEach(function (tuple) {\n        var name = tuple.name\n        var value = tuple.value\n\n        if (name === \"style\") {\n            value = stylify(value)\n        }\n\n        attributes.push(name + \"=\" + \"\\\"\" + escapeAttributeValue(value) + \"\\\"\")\n    })\n\n    return attributes.length ? \" \" + attributes.join(\" \") : \"\"\n}\n\nfunction properties(elem) {\n    var props = []\n    for (var key in elem) {\n        if (isProperty(elem, key)) {\n            props.push({ name: key, value: elem[key] })\n        }\n    }\n\n    for (var ns in elem._attributes) {\n      for (var attribute in elem._attributes[ns]) {\n        var prop = elem._attributes[ns][attribute]\n        var name = (prop.prefix ? prop.prefix + \":\" : \"\") + attribute\n        props.push({ name: name, value: prop.value })\n      }\n    }\n\n    if (elem.className) {\n        props.push({ name: \"class\", value: elem.className })\n    }\n\n    return props.length ? stringify(props) : \"\"\n}\n\nfunction escapeText(s) {\n    var str = '';\n\n    if (typeof(s) === 'string') { \n        str = s; \n    } else if (s) {\n        str = s.toString();\n    }\n\n    return str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n}\n\nfunction escapeAttributeValue(str) {\n    return escapeText(str).replace(/\"/g, \"&quot;\")\n}\n","var domWalk = require(\"dom-walk\")\nvar dispatchEvent = require(\"./event/dispatch-event.js\")\nvar addEventListener = require(\"./event/add-event-listener.js\")\nvar removeEventListener = require(\"./event/remove-event-listener.js\")\nvar serializeNode = require(\"./serialize.js\")\n\nvar htmlns = \"http://www.w3.org/1999/xhtml\"\n\nmodule.exports = DOMElement\n\nfunction DOMElement(tagName, owner, namespace) {\n    if (!(this instanceof DOMElement)) {\n        return new DOMElement(tagName)\n    }\n\n    var ns = namespace === undefined ? htmlns : (namespace || null)\n\n    this.tagName = ns === htmlns ? String(tagName).toUpperCase() : tagName\n    this.nodeName = this.tagName\n    this.className = \"\"\n    this.dataset = {}\n    this.childNodes = []\n    this.parentNode = null\n    this.style = {}\n    this.ownerDocument = owner || null\n    this.namespaceURI = ns\n    this._attributes = {}\n\n    if (this.tagName === 'INPUT') {\n      this.type = 'text'\n    }\n}\n\nDOMElement.prototype.type = \"DOMElement\"\nDOMElement.prototype.nodeType = 1\n\nDOMElement.prototype.appendChild = function _Element_appendChild(child) {\n    if (child.parentNode) {\n        child.parentNode.removeChild(child)\n    }\n\n    this.childNodes.push(child)\n    child.parentNode = this\n\n    return child\n}\n\nDOMElement.prototype.replaceChild =\n    function _Element_replaceChild(elem, needle) {\n        // TODO: Throw NotFoundError if needle.parentNode !== this\n\n        if (elem.parentNode) {\n            elem.parentNode.removeChild(elem)\n        }\n\n        var index = this.childNodes.indexOf(needle)\n\n        needle.parentNode = null\n        this.childNodes[index] = elem\n        elem.parentNode = this\n\n        return needle\n    }\n\nDOMElement.prototype.removeChild = function _Element_removeChild(elem) {\n    // TODO: Throw NotFoundError if elem.parentNode !== this\n\n    var index = this.childNodes.indexOf(elem)\n    this.childNodes.splice(index, 1)\n\n    elem.parentNode = null\n    return elem\n}\n\nDOMElement.prototype.insertBefore =\n    function _Element_insertBefore(elem, needle) {\n        // TODO: Throw NotFoundError if referenceElement is a dom node\n        // and parentNode !== this\n\n        if (elem.parentNode) {\n            elem.parentNode.removeChild(elem)\n        }\n\n        var index = needle === null || needle === undefined ?\n            -1 :\n            this.childNodes.indexOf(needle)\n\n        if (index > -1) {\n            this.childNodes.splice(index, 0, elem)\n        } else {\n            this.childNodes.push(elem)\n        }\n\n        elem.parentNode = this\n        return elem\n    }\n\nDOMElement.prototype.setAttributeNS =\n    function _Element_setAttributeNS(namespace, name, value) {\n        var prefix = null\n        var localName = name\n        var colonPosition = name.indexOf(\":\")\n        if (colonPosition > -1) {\n            prefix = name.substr(0, colonPosition)\n            localName = name.substr(colonPosition + 1)\n        }\n        if (this.tagName === 'INPUT' && name === 'type') {\n          this.type = value;\n        }\n        else {\n          var attributes = this._attributes[namespace] || (this._attributes[namespace] = {})\n          attributes[localName] = {value: value, prefix: prefix}\n        }\n    }\n\nDOMElement.prototype.getAttributeNS =\n    function _Element_getAttributeNS(namespace, name) {\n        var attributes = this._attributes[namespace];\n        var value = attributes && attributes[name] && attributes[name].value\n        if (this.tagName === 'INPUT' && name === 'type') {\n          return this.type;\n        }\n        if (typeof value !== \"string\") {\n            return null\n        }\n        return value\n    }\n\nDOMElement.prototype.removeAttributeNS =\n    function _Element_removeAttributeNS(namespace, name) {\n        var attributes = this._attributes[namespace];\n        if (attributes) {\n            delete attributes[name]\n        }\n    }\n\nDOMElement.prototype.hasAttributeNS =\n    function _Element_hasAttributeNS(namespace, name) {\n        var attributes = this._attributes[namespace]\n        return !!attributes && name in attributes;\n    }\n\nDOMElement.prototype.setAttribute = function _Element_setAttribute(name, value) {\n    return this.setAttributeNS(null, name, value)\n}\n\nDOMElement.prototype.getAttribute = function _Element_getAttribute(name) {\n    return this.getAttributeNS(null, name)\n}\n\nDOMElement.prototype.removeAttribute = function _Element_removeAttribute(name) {\n    return this.removeAttributeNS(null, name)\n}\n\nDOMElement.prototype.hasAttribute = function _Element_hasAttribute(name) {\n    return this.hasAttributeNS(null, name)\n}\n\nDOMElement.prototype.removeEventListener = removeEventListener\nDOMElement.prototype.addEventListener = addEventListener\nDOMElement.prototype.dispatchEvent = dispatchEvent\n\n// Un-implemented\nDOMElement.prototype.focus = function _Element_focus() {\n    return void 0\n}\n\nDOMElement.prototype.toString = function _Element_toString() {\n    return serializeNode(this)\n}\n\nDOMElement.prototype.getElementsByClassName = function _Element_getElementsByClassName(classNames) {\n    var classes = classNames.split(\" \");\n    var elems = []\n\n    domWalk(this, function (node) {\n        if (node.nodeType === 1) {\n            var nodeClassName = node.className || \"\"\n            var nodeClasses = nodeClassName.split(\" \")\n\n            if (classes.every(function (item) {\n                return nodeClasses.indexOf(item) !== -1\n            })) {\n                elems.push(node)\n            }\n        }\n    })\n\n    return elems\n}\n\nDOMElement.prototype.getElementsByTagName = function _Element_getElementsByTagName(tagName) {\n    tagName = tagName.toLowerCase()\n    var elems = []\n\n    domWalk(this.childNodes, function (node) {\n        if (node.nodeType === 1 && (tagName === '*' || node.tagName.toLowerCase() === tagName)) {\n            elems.push(node)\n        }\n    })\n\n    return elems\n}\n\nDOMElement.prototype.contains = function _Element_contains(element) {\n    return domWalk(this, function (node) {\n        return element === node\n    }) || false\n}\n","var DOMElement = require(\"./dom-element.js\")\n\nmodule.exports = DocumentFragment\n\nfunction DocumentFragment(owner) {\n    if (!(this instanceof DocumentFragment)) {\n        return new DocumentFragment()\n    }\n\n    this.childNodes = []\n    this.parentNode = null\n    this.ownerDocument = owner || null\n}\n\nDocumentFragment.prototype.type = \"DocumentFragment\"\nDocumentFragment.prototype.nodeType = 11\nDocumentFragment.prototype.nodeName = \"#document-fragment\"\n\nDocumentFragment.prototype.appendChild  = DOMElement.prototype.appendChild\nDocumentFragment.prototype.replaceChild = DOMElement.prototype.replaceChild\nDocumentFragment.prototype.removeChild  = DOMElement.prototype.removeChild\n\nDocumentFragment.prototype.toString =\n    function _DocumentFragment_toString() {\n        return this.childNodes.map(function (node) {\n            return String(node)\n        }).join(\"\")\n    }\n","module.exports = Event\n\nfunction Event(family) {}\n\nEvent.prototype.initEvent = function _Event_initEvent(type, bubbles, cancelable) {\n    this.type = type\n    this.bubbles = bubbles\n    this.cancelable = cancelable\n}\n\nEvent.prototype.preventDefault = function _Event_preventDefault() {\n    \n}\n","var domWalk = require(\"dom-walk\")\n\nvar Comment = require(\"./dom-comment.js\")\nvar DOMText = require(\"./dom-text.js\")\nvar DOMElement = require(\"./dom-element.js\")\nvar DocumentFragment = require(\"./dom-fragment.js\")\nvar Event = require(\"./event.js\")\nvar dispatchEvent = require(\"./event/dispatch-event.js\")\nvar addEventListener = require(\"./event/add-event-listener.js\")\nvar removeEventListener = require(\"./event/remove-event-listener.js\")\n\nmodule.exports = Document;\n\nfunction Document() {\n    if (!(this instanceof Document)) {\n        return new Document();\n    }\n\n    this.head = this.createElement(\"head\")\n    this.body = this.createElement(\"body\")\n    this.documentElement = this.createElement(\"html\")\n    this.documentElement.appendChild(this.head)\n    this.documentElement.appendChild(this.body)\n    this.childNodes = [this.documentElement]\n    this.nodeType = 9\n}\n\nvar proto = Document.prototype;\nproto.createTextNode = function createTextNode(value) {\n    return new DOMText(value, this)\n}\n\nproto.createElementNS = function createElementNS(namespace, tagName) {\n    var ns = namespace === null ? null : String(namespace)\n    return new DOMElement(tagName, this, ns)\n}\n\nproto.createElement = function createElement(tagName) {\n    return new DOMElement(tagName, this)\n}\n\nproto.createDocumentFragment = function createDocumentFragment() {\n    return new DocumentFragment(this)\n}\n\nproto.createEvent = function createEvent(family) {\n    return new Event(family)\n}\n\nproto.createComment = function createComment(data) {\n    return new Comment(data, this)\n}\n\nproto.getElementById = function getElementById(id) {\n    id = String(id)\n\n    var result = domWalk(this.childNodes, function (node) {\n        if (String(node.id) === id) {\n            return node\n        }\n    })\n\n    return result || null\n}\n\nproto.getElementsByClassName = DOMElement.prototype.getElementsByClassName\nproto.getElementsByTagName = DOMElement.prototype.getElementsByTagName\nproto.contains = DOMElement.prototype.contains\n\nproto.removeEventListener = removeEventListener\nproto.addEventListener = addEventListener\nproto.dispatchEvent = dispatchEvent\n","var Document = require('./document.js');\n\nmodule.exports = new Document();\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","var isObject = require(\"is-object\")\nvar isHook = require(\"../vnode/is-vhook.js\")\n\nmodule.exports = applyProperties\n\nfunction applyProperties(node, props, previous) {\n    for (var propName in props) {\n        var propValue = props[propName]\n\n        if (propValue === undefined) {\n            removeProperty(node, propName, propValue, previous);\n        } else if (isHook(propValue)) {\n            removeProperty(node, propName, propValue, previous)\n            if (propValue.hook) {\n                propValue.hook(node,\n                    propName,\n                    previous ? previous[propName] : undefined)\n            }\n        } else {\n            if (isObject(propValue)) {\n                patchObject(node, props, previous, propName, propValue);\n            } else {\n                node[propName] = propValue\n            }\n        }\n    }\n}\n\nfunction removeProperty(node, propName, propValue, previous) {\n    if (previous) {\n        var previousValue = previous[propName]\n\n        if (!isHook(previousValue)) {\n            if (propName === \"attributes\") {\n                for (var attrName in previousValue) {\n                    node.removeAttribute(attrName)\n                }\n            } else if (propName === \"style\") {\n                for (var i in previousValue) {\n                    node.style[i] = \"\"\n                }\n            } else if (typeof previousValue === \"string\") {\n                node[propName] = \"\"\n            } else {\n                node[propName] = null\n            }\n        } else if (previousValue.unhook) {\n            previousValue.unhook(node, propName, propValue)\n        }\n    }\n}\n\nfunction patchObject(node, props, previous, propName, propValue) {\n    var previousValue = previous ? previous[propName] : undefined\n\n    // Set attributes\n    if (propName === \"attributes\") {\n        for (var attrName in propValue) {\n            var attrValue = propValue[attrName]\n\n            if (attrValue === undefined) {\n                node.removeAttribute(attrName)\n            } else {\n                node.setAttribute(attrName, attrValue)\n            }\n        }\n\n        return\n    }\n\n    if(previousValue && isObject(previousValue) &&\n        getPrototype(previousValue) !== getPrototype(propValue)) {\n        node[propName] = propValue\n        return\n    }\n\n    if (!isObject(node[propName])) {\n        node[propName] = {}\n    }\n\n    var replacer = propName === \"style\" ? \"\" : undefined\n\n    for (var k in propValue) {\n        var value = propValue[k]\n        node[propName][k] = (value === undefined) ? replacer : value\n    }\n}\n\nfunction getPrototype(value) {\n    if (Object.getPrototypeOf) {\n        return Object.getPrototypeOf(value)\n    } else if (value.__proto__) {\n        return value.__proto__\n    } else if (value.constructor) {\n        return value.constructor.prototype\n    }\n}\n","var document = require(\"global/document\")\n\nvar applyProperties = require(\"./apply-properties\")\n\nvar isVNode = require(\"../vnode/is-vnode.js\")\nvar isVText = require(\"../vnode/is-vtext.js\")\nvar isWidget = require(\"../vnode/is-widget.js\")\nvar handleThunk = require(\"../vnode/handle-thunk.js\")\n\nmodule.exports = createElement\n\nfunction createElement(vnode, opts) {\n    var doc = opts ? opts.document || document : document\n    var warn = opts ? opts.warn : null\n\n    vnode = handleThunk(vnode).a\n\n    if (isWidget(vnode)) {\n        return vnode.init()\n    } else if (isVText(vnode)) {\n        return doc.createTextNode(vnode.text)\n    } else if (!isVNode(vnode)) {\n        if (warn) {\n            warn(\"Item is not a valid virtual dom node\", vnode)\n        }\n        return null\n    }\n\n    var node = (vnode.namespace === null) ?\n        doc.createElement(vnode.tagName) :\n        doc.createElementNS(vnode.namespace, vnode.tagName)\n\n    var props = vnode.properties\n    applyProperties(node, props)\n\n    var children = vnode.children\n\n    for (var i = 0; i < children.length; i++) {\n        var childNode = createElement(children[i], opts)\n        if (childNode) {\n            node.appendChild(childNode)\n        }\n    }\n\n    return node\n}\n","// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.\n// We don't want to read all of the DOM nodes in the tree so we use\n// the in-order tree indexing to eliminate recursion down certain branches.\n// We only recurse into a DOM node if we know that it contains a child of\n// interest.\n\nvar noChild = {}\n\nmodule.exports = domIndex\n\nfunction domIndex(rootNode, tree, indices, nodes) {\n    if (!indices || indices.length === 0) {\n        return {}\n    } else {\n        indices.sort(ascending)\n        return recurse(rootNode, tree, indices, nodes, 0)\n    }\n}\n\nfunction recurse(rootNode, tree, indices, nodes, rootIndex) {\n    nodes = nodes || {}\n\n\n    if (rootNode) {\n        if (indexInRange(indices, rootIndex, rootIndex)) {\n            nodes[rootIndex] = rootNode\n        }\n\n        var vChildren = tree.children\n\n        if (vChildren) {\n\n            var childNodes = rootNode.childNodes\n\n            for (var i = 0; i < tree.children.length; i++) {\n                rootIndex += 1\n\n                var vChild = vChildren[i] || noChild\n                var nextIndex = rootIndex + (vChild.count || 0)\n\n                // skip recursion down the tree if there are no nodes down here\n                if (indexInRange(indices, rootIndex, nextIndex)) {\n                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)\n                }\n\n                rootIndex = nextIndex\n            }\n        }\n    }\n\n    return nodes\n}\n\n// Binary search for an index in the interval [left, right]\nfunction indexInRange(indices, left, right) {\n    if (indices.length === 0) {\n        return false\n    }\n\n    var minIndex = 0\n    var maxIndex = indices.length - 1\n    var currentIndex\n    var currentItem\n\n    while (minIndex <= maxIndex) {\n        currentIndex = ((maxIndex + minIndex) / 2) >> 0\n        currentItem = indices[currentIndex]\n\n        if (minIndex === maxIndex) {\n            return currentItem >= left && currentItem <= right\n        } else if (currentItem < left) {\n            minIndex = currentIndex + 1\n        } else  if (currentItem > right) {\n            maxIndex = currentIndex - 1\n        } else {\n            return true\n        }\n    }\n\n    return false;\n}\n\nfunction ascending(a, b) {\n    return a > b ? 1 : -1\n}\n","var isWidget = require(\"../vnode/is-widget.js\")\n\nmodule.exports = updateWidget\n\nfunction updateWidget(a, b) {\n    if (isWidget(a) && isWidget(b)) {\n        if (\"name\" in a && \"name\" in b) {\n            return a.id === b.id\n        } else {\n            return a.init === b.init\n        }\n    }\n\n    return false\n}\n","var applyProperties = require(\"./apply-properties\")\n\nvar isWidget = require(\"../vnode/is-widget.js\")\nvar VPatch = require(\"../vnode/vpatch.js\")\n\nvar updateWidget = require(\"./update-widget\")\n\nmodule.exports = applyPatch\n\nfunction applyPatch(vpatch, domNode, renderOptions) {\n    var type = vpatch.type\n    var vNode = vpatch.vNode\n    var patch = vpatch.patch\n\n    switch (type) {\n        case VPatch.REMOVE:\n            return removeNode(domNode, vNode)\n        case VPatch.INSERT:\n            return insertNode(domNode, patch, renderOptions)\n        case VPatch.VTEXT:\n            return stringPatch(domNode, vNode, patch, renderOptions)\n        case VPatch.WIDGET:\n            return widgetPatch(domNode, vNode, patch, renderOptions)\n        case VPatch.VNODE:\n            return vNodePatch(domNode, vNode, patch, renderOptions)\n        case VPatch.ORDER:\n            reorderChildren(domNode, patch)\n            return domNode\n        case VPatch.PROPS:\n            applyProperties(domNode, patch, vNode.properties)\n            return domNode\n        case VPatch.THUNK:\n            return replaceRoot(domNode,\n                renderOptions.patch(domNode, patch, renderOptions))\n        default:\n            return domNode\n    }\n}\n\nfunction removeNode(domNode, vNode) {\n    var parentNode = domNode.parentNode\n\n    if (parentNode) {\n        parentNode.removeChild(domNode)\n    }\n\n    destroyWidget(domNode, vNode);\n\n    return null\n}\n\nfunction insertNode(parentNode, vNode, renderOptions) {\n    var newNode = renderOptions.render(vNode, renderOptions)\n\n    if (parentNode) {\n        parentNode.appendChild(newNode)\n    }\n\n    return parentNode\n}\n\nfunction stringPatch(domNode, leftVNode, vText, renderOptions) {\n    var newNode\n\n    if (domNode.nodeType === 3) {\n        domNode.replaceData(0, domNode.length, vText.text)\n        newNode = domNode\n    } else {\n        var parentNode = domNode.parentNode\n        newNode = renderOptions.render(vText, renderOptions)\n\n        if (parentNode && newNode !== domNode) {\n            parentNode.replaceChild(newNode, domNode)\n        }\n    }\n\n    return newNode\n}\n\nfunction widgetPatch(domNode, leftVNode, widget, renderOptions) {\n    var updating = updateWidget(leftVNode, widget)\n    var newNode\n\n    if (updating) {\n        newNode = widget.update(leftVNode, domNode) || domNode\n    } else {\n        newNode = renderOptions.render(widget, renderOptions)\n    }\n\n    var parentNode = domNode.parentNode\n\n    if (parentNode && newNode !== domNode) {\n        parentNode.replaceChild(newNode, domNode)\n    }\n\n    if (!updating) {\n        destroyWidget(domNode, leftVNode)\n    }\n\n    return newNode\n}\n\nfunction vNodePatch(domNode, leftVNode, vNode, renderOptions) {\n    var parentNode = domNode.parentNode\n    var newNode = renderOptions.render(vNode, renderOptions)\n\n    if (parentNode && newNode !== domNode) {\n        parentNode.replaceChild(newNode, domNode)\n    }\n\n    return newNode\n}\n\nfunction destroyWidget(domNode, w) {\n    if (typeof w.destroy === \"function\" && isWidget(w)) {\n        w.destroy(domNode)\n    }\n}\n\nfunction reorderChildren(domNode, moves) {\n    var childNodes = domNode.childNodes\n    var keyMap = {}\n    var node\n    var remove\n    var insert\n\n    for (var i = 0; i < moves.removes.length; i++) {\n        remove = moves.removes[i]\n        node = childNodes[remove.from]\n        if (remove.key) {\n            keyMap[remove.key] = node\n        }\n        domNode.removeChild(node)\n    }\n\n    var length = childNodes.length\n    for (var j = 0; j < moves.inserts.length; j++) {\n        insert = moves.inserts[j]\n        node = keyMap[insert.key]\n        // this is the weirdest bug i've ever seen in webkit\n        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])\n    }\n}\n\nfunction replaceRoot(oldRoot, newRoot) {\n    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {\n        oldRoot.parentNode.replaceChild(newRoot, oldRoot)\n    }\n\n    return newRoot;\n}\n","var document = require(\"global/document\")\nvar isArray = require(\"x-is-array\")\n\nvar render = require(\"./create-element\")\nvar domIndex = require(\"./dom-index\")\nvar patchOp = require(\"./patch-op\")\nmodule.exports = patch\n\nfunction patch(rootNode, patches, renderOptions) {\n    renderOptions = renderOptions || {}\n    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch\n        ? renderOptions.patch\n        : patchRecursive\n    renderOptions.render = renderOptions.render || render\n\n    return renderOptions.patch(rootNode, patches, renderOptions)\n}\n\nfunction patchRecursive(rootNode, patches, renderOptions) {\n    var indices = patchIndices(patches)\n\n    if (indices.length === 0) {\n        return rootNode\n    }\n\n    var index = domIndex(rootNode, patches.a, indices)\n    var ownerDocument = rootNode.ownerDocument\n\n    if (!renderOptions.document && ownerDocument !== document) {\n        renderOptions.document = ownerDocument\n    }\n\n    for (var i = 0; i < indices.length; i++) {\n        var nodeIndex = indices[i]\n        rootNode = applyPatch(rootNode,\n            index[nodeIndex],\n            patches[nodeIndex],\n            renderOptions)\n    }\n\n    return rootNode\n}\n\nfunction applyPatch(rootNode, domNode, patchList, renderOptions) {\n    if (!domNode) {\n        return rootNode\n    }\n\n    var newNode\n\n    if (isArray(patchList)) {\n        for (var i = 0; i < patchList.length; i++) {\n            newNode = patchOp(patchList[i], domNode, renderOptions)\n\n            if (domNode === rootNode) {\n                rootNode = newNode\n            }\n        }\n    } else {\n        newNode = patchOp(patchList, domNode, renderOptions)\n\n        if (domNode === rootNode) {\n            rootNode = newNode\n        }\n    }\n\n    return rootNode\n}\n\nfunction patchIndices(patches) {\n    var indices = []\n\n    for (var key in patches) {\n        if (key !== \"a\") {\n            indices.push(Number(key))\n        }\n    }\n\n    return indices\n}\n","var patch = require(\"./vdom/patch.js\")\n\nmodule.exports = patch\n","var version = require(\"./version\")\nvar isVNode = require(\"./is-vnode\")\nvar isWidget = require(\"./is-widget\")\nvar isThunk = require(\"./is-thunk\")\nvar isVHook = require(\"./is-vhook\")\n\nmodule.exports = VirtualNode\n\nvar noProperties = {}\nvar noChildren = []\n\nfunction VirtualNode(tagName, properties, children, key, namespace) {\n    this.tagName = tagName\n    this.properties = properties || noProperties\n    this.children = children || noChildren\n    this.key = key != null ? String(key) : undefined\n    this.namespace = (typeof namespace === \"string\") ? namespace : null\n\n    var count = (children && children.length) || 0\n    var descendants = 0\n    var hasWidgets = false\n    var hasThunks = false\n    var descendantHooks = false\n    var hooks\n\n    for (var propName in properties) {\n        if (properties.hasOwnProperty(propName)) {\n            var property = properties[propName]\n            if (isVHook(property) && property.unhook) {\n                if (!hooks) {\n                    hooks = {}\n                }\n\n                hooks[propName] = property\n            }\n        }\n    }\n\n    for (var i = 0; i < count; i++) {\n        var child = children[i]\n        if (isVNode(child)) {\n            descendants += child.count || 0\n\n            if (!hasWidgets && child.hasWidgets) {\n                hasWidgets = true\n            }\n\n            if (!hasThunks && child.hasThunks) {\n                hasThunks = true\n            }\n\n            if (!descendantHooks && (child.hooks || child.descendantHooks)) {\n                descendantHooks = true\n            }\n        } else if (!hasWidgets && isWidget(child)) {\n            if (typeof child.destroy === \"function\") {\n                hasWidgets = true\n            }\n        } else if (!hasThunks && isThunk(child)) {\n            hasThunks = true;\n        }\n    }\n\n    this.count = count + descendants\n    this.hasWidgets = hasWidgets\n    this.hasThunks = hasThunks\n    this.hooks = hooks\n    this.descendantHooks = descendantHooks\n}\n\nVirtualNode.prototype.version = version\nVirtualNode.prototype.type = \"VirtualNode\"\n","var version = require(\"./version\")\n\nmodule.exports = VirtualText\n\nfunction VirtualText(text) {\n    this.text = String(text)\n}\n\nVirtualText.prototype.version = version\nVirtualText.prototype.type = \"VirtualText\"\n","/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */\nmodule.exports = (function split(undef) {\n\n  var nativeSplit = String.prototype.split,\n    compliantExecNpcg = /()??/.exec(\"\")[1] === undef,\n    // NPCG: nonparticipating capturing group\n    self;\n\n  self = function(str, separator, limit) {\n    // If `separator` is not a regex, use `nativeSplit`\n    if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n      return nativeSplit.call(str, separator, limit);\n    }\n    var output = [],\n      flags = (separator.ignoreCase ? \"i\" : \"\") + (separator.multiline ? \"m\" : \"\") + (separator.extended ? \"x\" : \"\") + // Proposed for ES6\n      (separator.sticky ? \"y\" : \"\"),\n      // Firefox 3+\n      lastLastIndex = 0,\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      separator = new RegExp(separator.source, flags + \"g\"),\n      separator2, match, lastIndex, lastLength;\n    str += \"\"; // Type-convert\n    if (!compliantExecNpcg) {\n      // Doesn't need flags gy, but they don't hurt\n      separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n    }\n    /* Values for `limit`, per the spec:\n     * If undefined: 4294967295 // Math.pow(2, 32) - 1\n     * If 0, Infinity, or NaN: 0\n     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n     * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n     * If other: Type-convert, then use the above rules\n     */\n    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1\n    limit >>> 0; // ToUint32(limit)\n    while (match = separator.exec(str)) {\n      // `separator.lastIndex` is not reliable cross-browser\n      lastIndex = match.index + match[0].length;\n      if (lastIndex > lastLastIndex) {\n        output.push(str.slice(lastLastIndex, match.index));\n        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n        // nonparticipating capturing groups\n        if (!compliantExecNpcg && match.length > 1) {\n          match[0].replace(separator2, function() {\n            for (var i = 1; i < arguments.length - 2; i++) {\n              if (arguments[i] === undef) {\n                match[i] = undef;\n              }\n            }\n          });\n        }\n        if (match.length > 1 && match.index < str.length) {\n          Array.prototype.push.apply(output, match.slice(1));\n        }\n        lastLength = match[0].length;\n        lastLastIndex = lastIndex;\n        if (output.length >= limit) {\n          break;\n        }\n      }\n      if (separator.lastIndex === match.index) {\n        separator.lastIndex++; // Avoid an infinite loop\n      }\n    }\n    if (lastLastIndex === str.length) {\n      if (lastLength || !separator.test(\"\")) {\n        output.push(\"\");\n      }\n    } else {\n      output.push(str.slice(lastLastIndex));\n    }\n    return output.length > limit ? output.slice(0, limit) : output;\n  };\n\n  return self;\n})();\n","'use strict';\n\nvar split = require('browser-split');\n\nvar classIdSplit = /([\\.#]?[a-zA-Z0-9\\u007F-\\uFFFF_:-]+)/;\nvar notClassId = /^\\.|#/;\n\nmodule.exports = parseTag;\n\nfunction parseTag(tag, props) {\n    if (!tag) {\n        return 'DIV';\n    }\n\n    var noId = !(props.hasOwnProperty('id'));\n\n    var tagParts = split(tag, classIdSplit);\n    var tagName = null;\n\n    if (notClassId.test(tagParts[1])) {\n        tagName = 'DIV';\n    }\n\n    var classes, part, type, i;\n\n    for (i = 0; i < tagParts.length; i++) {\n        part = tagParts[i];\n\n        if (!part) {\n            continue;\n        }\n\n        type = part.charAt(0);\n\n        if (!tagName) {\n            tagName = part;\n        } else if (type === '.') {\n            classes = classes || [];\n            classes.push(part.substring(1, part.length));\n        } else if (type === '#' && noId) {\n            props.id = part.substring(1, part.length);\n        }\n    }\n\n    if (classes) {\n        if (props.className) {\n            classes.push(props.className);\n        }\n\n        props.className = classes.join(' ');\n    }\n\n    return props.namespace ? tagName : tagName.toUpperCase();\n}\n","'use strict';\n\nmodule.exports = SoftSetHook;\n\nfunction SoftSetHook(value) {\n    if (!(this instanceof SoftSetHook)) {\n        return new SoftSetHook(value);\n    }\n\n    this.value = value;\n}\n\nSoftSetHook.prototype.hook = function (node, propertyName) {\n    if (node[propertyName] !== this.value) {\n        node[propertyName] = this.value;\n    }\n};\n","'use strict';\n\n/*global window, global*/\n\nvar root = typeof window !== 'undefined' ?\n    window : typeof global !== 'undefined' ?\n    global : {};\n\nmodule.exports = Individual;\n\nfunction Individual(key, value) {\n    if (key in root) {\n        return root[key];\n    }\n\n    root[key] = value;\n\n    return value;\n}\n","'use strict';\n\nvar Individual = require('./index.js');\n\nmodule.exports = OneVersion;\n\nfunction OneVersion(moduleName, version, defaultValue) {\n    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;\n    var enforceKey = key + '_ENFORCE_SINGLETON';\n\n    var versionValue = Individual(enforceKey, version);\n\n    if (versionValue !== version) {\n        throw new Error('Can only have one copy of ' +\n            moduleName + '.\\n' +\n            'You already have version ' + versionValue +\n            ' installed.\\n' +\n            'This means you cannot install version ' + version);\n    }\n\n    return Individual(key, defaultValue);\n}\n","'use strict';\n\nvar OneVersionConstraint = require('individual/one-version');\n\nvar MY_VERSION = '7';\nOneVersionConstraint('ev-store', MY_VERSION);\n\nvar hashKey = '__EV_STORE_KEY@' + MY_VERSION;\n\nmodule.exports = EvStore;\n\nfunction EvStore(elem) {\n    var hash = elem[hashKey];\n\n    if (!hash) {\n        hash = elem[hashKey] = {};\n    }\n\n    return hash;\n}\n","'use strict';\n\nvar EvStore = require('ev-store');\n\nmodule.exports = EvHook;\n\nfunction EvHook(value) {\n    if (!(this instanceof EvHook)) {\n        return new EvHook(value);\n    }\n\n    this.value = value;\n}\n\nEvHook.prototype.hook = function (node, propertyName) {\n    var es = EvStore(node);\n    var propName = propertyName.substr(3);\n\n    es[propName] = this.value;\n};\n\nEvHook.prototype.unhook = function(node, propertyName) {\n    var es = EvStore(node);\n    var propName = propertyName.substr(3);\n\n    es[propName] = undefined;\n};\n","'use strict';\n\nvar isArray = require('x-is-array');\n\nvar VNode = require('../vnode/vnode.js');\nvar VText = require('../vnode/vtext.js');\nvar isVNode = require('../vnode/is-vnode');\nvar isVText = require('../vnode/is-vtext');\nvar isWidget = require('../vnode/is-widget');\nvar isHook = require('../vnode/is-vhook');\nvar isVThunk = require('../vnode/is-thunk');\n\nvar parseTag = require('./parse-tag.js');\nvar softSetHook = require('./hooks/soft-set-hook.js');\nvar evHook = require('./hooks/ev-hook.js');\n\nmodule.exports = h;\n\nfunction h(tagName, properties, children) {\n    var childNodes = [];\n    var tag, props, key, namespace;\n\n    if (!children && isChildren(properties)) {\n        children = properties;\n        props = {};\n    }\n\n    props = props || properties || {};\n    tag = parseTag(tagName, props);\n\n    // support keys\n    if (props.hasOwnProperty('key')) {\n        key = props.key;\n        props.key = undefined;\n    }\n\n    // support namespace\n    if (props.hasOwnProperty('namespace')) {\n        namespace = props.namespace;\n        props.namespace = undefined;\n    }\n\n    // fix cursor bug\n    if (tag === 'INPUT' &&\n        !namespace &&\n        props.hasOwnProperty('value') &&\n        props.value !== undefined &&\n        !isHook(props.value)\n    ) {\n        props.value = softSetHook(props.value);\n    }\n\n    transformProperties(props);\n\n    if (children !== undefined && children !== null) {\n        addChild(children, childNodes, tag, props);\n    }\n\n\n    return new VNode(tag, props, childNodes, key, namespace);\n}\n\nfunction addChild(c, childNodes, tag, props) {\n    if (typeof c === 'string') {\n        childNodes.push(new VText(c));\n    } else if (typeof c === 'number') {\n        childNodes.push(new VText(String(c)));\n    } else if (isChild(c)) {\n        childNodes.push(c);\n    } else if (isArray(c)) {\n        for (var i = 0; i < c.length; i++) {\n            addChild(c[i], childNodes, tag, props);\n        }\n    } else if (c === null || c === undefined) {\n        return;\n    } else {\n        throw UnexpectedVirtualElement({\n            foreignObject: c,\n            parentVnode: {\n                tagName: tag,\n                properties: props\n            }\n        });\n    }\n}\n\nfunction transformProperties(props) {\n    for (var propName in props) {\n        if (props.hasOwnProperty(propName)) {\n            var value = props[propName];\n\n            if (isHook(value)) {\n                continue;\n            }\n\n            if (propName.substr(0, 3) === 'ev-') {\n                // add ev-foo support\n                props[propName] = evHook(value);\n            }\n        }\n    }\n}\n\nfunction isChild(x) {\n    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);\n}\n\nfunction isChildren(x) {\n    return typeof x === 'string' || isArray(x) || isChild(x);\n}\n\nfunction UnexpectedVirtualElement(data) {\n    var err = new Error();\n\n    err.type = 'virtual-hyperscript.unexpected.virtual-element';\n    err.message = 'Unexpected virtual child passed to h().\\n' +\n        'Expected a VNode / Vthunk / VWidget / string but:\\n' +\n        'got:\\n' +\n        errorString(data.foreignObject) +\n        '.\\n' +\n        'The parent vnode is:\\n' +\n        errorString(data.parentVnode)\n        '\\n' +\n        'Suggested fix: change your `h(..., [ ... ])` callsite.';\n    err.foreignObject = data.foreignObject;\n    err.parentVnode = data.parentVnode;\n\n    return err;\n}\n\nfunction errorString(obj) {\n    try {\n        return JSON.stringify(obj, null, '    ');\n    } catch (e) {\n        return String(obj);\n    }\n}\n","var h = require(\"./virtual-hyperscript/index.js\")\n\nmodule.exports = h\n","var createElement = require(\"./vdom/create-element.js\")\n\nmodule.exports = createElement\n","var diff = require(\"./diff.js\")\r\nvar patch = require(\"./patch.js\")\r\nvar h = require(\"./h.js\")\r\nvar create = require(\"./create-element.js\")\r\nvar VNode = require('./vnode/vnode.js')\r\nvar VText = require('./vnode/vtext.js')\r\n\r\nmodule.exports = {\r\n    diff: diff,\r\n    patch: patch,\r\n    h: h,\r\n    create: create,\r\n    VNode: VNode,\r\n    VText: VText\r\n}\r\n","import { createDisposable } from \"./Util\";\r\nimport FSymbol from \"./Symbol\";\r\nvar Observer = (function () {\r\n    function Observer(onNext, onError, onCompleted) {\r\n        this.OnNext = onNext;\r\n        this.OnError = onError || (function (e) { });\r\n        this.OnCompleted = onCompleted || function () { };\r\n    }\r\n    Observer.prototype[FSymbol.reflection] = function () {\r\n        return { interfaces: [\"System.IObserver\"] };\r\n    };\r\n    return Observer;\r\n}());\r\nexport { Observer };\r\nvar Observable = (function () {\r\n    function Observable(subscribe) {\r\n        this.Subscribe = subscribe;\r\n    }\r\n    Observable.prototype[FSymbol.reflection] = function () {\r\n        return { interfaces: [\"System.IObservable\"] };\r\n    };\r\n    return Observable;\r\n}());\r\nexport function protect(f, succeed, fail) {\r\n    try {\r\n        return succeed(f());\r\n    }\r\n    catch (e) {\r\n        fail(e);\r\n    }\r\n}\r\nexport function add(callback, source) {\r\n    source.Subscribe(new Observer(callback));\r\n}\r\nexport function choose(chooser, source) {\r\n    return new Observable(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            return protect(function () { return chooser(t); }, function (u) { if (u != null)\r\n                observer.OnNext(u); }, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    });\r\n}\r\nexport function filter(predicate, source) {\r\n    return choose(function (x) { return predicate(x) ? x : null; }, source);\r\n}\r\nexport function map(mapping, source) {\r\n    return new Observable(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            protect(function () { return mapping(t); }, observer.OnNext, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    });\r\n}\r\nexport function merge(source1, source2) {\r\n    return new Observable(function (observer) {\r\n        var stopped = false, completed1 = false, completed2 = false;\r\n        var h1 = source1.Subscribe(new Observer(function (v) { if (!stopped)\r\n            observer.OnNext(v); }, function (e) {\r\n            if (!stopped) {\r\n                stopped = true;\r\n                observer.OnError(e);\r\n            }\r\n        }, function () {\r\n            if (!stopped) {\r\n                completed1 = true;\r\n                if (completed2) {\r\n                    stopped = true;\r\n                    observer.OnCompleted();\r\n                }\r\n            }\r\n        }));\r\n        var h2 = source2.Subscribe(new Observer(function (v) { if (!stopped) {\r\n            observer.OnNext(v);\r\n        } }, function (e) {\r\n            if (!stopped) {\r\n                stopped = true;\r\n                observer.OnError(e);\r\n            }\r\n        }, function () {\r\n            if (!stopped) {\r\n                completed2 = true;\r\n                if (completed1) {\r\n                    stopped = true;\r\n                    observer.OnCompleted();\r\n                }\r\n            }\r\n        }));\r\n        return createDisposable(function () {\r\n            h1.Dispose();\r\n            h2.Dispose();\r\n        });\r\n    });\r\n}\r\nexport function pairwise(source) {\r\n    return new Observable(function (observer) {\r\n        var last = null;\r\n        return source.Subscribe(new Observer(function (next) {\r\n            if (last != null)\r\n                observer.OnNext([last, next]);\r\n            last = next;\r\n        }, observer.OnError, observer.OnCompleted));\r\n    });\r\n}\r\nexport function partition(predicate, source) {\r\n    return [filter(predicate, source), filter(function (x) { return !predicate(x); }, source)];\r\n}\r\nexport function scan(collector, state, source) {\r\n    return new Observable(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            protect(function () { return collector(state, t); }, function (u) { state = u; observer.OnNext(u); }, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    });\r\n}\r\nexport function split(splitter, source) {\r\n    return [choose(function (v) { return splitter(v).valueIfChoice1; }, source), choose(function (v) { return splitter(v).valueIfChoice2; }, source)];\r\n}\r\nexport function subscribe(callback, source) {\r\n    return source.Subscribe(new Observer(callback));\r\n}\r\n","import { createDisposable } from \"./Util\";\r\nimport { iterate as seqIterate } from \"./Seq\";\r\nimport { Observer } from \"./Observable\";\r\nimport { protect } from \"./Observable\";\r\nvar Event = (function () {\r\n    function Event(_subscriber, delegates) {\r\n        this._subscriber = _subscriber;\r\n        this.delegates = delegates || new Array();\r\n    }\r\n    Event.prototype.Add = function (f) {\r\n        this._addHandler(f);\r\n    };\r\n    Object.defineProperty(Event.prototype, \"Publish\", {\r\n        get: function () {\r\n            return this;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Event.prototype.Trigger = function (value) {\r\n        seqIterate(function (f) { return f(value); }, this.delegates);\r\n    };\r\n    Event.prototype._addHandler = function (f) {\r\n        this.delegates.push(f);\r\n    };\r\n    Event.prototype._removeHandler = function (f) {\r\n        var index = this.delegates.indexOf(f);\r\n        if (index > -1)\r\n            this.delegates.splice(index, 1);\r\n    };\r\n    Event.prototype.AddHandler = function (handler) {\r\n        if (this._dotnetDelegates == null) {\r\n            this._dotnetDelegates = new Map();\r\n        }\r\n        var f = function (x) { handler(null, x); };\r\n        this._dotnetDelegates.set(handler, f);\r\n        this._addHandler(f);\r\n    };\r\n    Event.prototype.RemoveHandler = function (handler) {\r\n        if (this._dotnetDelegates != null) {\r\n            var f = this._dotnetDelegates.get(handler);\r\n            if (f != null) {\r\n                this._dotnetDelegates.delete(handler);\r\n                this._removeHandler(f);\r\n            }\r\n        }\r\n    };\r\n    Event.prototype._subscribeFromObserver = function (observer) {\r\n        var _this = this;\r\n        if (this._subscriber)\r\n            return this._subscriber(observer);\r\n        var callback = observer.OnNext;\r\n        this._addHandler(callback);\r\n        return createDisposable(function () { return _this._removeHandler(callback); });\r\n    };\r\n    Event.prototype._subscribeFromCallback = function (callback) {\r\n        var _this = this;\r\n        this._addHandler(callback);\r\n        return createDisposable(function () { return _this._removeHandler(callback); });\r\n    };\r\n    Event.prototype.Subscribe = function (arg) {\r\n        return typeof arg == \"function\"\r\n            ? this._subscribeFromCallback(arg)\r\n            : this._subscribeFromObserver(arg);\r\n    };\r\n    return Event;\r\n}());\r\nexport default Event;\r\nexport function add(callback, sourceEvent) {\r\n    sourceEvent.Subscribe(new Observer(callback));\r\n}\r\nexport function choose(chooser, sourceEvent) {\r\n    var source = sourceEvent;\r\n    return new Event(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            return protect(function () { return chooser(t); }, function (u) { if (u != null)\r\n                observer.OnNext(u); }, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    }, source.delegates);\r\n}\r\nexport function filter(predicate, sourceEvent) {\r\n    return choose(function (x) { return predicate(x) ? x : null; }, sourceEvent);\r\n}\r\nexport function map(mapping, sourceEvent) {\r\n    var source = sourceEvent;\r\n    return new Event(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            return protect(function () { return mapping(t); }, observer.OnNext, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    }, source.delegates);\r\n}\r\nexport function merge(event1, event2) {\r\n    var source1 = event1;\r\n    var source2 = event2;\r\n    return new Event(function (observer) {\r\n        var stopped = false, completed1 = false, completed2 = false;\r\n        var h1 = source1.Subscribe(new Observer(function (v) { if (!stopped)\r\n            observer.OnNext(v); }, function (e) {\r\n            if (!stopped) {\r\n                stopped = true;\r\n                observer.OnError(e);\r\n            }\r\n        }, function () {\r\n            if (!stopped) {\r\n                completed1 = true;\r\n                if (completed2) {\r\n                    stopped = true;\r\n                    observer.OnCompleted();\r\n                }\r\n            }\r\n        }));\r\n        var h2 = source2.Subscribe(new Observer(function (v) { if (!stopped)\r\n            observer.OnNext(v); }, function (e) {\r\n            if (!stopped) {\r\n                stopped = true;\r\n                observer.OnError(e);\r\n            }\r\n        }, function () {\r\n            if (!stopped) {\r\n                completed2 = true;\r\n                if (completed1) {\r\n                    stopped = true;\r\n                    observer.OnCompleted();\r\n                }\r\n            }\r\n        }));\r\n        return createDisposable(function () {\r\n            h1.Dispose();\r\n            h2.Dispose();\r\n        });\r\n    }, source1.delegates.concat(source2.delegates));\r\n}\r\nexport function pairwise(sourceEvent) {\r\n    var source = sourceEvent;\r\n    return new Event(function (observer) {\r\n        var last = null;\r\n        return source.Subscribe(new Observer(function (next) {\r\n            if (last != null)\r\n                observer.OnNext([last, next]);\r\n            last = next;\r\n        }, observer.OnError, observer.OnCompleted));\r\n    }, source.delegates);\r\n}\r\nexport function partition(predicate, sourceEvent) {\r\n    return [filter(predicate, sourceEvent), filter(function (x) { return !predicate(x); }, sourceEvent)];\r\n}\r\nexport function scan(collector, state, sourceEvent) {\r\n    var source = sourceEvent;\r\n    return new Event(function (observer) {\r\n        return source.Subscribe(new Observer(function (t) {\r\n            protect(function () { return collector(state, t); }, function (u) { state = u; observer.OnNext(u); }, observer.OnError);\r\n        }, observer.OnError, observer.OnCompleted));\r\n    }, source.delegates);\r\n}\r\nexport function split(splitter, sourceEvent) {\r\n    return [choose(function (v) { return splitter(v).valueIfChoice1; }, sourceEvent), choose(function (v) { return splitter(v).valueIfChoice2; }, sourceEvent)];\r\n}\r\n","﻿module TheGamma.Html\n\nopen Fable.Core\nopen Fable.Helpers\nopen Fable.Import.Browser\nopen Fable.Core.JsInterop\nopen TheGamma.Common\n\nmodule FsOption = FSharp.Core.Option\n\n[<Fable.Core.Emit(\"jQuery($0).chosen()\")>]\nlet private chosen (el:HTMLElement) : unit = failwith \"JS\"\n\n[<Fable.Core.Emit(\"jQuery($0).on($1, $2)\")>]\nlet private on (el:HTMLElement) (evt:string) (f:unit -> unit) : unit = failwith \"JS\"\n\n[<Emit(\"$0[$1]\")>]\nlet private getProperty (o:obj) (s:string) = failwith \"!\"\n\n[<Emit(\"$0[$1] = $2\")>]\nlet private setProperty (o:obj) (s:string) (v:obj) = failwith \"!\"\n\n[<Fable.Core.Emit(\"event\")>]\nlet private event () : Event = failwith \"JS\"\n\ntype DomAttribute = \n  | Event of (HTMLElement -> Event -> unit)\n  | Attribute of string\n  | Property of obj\n\ntype DomNode = \n  | Text of string\n  | Delayed of string * DomNode * (string -> unit)\n  | Element of ns:string * tag:string * attributes:(string * DomAttribute)[] * children : DomNode[] * onRender : (HTMLElement -> unit) option\n  | Part of func:(HTMLElement -> unit)\n\nlet createTree ns tag args children =\n    let attrs = ResizeArray<_>()\n    let props = ResizeArray<_>()\n    for k, v in args do\n      match k, v with \n      | k, Attribute v ->\n          attrs.Add (k, box v)\n      | k, Property o ->\n          props.Add(k, o)\n      | k, Event f ->\n          props.Add (\"on\" + k, box (fun o -> f (getProperty o \"target\") o ))\n    let attrs = JsInterop.createObj attrs\n    let ns = if ns = null || ns = \"\" then [] else [\"namespace\", box ns]\n    let props = JsInterop.createObj (Seq.append (ns @ [\"attributes\", attrs]) props)\n    let elem = Virtualdom.h(tag, props, children)\n    elem\n\nlet mutable counter = 0\n\nlet rec renderVirtual node = \n  match node with\n  | Text(s) -> \n      box s\n  | Element(ns, tag, attrs, children, None) ->\n      createTree ns tag attrs (Array.map renderVirtual children)\n  | Delayed(symbol, body, func) ->\n      counter <- counter + 1\n      let id = sprintf \"delayed_%d\" counter\n\n      // Virtual dom calls our hook when it creates HTML element, but\n      // we still need to wait until it is added to the HTML tree\n      let rec waitForAdded n (el:HTMLElement) = \n        if el.parentElement <> null then \n          el?dataset?renderedSymbol <- symbol\n          el?id <- id\n          func id\n        elif n > 0 then window.setTimeout((fun () -> waitForAdded  (n-1) el), 1) |> ignore\n        else Log.error(\"html\", \"Delayed element was not created in time\")\n\n      // Magic as per https://github.com/Matt-Es`ch/virtual-dom/blob/master/docs/hooks.md\n      let Hook = box(fun () -> ())\n      Hook?prototype?hook <- fun (node:HTMLElement) propertyName previousValue ->\n        if unbox node?dataset?renderedSymbol <> symbol then\n          waitForAdded 10 node\n      let h = createNew Hook ()\n\n      createTree null \"div\" [\"renderhk\", Property h] [| renderVirtual body |]\n  | Element _ ->\n      failwith \"renderVirtual: Does not support elements with after-render handlers\"\n  | Part _ ->\n      failwith \"renderVirtual: Does not support parts\"\n\nlet rec render node = \n  match node with\n  | Text(s) -> \n      document.createTextNode(s) :> Node, ignore\n\n  | Delayed(_, _, func) ->\n      counter <- counter + 1\n      let el = document.createElement(\"div\")\n      el.id <- sprintf \"delayed_%d\" counter\n      el :> Node, (fun () -> func el.id)\n\n  | Part(func) ->\n      let el = document.createElement(\"div\")\n      el :> Node, (fun () -> func el)\n\n  | Element(ns, tag, attrs, children, f) ->\n      let el = \n        if ns = null || ns = \"\" then document.createElement(tag)\n        else document.createElementNS(ns, tag) :?> HTMLElement\n      let rc = Array.map render children\n      for c, _ in rc do el.appendChild(c) |> ignore\n      for k, a in attrs do \n        match a with\n        | Property(o) -> setProperty el k o\n        | Attribute(v) -> el.setAttribute(k, v)\n        | Event(f) -> el.addEventListener(k, U2.Case1(EventListener(f el)))\n      let onRender () = \n        for _, f in rc do f()\n        f |> FsOption.iter (fun f -> f el)\n      el :> Node, onRender\n\nlet renderTo (node:HTMLElement) dom = \n  while box node.lastChild <> null do ignore(node.removeChild(node.lastChild))\n  let el, f = render dom\n  node.appendChild(el) |> ignore\n  f()\n\nlet createVirtualDomAsyncApp id initial r u = \n  let event = new Event<'T>()\n  let trigger e = event.Trigger(e)  \n  let mutable container = document.createElement(\"div\") :> Node\n  document.getElementById(id).innerHTML <- \"\"\n  document.getElementById(id).appendChild(container) |> ignore\n  let mutable tree = Fable.Core.JsInterop.createObj []\n  let mutable state = initial\n\n  let handleEvent evt = Async.StartImmediate <| async {\n    match evt with \n    | Some e -> \n        let! ns = u state e \n        state <- ns\n    | _ -> ()\n    let newTree = r trigger state |> renderVirtual\n    let patches = Virtualdom.diff tree newTree\n    container <- Virtualdom.patch container patches\n    tree <- newTree }\n  \n  handleEvent None\n  event.Publish.Add(Some >> handleEvent)\n\nlet createVirtualDomApp id initial r u = \n  let event = new Event<'T>()\n  let trigger e = event.Trigger(e)  \n  let mutable container = document.createElement(\"div\") :> Node\n  document.getElementById(id).innerHTML <- \"\"\n  document.getElementById(id).appendChild(container) |> ignore\n  let mutable tree = Fable.Core.JsInterop.createObj []\n  let mutable state = initial\n\n  let handleEvent evt = \n    state <- match evt with Some e -> u state e | _ -> state\n    let newTree = r trigger state |> renderVirtual\n    let patches = Virtualdom.diff tree newTree\n    container <- Virtualdom.patch container patches\n    tree <- newTree\n  \n  handleEvent None\n  event.Publish.Add(Some >> handleEvent)\n  \nlet text s = Text(s)\nlet (=>) k v = k, Attribute(v)\nlet (=!>) k f = k, Event(f)\n\n\ntype El(ns) = \n  member x.Namespace = ns\n  static member (?) (el:El, n:string) = fun a b ->\n    let n, f = \n      if n <> \"chosen\" then n, None\n      else \"select\", Some (fun el ->\n        chosen el\n        for k, v in a do\n          match v with\n          | Event f -> on el k (fun () -> f el (event()))\n          | _ -> ()\n      )\n    Element(el.Namespace, n, Array.ofList a, Array.ofList b, f)\n\n  member x.delayed sym body f =\n    Delayed(sym, body, f)\n\n  member x.part (initial:'State) (fold:'State -> 'Event -> 'State) = \n    let evt = Control.Event<_>()\n    let mutable state = initial\n    let mutable container = None\n    let mutable renderer = None\n    let render () =\n      match container, renderer with\n      | Some el, Some r -> r state |> renderTo el\n      | _ -> ()\n    evt.Publish.Add(fun e -> state <- fold state e; render ())\n\n    evt.Trigger,\n    fun (r:'State -> DomNode) ->\n      renderer <- Some r\n      Part(fun el -> \n        container <- Some el\n        render() )\n\nlet h = El(null)\nlet s = El(\"http://www.w3.org/2000/svg\")\n","namespace TheGamma\n\nopen System\nopen TheGamma\nopen TheGamma.Common\nopen TheGamma.Series\nopen TheGamma.Html\nopen Fable.Import.Browser\n\ntype Emit = Fable.Core.EmitAttribute\n\nopen TheGamma.Common.JsHelpers\n\ntype html =\n  static member img(url:string) = \n    box (h?img [ \"src\" => url ] [])\n\ntype list<'k,'v> =\n  { data : series<'k,'v> \n    listTag : string\n    elementTag : string\n    itemFormat : 'v -> obj }\n  member t.show(outputId) = Async.StartImmediate <| async {\n    let! vs = t.data.data |> Async.AwaitFuture\n    let els = [ for _, v in vs -> sprintf \"<%s>%s</%s>\" t.elementTag (string (t.itemFormat v)) t.elementTag ]\n    document.getElementById(outputId).innerHTML <-\n      sprintf \"<%s>%s</%s>\" t.listTag (String.concat \"\" els) t.listTag }\n  member t.setTags(list, element) = \n    { t with listTag = list; elementTag = element }\n  member t.setFormat(f:'v -> obj) = \n    { t with itemFormat = f }\n  static member create(data:series<_, _>) = \n    { data = data; listTag = \"ol\"; elementTag = \"li\"\n      itemFormat = fun o -> box o }\n\ntype table<'k,'v> =\n  { data : series<'k,'v>\n    showKey : bool option \n    emptyText : string\n    columnFormatters : Map<string, obj>\n    hiddenColumns : Set<string>\n    addedColumns : list<string * ('v -> obj)> }\n\n  static member create(data:series<_, _>) =\n    { table.data = data\n      emptyText = \"No data available\"\n      hiddenColumns = Set.empty\n      columnFormatters = Map.empty\n      addedColumns = []\n      showKey = None }\n\n  member t.set(?title:string, ?showKey:bool, ?emptyText) = \n    { table.data = t.data.set(t.data.data, seriesName=defaultArg title t.data.seriesName)\n      hiddenColumns = t.hiddenColumns\n      addedColumns = t.addedColumns\n      emptyText = defaultArg emptyText t.emptyText\n      columnFormatters = t.columnFormatters\n      showKey = match showKey with None -> t.showKey | sk -> sk }\n\n  member t.setFormat(column, formatter) = \n    { t with columnFormatters = t.columnFormatters.Add(column, formatter) }\n\n  member t.hideColumns(names:string[]) =\n    { t with hiddenColumns = Set.ofArray names }\n\n  member t.addColumn(name, f) =\n    { t with addedColumns = (name, f)::t.addedColumns }\n\n  member t.render() =\n    let row showKey (el:string) k (things:seq<DomNode>) =\n      let withTitle = function\n        | DomNode.Text s -> h?div [\"title\" => s] [text s]\n        | nd -> nd\n      h?tr [] [ \n        if showKey then yield h?(el) [] [ withTitle (text k) ]\n        for t in things -> h?(el) [] [ withTitle t ] \n      ]\n\n    let makeTable showKey k header body = \n      h?table [\"class\" => \"thegamma-table\"] [\n        if not (String.IsNullOrWhiteSpace t.data.seriesName) then\n          yield h?caption [] [ text t.data.seriesName ]\n        yield h?thead [] [ row showKey \"th\" k header ]\n        yield h?tbody [] body\n      ]\n\n    let formatAdded o = \n      // Did someone say hack..?\n      let isSeries = \n        [ for kv in properties o -> kv.key ] = \n          [\"data\"; \"keyName\"; \"valueName\"; \"seriesName\"]\n      if isSeries then\n        let mutable result = unbox null\n        (unbox<series<int, DomNode>> o).data.Then(fun r -> result <- r)\n        h?span [] (List.ofArray (Array.map snd result))\n      else text (o.ToString())\n\n    async {\n      try\n        let! vs = t.data.data |> Async.AwaitFuture\n        if vs.Length = 0 then\n          return h?div [\"class\" => \"placeholder\"] [ h?p [] [ text t.emptyText ] ]\n        else \n          let filteredProperties o =\n            properties o |> Array.filter (fun kv -> not (t.hiddenColumns.Contains kv.key))\n\n          let _, first = vs |> Seq.head\n          let headers = \n            [ if isObject first then for kv in filteredProperties first -> text kv.key\n              else yield text t.data.valueName \n              for k, _ in t.addedColumns -> text k ]\n          let showKey = match t.showKey with Some sk -> sk | _ -> not (isObject first)\n          return\n            [ for k, v in vs ->\n                let formattedVals =\n                  [ if isObject v then \n                      for kv in filteredProperties v do\n                        if t.columnFormatters.ContainsKey kv.key then yield text ((unbox<_ -> _> t.columnFormatters.[kv.key]) kv.value)\n                        elif isDate kv.value then yield text (formatDateTime kv.value)\n                        elif not (isNumber kv.value) then yield text (kv.value.ToString())\n                        elif isNaN (unbox kv.value) then yield text \"\"\n                        else yield text (niceNumber kv.value 2) \n                    elif isDate v then yield text (formatDateTime v)\n                    elif not (isNumber v) then yield text (v.ToString())\n                    elif isNaN (unbox v) then yield text \"\"\n                    else yield text (niceNumber v 2) \n                    for _, f in t.addedColumns -> formatAdded (f v) ] \n                row showKey \"td\" (unbox k) formattedVals ]\n            |> makeTable showKey t.data.keyName headers\n      with e ->\n        Log.exn(\"live\", \"Getting data for table failed: %O\", e) \n        return raise e }\n\n  member t.show(outputId) =\n    async { let! dom = t.render()\n            dom |> renderTo (document.getElementById(outputId)) }\n    |> Async.StartImmediate\n\ntype placeholder(message:string) =\n  static member create(message:string) = placeholder(message)\n  member x.show(outputId) =\n    h?div [\"class\" => \"placeholder\"] [ h?p [] [ text message ] ]\n    |> renderTo (document.getElementById(outputId))\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","require('../../modules/es6.math.log10');\nmodule.exports = require('../../modules/_core').Math.log10;\n","module.exports = { \"default\": require(\"core-js/library/fn/math/log10\"), __esModule: true };","﻿namespace TheGamma.Interactive.Compost\n\nopen TheGamma\nopen TheGamma.Html\nopen Fable.Import.Browser\nopen Fable.Helpers\n\n// ------------------------------------------------------------------------------------------------\n// Domain that users see\n// ------------------------------------------------------------------------------------------------\n  \ntype Color =\n  | RGB of int * int * int\n  | HTML of string\n\ntype AlphaColor = float * Color \ntype Width = Pixels of int\ntype GradientStop = float * AlphaColor\n\ntype FillStyle =\n  | Solid of AlphaColor\n  | LinearGradient of seq<GradientStop>\n\ntype Number =\n  | Integer of int\n  | Percentage of float\n\ntype HorizontalAlign = Start | Center | End\ntype VerticalAlign = Baseline | Middle | Hanging\n\ntype continuous<[<Measure>] 'u> = CO of float<'u> \ntype categorical<[<Measure>] 'u> = CA of string\n\ntype Value<[<Measure>] 'u> = \n  | CAR of categorical<'u> * float\n  | COV of continuous<'u>\n\ntype Scale<[<Measure>] 'v> =\n  | Continuous of continuous<'v> * continuous<'v>\n  | Categorical of categorical<'v>[]\n\ntype Style = \n  { StrokeColor : AlphaColor\n    StrokeWidth : Width\n    StrokeDashArray : seq<Number>\n    Fill : FillStyle \n    Animation : option<int * string * (Style -> Style)>\n    Font : string\n    Cursor : string\n    FormatAxisXLabel : Scale<1> -> Value<1> -> string\n    FormatAxisYLabel : Scale<1> -> Value<1> -> string }\n\ntype EventHandler<[<Measure>] 'vx, [<Measure>] 'vy> = \n  | MouseMove of (MouseEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | MouseUp of (MouseEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | MouseDown of (MouseEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | Click of (MouseEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | TouchStart of (TouchEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | TouchMove of (TouchEvent -> (Value<'vx> * Value<'vy>) -> unit)\n  | TouchEnd of (TouchEvent -> unit)\n  | MouseLeave of (MouseEvent -> unit)\n\ntype Orientation = \n  | Vertical\n  | Horizontal\n\ntype Shape<[<Measure>] 'vx, [<Measure>] 'vy> = \n  | Style of (Style -> Style) * Shape<'vx, 'vy>\n  | Text of Value<'vx> * Value<'vy> * VerticalAlign * HorizontalAlign * float * string\n  | AutoScale of bool * bool * Shape<'vx, 'vy>\n  | InnerScale of option<continuous<'vx> * continuous<'vx>> * option<continuous<'vy> * continuous<'vy>> * Shape<'vx, 'vy>\n  | OuterScale of option<Scale<'vx>> * option<Scale<'vy>> * Shape<'vx, 'vy>\n  | Line of seq<Value<'vx> * Value<'vy>>\n  | Bubble of Value<'vx> * Value<'vy> * float * float\n  | Shape of seq<Value<'vx> * Value<'vy>>\n  | Stack of Orientation * seq<Shape<'vx, 'vy>>\n  | Layered of seq<Shape<'vx, 'vy>>\n  | Axes of bool * bool * bool * bool * Shape<'vx, 'vy>\n  | Interactive of seq<EventHandler<'vx, 'vy>> * Shape<'vx, 'vy>\n  | Padding of (float * float * float * float) * Shape<'vx, 'vy>\n  | Offset of (float * float) * Shape<'vx, 'vy>\n\n// ------------------------------------------------------------------------------------------------\n// SVG stuff\n// ------------------------------------------------------------------------------------------------\n\nmodule Svg =   \n\n  type StringBuilder() = \n    let mutable strs = [] \n    member x.Append(s) = strs <- s::strs\n    override x.ToString() = String.concat \"\" (List.rev strs)\n\n  type PathSegment = \n    | MoveTo of (float * float)\n    | LineTo of (float * float)\n\n  type SvgStyle = string\n  \n  type Svg =\n    | Path of PathSegment[] * SvgStyle\n    | Ellipse of (float * float) * (float * float) * SvgStyle\n    | Rect of (float * float) * (float * float) * SvgStyle\n    | Text of (float * float) * string * float * SvgStyle \n    | Combine of Svg[]\n    | Empty\n\n  let rec mapSvg f = function\n    | Combine svgs -> Combine(Array.map (mapSvg f) svgs)\n    | svg -> f svg\n\n  let formatPath path = \n    let sb = StringBuilder()\n    for ps in path do\n      match ps with\n      | MoveTo(x, y) -> sb.Append(\"M\" + string x + \" \" + string y + \" \")\n      | LineTo(x, y) -> sb.Append(\"L\" + string x + \" \" + string y + \" \")\n    sb.ToString()\n\n  type RenderingContext = \n    { Definitions : ResizeArray<DomNode> }\n\n  let rec renderSvg ctx svg = seq { \n    match svg with\n    | Empty -> ()\n    | Text((x,y), t, rotation, style) ->\n        let attrs = \n          [ yield \"style\" => style \n            if rotation = 0.0 then\n              yield \"x\" => string x\n              yield \"y\" => string y\n            else\n              yield \"x\" => \"0\"\n              yield \"y\" => \"0\"\n              yield \"transform\" => sprintf \"translate(%f,%f) rotate(%f)\" x y rotation ]\n        yield s?text attrs [ text t ]\n\n    | Combine ss ->\n        for s in ss do yield! renderSvg ctx s\n\n    | Ellipse((cx, cy),(rx, ry), style) ->\n        let attrs = \n          [ \"cx\" => string cx; \"cy\" => string cy;\n            \"rx\" => string rx; \"ry\" => string ry; \"style\" => style ]\n        yield s?ellipse attrs []\n\n    | Rect((x1, y1),(x2, y2), style) ->\n        let l, t = min x1 x2, min y1 y2\n        let w, h = abs (x1 - x2), abs (y1 - y2)\n        let attrs = \n          [ \"x\" => string l; \"y\" => string t; \"width\" => string w; \n            \"height\" => string h; \"style\" => style ]\n        yield s?rect attrs []\n\n    | Path(p, style) ->\n        let attrs = [ \"d\" => formatPath p; \"style\" => style ]\n        yield s?path attrs  [] }\n\n  let formatColor = function\n    | RGB(r,g,b) -> sprintf \"rgb(%d, %d, %d)\" r g b\n    | HTML(clr) -> clr\n\n  let formatNumber = function\n    | Integer n -> string n\n    | Percentage p -> string p + \"%\"\n\n  let rec formatStyle (defs:ResizeArray<_>) style = \n    let style, anim =\n      match style.Animation with \n      | Some (ms, ease, anim) ->\n          let id = \"anim_\" + System.Guid.NewGuid().ToString().Replace(\"-\", \"\")\n          let fromstyle = formatStyle defs { style with Animation = None }\n          let tostyle = formatStyle defs { anim style with Animation = None }\n          h?style [] [ text (sprintf \"@keyframes %s { from { %s } to { %s } }\" id fromstyle tostyle) ] |> defs.Add\n          anim style, sprintf \"animation: %s %dms %s; \" id ms ease\n      | None -> style, \"\"\n\n    anim +\n    ( String.concat \"\" [ for c in style.Cursor.Split(',') -> \"cursor:\" + c + \";\" ] ) +\n    ( \"font:\" + style.Font + \";\" ) +\n    ( let (so, clr) = style.StrokeColor \n      let (Pixels sw) = style.StrokeWidth\n      sprintf \"stroke-opacity:%f; stroke-width:%dpx; stroke:%s; \" so sw (formatColor clr) ) +\n    ( if Seq.isEmpty style.StrokeDashArray then \"\" \n      else \"stroke-dasharray:\" + String.concat \",\" (Seq.map formatNumber style.StrokeDashArray) + \";\" ) +\n    ( match style.Fill with\n      | LinearGradient(points) ->\n          let id = \"gradient_\" + System.Guid.NewGuid().ToString().Replace(\"-\", \"\")\n          s?linearGradient [\"id\"=>id] \n            [ for pt, (o, clr) in points ->\n                s?stop [\"offset\"=> string pt + \"%\"; \"stop-color\" => formatColor clr; \"stop-opacity\" => string o ] [] ]\n          |> defs.Add\n          sprintf \"fill:url(#%s)\" id\n      | Solid(fo, clr) ->\n          sprintf \"fill-opacity:%f; fill:%s; \" fo (formatColor clr) )\n\n// ------------------------------------------------------------------------------------------------\n// Calculating scales\n// ------------------------------------------------------------------------------------------------\n\nmodule Scales = \n  type ScaledShapeInner<[<Measure>] 'vx, [<Measure>] 'vy> = \n    | ScaledStyle of (Style -> Style) * ScaledShape<'vx, 'vy>\n    | ScaledOuterScale of option<Scale<'vx>> * option<Scale<'vy>> * ScaledShape<'vx, 'vy>\n    | ScaledText of Value<'vx> * Value<'vy> * VerticalAlign * HorizontalAlign * float * string    \n    | ScaledLine of (Value<'vx> * Value<'vy>)[]\n    | ScaledBubble of Value<'vx> * Value<'vy> * float * float\n    | ScaledShape of (Value<'vx> * Value<'vy>)[]\n    | ScaledLayered of ScaledShape<'vx, 'vy>[]\n    | ScaledStack of Orientation * ScaledShape<'vx, 'vy>[]\n    | ScaledInteractive of seq<EventHandler<'vx, 'vy>> * ScaledShape<'vx, 'vy>\n    | ScaledPadding of (float * float * float * float) * ScaledShape<'vx, 'vy>\n    | ScaledOffset of (float * float) * ScaledShape<'vx, 'vy>\n\n  and ScaledShape<[<Measure>] 'vx, [<Measure>] 'vy> =\n    Scaled of outer:(Scale<'vx> * Scale<'vy>) * inner:(Scale<'vx> * Scale<'vy>) * ScaledShapeInner<'vx, 'vy>\n\n  let getExtremes = function\n    | Continuous(l, h) -> COV l, COV h\n    | Categorical(vals) ->  CAR(vals.[0], 0.0), CAR(vals.[vals.Length-1], 1.0)\n\n  /// Given a range, return a new aligned range together with the magnitude  \n  let calculateMagnitudeAndRange (lo:float, hi:float) = \n    let magnitude = 10. ** round (log10 (hi - lo))\n    let magnitude = magnitude / 2.\n    magnitude, (floor (lo / magnitude) * magnitude, ceil (hi / magnitude) * magnitude)\n\n  /// Get number of decimal points to show for the given range\n  let decimalPoints range = \n    let magnitude, _ = calculateMagnitudeAndRange range\n    max 0. (ceil (-(log10 magnitude)))\n\n  /// Extend the given range to a nicely adjusted size\n  let adjustRange range = snd (calculateMagnitudeAndRange range)\n  let adjustRangeUnits (l:float<'u>,h:float<'u>) : float<'u> * float<'u> =\n    let l, h = adjustRange (unbox l, unbox h) in unbox l, unbox h\n\n  let toArray s = Array.ofSeq s // REVIEW: Hack to avoid Float64Array (which behaves oddly in Safari) see https://github.com/zloirock/core-js/issues/285\n\n  /// Generate points for a grid. Count specifies how many points to generate\n  /// (this is minimm - the result will be up to 5x more).\n  let generateSteps count k (lo, hi) = \n    let magnitude, (nlo, nhi) = calculateMagnitudeAndRange (lo, hi)\n    let dividers = [0.2; 0.5; 1.; 2.; 5.; 10.; 20.; 40.; 50.; 60.; 80.; 100.]\n    let magnitudes = dividers |> Seq.map (fun d -> magnitude / d)\n    let step = magnitudes |> Seq.filter (fun m -> (hi - lo) / m >= count) |> Seq.tryHead\n    let step = defaultArg step (magnitude / 100.)\n    seq { for v in nlo .. step * k .. nhi do\n            if v >= lo && v <= hi then yield v } |> toArray\n\n  let generateAxisSteps s =\n    match s with \n    | Continuous(CO l, CO h) ->\n        generateSteps 6. 1. (float l, float h) |> Array.map (fun f -> COV(CO (unbox f)))\n    | Categorical vs -> [| for CA s in vs -> CAR(CA s, 0.5) |]\n\n  let generateAxisLabels fmt (s:Scale<'v>) : (Value<'v> * string)[] =\n    let sunit = unbox<Scale<1>> s\n    match s with \n    | Continuous(CO l, CO h) ->\n        generateSteps 6. 2. (float l, float h) \n        |> Array.map (fun f -> COV(CO (unbox f)), fmt sunit (COV(CO(unbox<float<1>> f))))\n    | Categorical vs -> [| for v & CA s in vs -> CAR(CA s, 0.5), fmt sunit (CAR(CA s, 0.5)) |]\n\n  let unionScales s1 s2 =\n    match s1, s2 with\n    | Continuous(l1, h1), Continuous(l2, h2) -> Continuous(min l1 l2, max h1 h2)\n    | Categorical(v1), Categorical(v2) -> Categorical(Array.distinct (Array.append v1 v2))\n    | _ -> \n        failwith \"Cannot union continuous with categorical\"\n\n  // Replace scales in all immediately nested things that will\n  // share the same scale when combined via Layered\n  // (recursively over Interacitve & Layered with Line as leaf)\n\n  let rec replaceScales outer (Scaled(_, inner, shape) as scaled) =\n    match shape with\n    // Replace at the leafs\n    | ScaledLine _ \n    | ScaledText _\n    | ScaledBubble _\n    | ScaledShape _ -> Scaled(outer, inner, shape)\n    // Replace just top level scales\n    | ScaledOuterScale _ -> Scaled(outer, inner, shape)\n    // Propagate recursively\n    | ScaledOffset(d, shape) -> Scaled(outer, inner, ScaledOffset(d, replaceScales outer shape))\n    | ScaledStyle(f, shape) -> Scaled(outer, inner, ScaledStyle(f, replaceScales outer shape))\n    | ScaledPadding(pad, shape) -> Scaled(outer, inner, ScaledPadding(pad, replaceScales outer shape))\n    | ScaledInteractive(f, shape) -> Scaled(outer, inner, ScaledInteractive(f, replaceScales outer shape))\n    | ScaledLayered(shapes) -> Scaled(outer, inner, ScaledLayered(Array.map (replaceScales outer) shapes))\n    | ScaledStack(orient, shapes) -> Scaled(outer, inner, ScaledStack(orient, Array.map (replaceScales outer) shapes))\n\n  // From the leafs to the root, calculate the scales of\n  // everything (composing sales of leafs to get scale of root)\n\n  let calculateShapeScale vals = \n    let scales =\n      vals |> Array.fold (fun state value ->\n        match state, value with \n        | Choice1Of3(), COV(CO v) -> Choice2Of3([v])\n        | Choice2Of3(vs), COV(CO v) -> Choice2Of3(v::vs)\n        | Choice1Of3(), CAR(CA x, _) -> Choice3Of3([x])\n        | Choice3Of3(xs), CAR(CA x, _) -> Choice3Of3(x::xs)\n        | _ -> failwith \"Values with mismatching scales\") (Choice1Of3())\n    match scales with\n    | Choice1Of3() -> failwith \"No values for calculating a scale\"\n    | Choice2Of3(vs) -> Continuous (CO (List.min vs), CO (List.max vs))\n    | Choice3Of3(xs) -> Categorical (Array.distinct [| for x in List.rev xs -> CA x |])\n\n  let calculateShapeScales points = \n    let xs = points |> Array.map fst \n    let ys = points |> Array.map snd\n    calculateShapeScale xs, calculateShapeScale ys\n\n  // Always returns objects with the same inner and outer scales\n  // but outer scales can be replaced later by replaceScales\n  let rec calculateScales<[<Measure>] 'ux, [<Measure>] 'uy> style (shape:Shape<'ux, 'uy>) = \n    let calculateScalesStyle = calculateScales \n    let calculateScales = calculateScales style\n    match shape with\n    | OuterScale(sx, sy, shape) ->\n        let (Scaled((osx, osy), inner, _)) as scaled = calculateScales shape\n        let scales = defaultArg sx osx, defaultArg sy osy\n        Scaled(scales, inner, ScaledOuterScale(sx, sy, scaled))\n\n    | InnerScale(sx, sy, shape) ->\n        let (Scaled((asx, asy), _, shape)) = calculateScales shape\n        let scales = \n          (match sx with Some sx -> Continuous(sx) | _ -> asx), \n          (match sy with Some sy -> Continuous(sy) | _ -> asy) \n        Scaled(scales, scales, shape) |> replaceScales scales\n\n    | AutoScale(ax, ay, shape) ->\n        let (Scaled((asx, asy), _, shape)) = calculateScales shape\n        let autoScale = function\n          | Continuous(CO l, CO h) -> let l, h = adjustRangeUnits (l, h) in Continuous(CO l, CO h)\n          | scale -> scale\n        let scales = \n          ( if ax then autoScale asx else asx ),\n          ( if ay then autoScale asy else asy )\n        Scaled(scales, scales, shape) |> replaceScales scales    \n\n    | Offset(offs, shape) ->\n        let (Scaled(scales, _, shape)) = calculateScales shape\n        Scaled(scales, scales, ScaledOffset(offs, Scaled(scales, scales, shape)))\n\n    | Style(f, shape) ->\n        let (Scaled(scales, _, shape)) = calculateScalesStyle (f style) shape\n        Scaled(scales, scales, ScaledStyle(f, Scaled(scales, scales, shape)))\n\n    | Padding(pads, shape) ->\n        let (Scaled(scales, _, shape)) = calculateScales shape\n        Scaled(scales, scales, ScaledPadding(pads, Scaled(scales, scales, shape)))\n\n    | Bubble(x, y, rx, ry) ->\n        let makeSingletonScale = function COV(v) -> Continuous(v, v) | CAR(v, _) -> Categorical [| v |]\n        let scales = makeSingletonScale x, makeSingletonScale y\n        Scaled(scales, scales, ScaledBubble(x, y, rx, ry))\n\n    | Shape.Text(x, y, va, ha, r, t) ->\n        let makeSingletonScale = function COV(v) -> Continuous(v, v) | CAR(v, _) -> Categorical [| v |]\n        let scales = makeSingletonScale x, makeSingletonScale y\n        Scaled(scales, scales, ScaledText(x, y, va, ha, r, t))    \n\n    | Line line -> \n        let line = Seq.toArray line \n        let scales = calculateShapeScales line\n        Scaled(scales, scales, ScaledLine(line))\n\n(*\n    | Column(x, y) ->\n        let scales = Categorical [| x |], Continuous(CO 0.0<_>, y)\n        Scaled(scales, scales, ScaledColumn(x, y))\n\n    | Bar(x, y) ->\n        let scales = Continuous(CO 0.0<_>, x), Categorical [| y |]\n        Scaled(scales, scales, ScaledBar(x, y))\n\n    | Area area -> \n        let area = Seq.toArray area\n        let scales = calculateLineOrAreaScales area\n        Scaled(scales, scales, ScaledArea(area))\n*)\n    | Shape points -> \n        let points = Seq.toArray points\n        let scales = calculateShapeScales points\n        Scaled(scales, scales, ScaledShape(points))\n    \n    | Axes(showTop, showRight, showBottom, showLeft, shape) ->\n        let (Scaled(origScales & (sx, sy), _, _)) = calculateScales shape \n        let (lx, hx), (ly, hy) = getExtremes sx, getExtremes sy\n        \n        let LineStyle clr alpha width shape = \n          Style((fun s -> { s with Fill = Solid(1.0, HTML \"transparent\"); StrokeWidth = Pixels width; StrokeColor=alpha, HTML clr }), shape)\n        let FontStyle style shape = \n          Style((fun s -> { s with Font = style; Fill = Solid(1.0, HTML \"black\"); StrokeColor = 0.0, HTML \"transparent\" }), shape)\n\n        let shape = \n          Layered [ \n            for x in generateAxisSteps sx do\n              yield Line [x,ly; x,hy] |> LineStyle \"#e4e4e4\" 1.0 1\n            for y in generateAxisSteps sy do\n              yield Line [lx,y; hx,y] |> LineStyle \"#e4e4e4\" 1.0 1 \n            if showTop then\n              yield Line [lx,hy; hx,hy] |> LineStyle \"black\" 1.0 2\n              for x, l in generateAxisLabels style.FormatAxisXLabel sx do\n                yield Offset((0., -10.), Text(x, hy, VerticalAlign.Baseline, HorizontalAlign.Center, 0.0, l)) |> FontStyle \"9pt sans-serif\"\n            if showRight then\n              yield Line [hx,hy; hx,ly] |> LineStyle \"black\" 1.0 2\n              for y, l in generateAxisLabels style.FormatAxisYLabel sy do\n                yield Offset((10., 0.), Text(hx, y, VerticalAlign.Middle, HorizontalAlign.Start, 0.0, l)) |> FontStyle \"9pt sans-serif\"\n            if showBottom then\n              yield Line [lx,ly; hx,ly] |> LineStyle \"black\" 1.0 2\n              for x, l in generateAxisLabels style.FormatAxisXLabel sx do\n                yield Offset((0., 10.), Text(x, ly, VerticalAlign.Hanging, HorizontalAlign.Center, 0.0, l)) |> FontStyle \"9pt sans-serif\"\n            if showLeft then\n              yield Line [lx,hy; lx,ly] |> LineStyle \"black\" 1.0 2\n              for y, l in generateAxisLabels style.FormatAxisYLabel sy do\n                yield Offset((-10., 0.), Text(lx, y, VerticalAlign.Middle, HorizontalAlign.End, 0.0, l)) |> FontStyle \"9pt sans-serif\"\n            yield shape ] |> calculateScales\n\n        match shape with \n        | Scaled(_, _, ScaledLayered(shapes)) ->\n            let padding = \n              (if showTop then 30. else 0.), (if showRight then 50. else 0.),\n              (if showBottom then 30. else 0.), (if showLeft then 50. else 0.) \n            Scaled(origScales, origScales, \n              ScaledPadding(padding, \n                Scaled(origScales, origScales, \n                  ScaledLayered (Array.map (replaceScales origScales) shapes))))\n        | _ -> failwith \"calculateScales: processing layered shape did not return layered shape\"\n        \n    | Stack(orient, shapes) ->\n        let shapes = shapes |> Array.ofSeq\n        let scaled = shapes |> Array.map calculateScales \n        let sxs = scaled |> Array.map (fun (Scaled((sx, _), _, _)) -> sx)\n        let sys = scaled |> Array.map (fun (Scaled((_, sy), _, _)) -> sy)\n        let scales = (Array.reduce unionScales sxs, Array.reduce unionScales sys)\n        match orient, scales with \n        | Horizontal, (Continuous _, _) -> failwith \"Horizontal stacking of continuous axes is not supported\"\n        | Vertical, (_, Continuous _) -> failwith \"Vertical stacking of continuous axes is not supported\"\n        | _ -> ()\n        Scaled(scales, scales, ScaledStack(orient, scaled)) |> replaceScales scales \n\n    | Layered shapes ->\n        let shapes = shapes |> Array.ofSeq\n        let scaled = shapes |> Array.map calculateScales \n        let sxs = scaled |> Array.map (fun (Scaled((sx, _), _, _)) -> sx)\n        let sys = scaled |> Array.map (fun (Scaled((_, sy), _, _)) -> sy)\n        let scales = (Array.reduce unionScales sxs, Array.reduce unionScales sys)\n        Scaled(scales, scales, ScaledLayered scaled) |> replaceScales scales \n\n    | Interactive(f, shape) ->\n        let (Scaled(scales, _, shape)) = calculateScales shape\n        Scaled(scales, scales, ScaledInteractive(f, Scaled(scales, scales, shape)))\n\n// ------------------------------------------------------------------------------------------------\n// Calculate projections\n// ------------------------------------------------------------------------------------------------\n\nmodule Projections = \n  open Scales\n\n  type Projection<[<Measure>] 'vx, [<Measure>] 'vy, [<Measure>] 'ux, [<Measure>] 'uy> = \n    | Scale of (float<'ux> * float<'ux>) * (float<'uy> * float<'uy>)\n    \n    // given a projection that maps things to (0, 100), the floats\n    // specify subrange of the target domain, so i.e. specifying (0.2, 0.8) would\n    // result in all the vales being mapped to (20, 80)\n    | Rescale of (float * float) * (float * float) * Projection<'vx, 'vy, 'ux, 'uy> \n\n    | Padding of\n        // padding from top, right, bottom, left \n        padding:(float<'uy> * float<'ux> * float<'uy> * float<'ux>) * \n        // points on the scales relative to which the padding is calculated\n        // (essentially the size of the content around which padding is)\n        extremes:(Value<'vx> * Value<'vx> * Value<'vy> * Value<'vy>) * \n        Projection<'vx, 'vy, 'ux, 'uy>\n\n  type ProjectedShapeInner<[<Measure>] 'vx, [<Measure>] 'vy> = \n    | ProjectedStyle of (Style -> Style) * ProjectedShape<'vx, 'vy>\n    | ProjectedBubble of Value<'vx> * Value<'vy> * float * float\n    | ProjectedText of Value<'vx> * Value<'vy> * VerticalAlign * HorizontalAlign * float * string    \n    | ProjectedLine of (Value<'vx> * Value<'vy>)[]\n    | ProjectedShape of (Value<'vx> * Value<'vy>)[]\n    | ProjectedLayered of ProjectedShape<'vx, 'vy>[]\n    | ProjectedStack of Orientation * ProjectedShape<'vx, 'vy>[]\n    | ProjectedOffset of (float * float) * ProjectedShape<'vx, 'vy>\n    | ProjectedInteractive of seq<EventHandler<'vx, 'vy>> * ProjectedShape<'vx, 'vy>\n\n  /// Projection from values on the scales (specified) to pixels\n  and ProjectedShape<[<Measure>] 'vx, [<Measure>] 'vy> =\n    Projected of Projection<'vx, 'vy, 1, 1> * (Scale<'vx> * Scale<'vy>) * ProjectedShapeInner<'vx, 'vy>\n\n  let scaleOne (tlv:float<_>, thv:float<_>) scale coord = \n    match scale, coord with\n    | Categorical(vals), (CAR(CA v,f)) ->\n        let size = (thv - tlv) / float vals.Length\n        let i = vals |> Array.findIndex (fun (CA vv) -> v = vv)\n        let i = float i + f\n        CO(tlv + (i * size))\n    | Continuous(CO slv, CO shv), (COV (CO v)) ->\n        CO((v - slv) / (shv - slv) * (thv - tlv) + tlv)\n    | Categorical _, COV _ -> failwith \"Cannot project continuous value on a categorical scale.\"\n    | Continuous _, CAR _ -> failwith \"Cannot project categorical value on a continuous scale.\"\n\n  let rec project<[<Measure>] 'vx, [<Measure>] 'vy, [<Measure>] 'ux, [<Measure>] 'uy> \n      (sx:Scale<'vx>) (sy:Scale<'vy>) point (projection:Projection<'vx, 'vy, 'ux, 'uy>) : continuous<'ux> * continuous<'uy> = \n    match projection, point with\n    | Scale(tx, ty), (x, y) ->\n        scaleOne tx sx x, scaleOne ty sy y \n    \n    | Rescale((rlx, rhx), (rly, rhy), proj), point ->\n        let (lx, hx), (ly, hy) = getExtremes sx, getExtremes sy\n        let (CO x1, CO y1), (CO x2, CO y2) = project sx sy (lx, ly) proj, project sx sy (hx, hy) proj\n        let lx, hx, ly, hy = min x1 x2, max x1 x2, min y1 y2, max y1 y2\n\n        let (CO x, CO y) = project sx sy point proj \n        let nx = if lx = hx then x else lx + (hx - lx) * ((x - lx) / (hx - lx) * (rhx - rlx) + rlx)\n        let ny = if ly = hy then y else ly + (hy - ly) * ((y - ly) / (hy - ly) * (rhy - rly) + rly)\n        (CO nx, CO ny)\n\n    | Padding((t,r,b,l),(lx,hx,ly,hy),projection), _ ->\n        //let (lx, hx), (ly, hy) = getExtremes sx, getExtremes sy\n        let (CO x1, CO y1) = project sx sy (lx, ly) projection\n        let (CO x2, CO y2) = project sx sy (hx, hy) projection\n        let lx, hx, ly, hy = min x1 x2, max x1 x2, min y1 y2, max y1 y2\n\n        let (CO x, CO y) = project sx sy point projection\n\n        // Assuming the result is in pixels...\n        let nx = if lx = hx then x else lx + l + (hx - lx - l - r) / (hx - lx) * (x - lx)\n        let ny = if ly = hy then y else ly + t + (hy - ly - t - b) / (hy - ly) * (y - ly)\n        (CO nx, CO ny)\n    \n\n  // inverse operation to scaleOne\n  let scaleOneInv (tlv:float<'u>, thv:float<'u>) (scale:Scale<'v>) (coord:continuous<'u>) : Value<'v> =  \n    match scale, coord with\n    | Continuous(CO slv, CO shv), (CO v) ->\n        COV (CO((v - tlv) / (thv - tlv) * (shv - slv) + slv))\n    | Categorical(cats), (CO v) ->\n        let size = (thv - tlv) / float cats.Length\n        let i = floor (v / size)\n        let f = (v / size) - i\n        let i = if size < 0.<_> then (float cats.Length) + i else i // Negative when thv < tlv\n        if int i < 0 || int i >= cats.Length then CAR(CA \"<outside-of-range>\", f)\n        else CAR(cats.[int i], f)\n\n   // project:    scales<v> * point<v> * proj<v -> u> -> point<u>   // v = -1 .. 1     u = 0px .. 100px\n   // projectInv: scales<v> * point<u> * proj<v -> u> -> point<v>\n\n  let rec invertProj proj = \n    match proj with\n    | Rescale(rx, ry, Padding(p, ex, proj)) -> Padding(p, ex, Rescale(rx, ry, proj))\n    | Padding(p, ex, Rescale(rx, ry, proj)) -> Rescale(rx, ry, Padding(p, ex, proj))\n    | _ -> proj\n\n\n  let rec projectInv<[<Measure>] 'vx, [<Measure>] 'vy, [<Measure>] 'ux, [<Measure>] 'uy> \n      ((sx, sy):Scale<'vx> * Scale<'vy>) (point:continuous<'ux> * continuous<'uy>) \n      (projection:Projection<'vx, 'vy, 'ux, 'uy>) : Value<'vx> * Value<'vy> = \n    \n    match projection, point with\n    | Rescale((rlx, rhx), (rly, rhy), projection), (CO x, CO y) ->\n        let (lx, hx), (ly, hy) = getExtremes sx, getExtremes sy\n        let (CO x1, CO y1), (CO x2, CO y2) = project sx sy (lx, ly) projection, project sx sy (hx, hy) projection\n        let lx, hx, ly, hy = min x1 x2, max x1 x2, min y1 y2, max y1 y2\n\n        // Inverse of project\n        let (CO ox, CO oy) = point \n        let nx = lx + ((ox - lx) / (hx - lx) - rlx) / (rhx - rlx) * (hx - lx)\n        let ny = ly + ((oy - ly) / (hy - ly) - rly) / (rhy - rly) * (hy - ly)\n        projectInv (sx, sy) (CO nx, CO ny) projection\n\n    | Padding((t, r, b, l), (lx, hx, ly, hy), projection), (CO x, CO y) ->\n        let (CO x1, CO y1) = project sx sy (lx, ly) projection\n        let (CO x2, CO y2) = project sx sy (hx, hy) projection\n        let lx, hx, ly, hy = min x1 x2, max x1 x2, min y1 y2, max y1 y2\n        \n        // Imagine point is in 20px .. 60px, calculate equivalent point in 0px .. 100px (add padding)\n        let (CO ox, CO oy) = point \n        //let nx = (ox - l) / (hx - lx - l - r) * (hx - lx)\n        //let ny = (oy - t) / (hy - ly - t - b) * (hy - ly)\n        let nx = (ox - lx - l) / (hx - lx - l - r) * (hx - lx) + lx\n        let ny = (oy - ly - t) / (hy - ly - t - b) * (hy - ly) + ly\n        projectInv (sx, sy) (CO nx, CO ny) projection\n\n    | Scale(tx, ty), (x, y) ->\n        scaleOneInv tx sx x, scaleOneInv ty sy y \n\n\n  let rec calculateProjections<[<Measure>] 'ux, [<Measure>] 'uy> (shape:ScaledShape<'ux, 'uy>) projection = \n    match shape with\n    | Scaled(scales, _, ScaledOffset(offs, shape)) ->\n        Projected(projection, scales, ProjectedOffset(offs, calculateProjections shape projection))\n\n    | Scaled(scales, _, ScaledStyle(style, shape)) ->\n        Projected(projection, scales, ProjectedStyle(style, calculateProjections shape projection))\n\n    | Scaled((sx, sy), _, ScaledOuterScale(osx, osy, shape)) ->\n        //let pinner = Projection\n\n        // projection + shape scales determines mapping from shape scales to pixel space\n        // get range of osx/osy within scales and transform projection so that it only maps on this subrange\n        let adaptProjection os s = \n          match os with\n          | Some(o) ->\n              let ls, hs = getExtremes s\n              let ls', hs' = scaleOne (0.0, 1.0) s ls, scaleOne (0.0, 1.0) s hs\n              let lo, ho = getExtremes o\n              let (CO lo'), (CO ho') = scaleOne (0.0, 1.0) s lo, scaleOne (0.0, 1.0) s ho\n              (lo', ho')\n          | _ -> \n              (0.0, 1.0)\n\n        let px = adaptProjection osx sx\n        let py = adaptProjection osy sy \n        let projection = Rescale(px, py, projection)\n\n        let (Projected(pbody, scales, nested)) = calculateProjections shape projection\n        Projected(pbody, scales, nested)\n\n    | Scaled(scales, _, ScaledLine line) -> \n        Projected(projection, scales, ProjectedLine line)\n\n    | Scaled(scales, _, ScaledText(x, y, va, ha, r, t)) -> \n        Projected(projection, scales, ProjectedText(x, y, va, ha, r, t))\n\n    | Scaled(scales, _, ScaledBubble(x, y, rx, ry)) -> \n        Projected(projection, scales, ProjectedBubble(x, y, rx, ry))\n\n    | Scaled(scales, _, ScaledShape points) -> \n        Projected(projection, scales, ProjectedShape points)\n\n    | Scaled(_, _, ScaledPadding((t,r,b,l), shape)) ->\n        let (lx, hx), (ly, hy) = \n          let (Scaled(_, (sxinner, syinner), _)) = shape \n          getExtremes sxinner, getExtremes syinner\n        let ppad = Padding((t, r, b, l), (lx, hx, ly, hy), projection)\n        calculateProjections shape ppad\n\n    | Scaled(scales, _, ScaledStack(orient, shapes)) ->\n        Projected(projection, scales, ProjectedStack(orient, shapes |> Array.map (fun s -> calculateProjections s projection)))\n        \n    | Scaled(scales, _, ScaledLayered shapes) ->\n        Projected(projection, scales, ProjectedLayered(shapes |> Array.map (fun s -> calculateProjections s projection)))\n\n    | Scaled(scales, _, ScaledInteractive(f, shape)) ->\n        Projected(projection, scales, ProjectedInteractive(f, calculateProjections shape projection))\n\n// ------------------------------------------------------------------------------------------------\n// Drawing\n// ------------------------------------------------------------------------------------------------\n\nmodule Drawing = \n  open Svg\n  open Scales\n  open Projections\n\n  type DrawingContext = \n    { Style : Style\n      Definitions : ResizeArray<DomNode> }\n\n  let rec hideFill style = \n    { style with Fill = Solid(0.0, RGB(0, 0, 0)); Animation = match style.Animation with Some(n,e,f) -> Some(n,e,f >> hideFill) | _ -> None }\n  let rec hideStroke style = \n    { style with StrokeColor = (0.0, snd style.StrokeColor); Animation = match style.Animation with Some(n,e,f) -> Some(n,e,f >> hideStroke) | _ -> None }\n\n  let rec drawShape<[<Measure>] 'ux, [<Measure>] 'uy> ctx (shape:ProjectedShape<'ux, 'uy>) = \n    let (Projected(projection, (sx, sy), shape)) = shape\n\n    let projectCont (x, y) = \n      match project sx sy (x, y) projection with\n      | (CO x), (CO y) -> x, y\n    let projectContCov (x, y) = projectCont (COV x, COV y)\n\n    match shape, (sx, sy) with\n    | ProjectedOffset((dx, dy), shape), _ ->\n        drawShape ctx shape\n        |> mapSvg (function \n            | Text((x, y), t, r, s) -> Text((x + dx, y + dy), t, r, s)\n            | Path(seg, s) -> Path(Array.map (function \n                MoveTo(x, y) -> MoveTo(x + dx, y + dy) | LineTo(x, y) -> LineTo(x + dx, y + dy)) seg, s)\n            | s -> s)\n\n    | ProjectedStyle(sf, shape), _ ->\n        drawShape { ctx with Style =  sf ctx.Style } shape\n\n    | ProjectedText(x, y, va, ha, r, t), _ -> \n        let va = match va with Baseline -> \"baseline\" | Hanging -> \"hanging\" | Middle -> \"middle\"\n        let ha = match ha with Start -> \"start\" | Center -> \"middle\" | End -> \"end\"\n        let xy = projectCont (x, y)\n        Text(xy, t, r, sprintf \"alignment-baseline:%s; text-anchor:%s;\" va ha + formatStyle ctx.Definitions ctx.Style)\n\n    | ProjectedBubble(x, y, rx, ry), _ -> \n        Ellipse(projectCont (x, y), (rx, ry), formatStyle ctx.Definitions ctx.Style)\n\n    | ProjectedLine line, _ -> \n        let path = \n          [ yield MoveTo(projectCont (Seq.head line)) \n            for pt in Seq.skip 1 line do yield LineTo (projectCont pt) ]\n          |> Array.ofList\n        Path(path, formatStyle ctx.Definitions (hideFill ctx.Style))\n\n    | ProjectedShape(points), _ -> \n        let path = \n          [| yield MoveTo(projectCont (points.[0]))\n             for pt in Seq.skip 1 points do yield LineTo(projectCont pt) \n             yield LineTo(projectCont (points.[0])) |]\n        Path(path, formatStyle ctx.Definitions (hideStroke ctx.Style)) \n\n    | ProjectedLayered shapes, _ ->\n        Combine(shapes |> Array.map (fun s -> drawShape ctx s))\n\n    | ProjectedStack(_, shapes), _ ->\n        Combine(shapes |> Array.map (fun s -> drawShape ctx s))\n\n    | ProjectedInteractive(f, shape), _ ->\n        drawShape ctx shape\n\n// ------------------------------------------------------------------------------------------------\n// Event handling\n// ------------------------------------------------------------------------------------------------\n\nmodule Events = \n  open Scales\n  open Projections\n\n  type MouseEventKind = Click | Move | Up | Down\n  type TouchEventKind = Move | Start \n\n  type InteractiveEvent<[<Measure>] 'vx, [<Measure>] 'vy> = \n    | MouseEvent of MouseEventKind * (Value<'vx> * Value<'vy>)    \n    | TouchEvent of TouchEventKind * (Value<'vx> * Value<'vy>)    \n    | TouchEnd\n    | MouseLeave\n\n  let projectEvent scales projection event =\n    match event with\n    | MouseEvent(kind, (COV x, COV y)) -> MouseEvent(kind, projectInv scales (x, y) (invertProj projection))\n    | TouchEvent(kind, (COV x, COV y)) -> TouchEvent(kind, projectInv scales (x, y) (invertProj projection))\n    | MouseEvent _\n    | TouchEvent _ -> failwith \"TODO: projectEvent - not continuous\"\n    | TouchEnd -> TouchEnd\n    | MouseLeave -> MouseLeave\n\n  let inScale s v = \n    match s, v with\n    | Continuous(CO l, CO h), COV(CO v) -> v >= min l h && v <= max l h\n    | Categorical(cats), CAR(v, _) -> cats |> Seq.exists ((=) v)\n    | Continuous _, CAR _ -> failwith \"inScale: Cannot test if categorical value is in continuous scale\"\n    | Categorical _, COV _ -> failwith \"inScale: Cannot test if continuous value is in categorical scale\"\n\n  let inScales (sx, sy) event =\n    match event with\n    | MouseLeave -> true\n    | TouchEnd -> true\n    | MouseEvent(_, (x, y)) \n    | TouchEvent(_, (x, y)) -> inScale sx x && inScale sy y\n\n  let rec triggerEvent<[<Measure>] 'ux, [<Measure>] 'uy> (shape:ProjectedShape<'ux, 'uy>) (jse:Event) (event:InteractiveEvent<1,1>) = \n    let (Projected(projection, scales, shape)) = shape\n    match shape with\n    | ProjectedLine _\n    | ProjectedText _\n    | ProjectedBubble _\n    | ProjectedShape _ -> ()\n    | ProjectedStyle(_, shape)\n    | ProjectedOffset(_, shape) -> triggerEvent shape jse event\n    | ProjectedStack(_, shapes)\n    | ProjectedLayered shapes -> for shape in shapes do triggerEvent shape jse event\n    | ProjectedInteractive(handlers, shape) ->\n        let localEvent = projectEvent scales projection event\n        if inScales scales localEvent then \n          for handler in handlers do \n            match localEvent, handler with\n            | MouseEvent(MouseEventKind.Click, pt), EventHandler.Click(f) \n            | MouseEvent(MouseEventKind.Move, pt), MouseMove(f) \n            | MouseEvent(MouseEventKind.Up, pt), MouseUp(f) \n            | MouseEvent(MouseEventKind.Down, pt), MouseDown(f) -> \n                if jse <> null then jse.preventDefault()\n                f (unbox jse) pt\n            | TouchEvent(TouchEventKind.Move, pt), TouchMove(f) \n            | TouchEvent(TouchEventKind.Start, pt), TouchStart(f) ->\n                if jse <> null then jse.preventDefault()\n                f (unbox jse) pt\n            | TouchEnd, EventHandler.TouchEnd f -> f (unbox jse) \n            | MouseLeave, EventHandler.MouseLeave f -> f (unbox jse) \n            | MouseLeave, _ \n            | TouchEnd, _\n            | TouchEvent(_, _), _  \n            | MouseEvent(_, _), _  -> ()\n\n        triggerEvent shape jse event\n\n// ------------------------------------------------------------------------------------------------\n// Integration\n// ------------------------------------------------------------------------------------------------\n\nmodule Derived = \n  let Area(line) = Shape <| seq {\n    let line = Array.ofSeq line\n    let firstX, lastX = fst line.[0], fst line.[line.Length - 1]\n    yield firstX, COV (CO 0.0)\n    yield! line\n    yield lastX, COV (CO 0.0)\n    yield firstX, COV (CO 0.0) }\n\n  let VArea(line) = Shape <| seq {\n    let line = Array.ofSeq line\n    let firstY, lastY = snd line.[0], snd line.[line.Length - 1]\n    yield COV (CO 0.0), firstY\n    yield! line\n    yield COV (CO 0.0), lastY\n    yield COV (CO 0.0), firstY }\n\n  let VShiftedArea(offs, line) = Shape <| seq {\n    let line = Array.ofSeq line\n    let firstY, lastY = snd line.[0], snd line.[line.Length - 1]\n    yield COV (CO offs), firstY\n    yield! line\n    yield COV (CO offs), lastY\n    yield COV (CO offs), firstY }\n\n  let Bar(x, y) = Shape <| seq {\n    yield COV x, CAR(y, 0.0)\n    yield COV x, CAR(y, 1.0)\n    yield COV (CO 0.0), CAR(y, 1.0)\n    yield COV (CO 0.0), CAR(y, 0.0) }\n    \n  let Column(x, y) = Shape <| seq {\n    yield CAR(x, 0.0), COV y\n    yield CAR(x, 1.0), COV y\n    yield CAR(x, 1.0), COV (CO 0.0)\n    yield CAR(x, 0.0), COV (CO 0.0) }\n\nmodule Compost = \n  open Scales\n  open Projections\n  open Drawing\n  open Events\n  open Svg\n    \n  let defaultFormat scale value = \n    match value with\n    | CAR(CA s, _) -> s\n    | COV(CO v) ->\n        let dec = \n          match scale with\n          | Continuous(CO l, CO h) -> decimalPoints (unbox l, unbox h)\n          | _ -> 0.\n        Common.niceNumber (System.Math.Round(unbox<float> v, int dec)) (int dec)    \n\n  let defstyle = \n    { Fill = Solid(1.0, RGB(196, 196, 196))\n      StrokeColor = (1.0, RGB(256, 0, 0))\n      StrokeDashArray = []\n      StrokeWidth = Pixels 2\n      Animation = None \n      Cursor = \"default\"\n      Font = \"10pt sans-serif\"\n      FormatAxisXLabel = defaultFormat\n      FormatAxisYLabel = defaultFormat }\n\n  let rec mapShape f (Projected(pr, sc, s)) =\n    let s = \n      match s with\n      | ProjectedStyle(sf, s) -> (ProjectedStyle(sf, mapShape f s))\n      | ProjectedStack(o, sx) -> (ProjectedStack(o, Array.map (mapShape f) sx))\n      | ProjectedLayered(sx) -> (ProjectedLayered(Array.map (mapShape f) sx))\n      | ProjectedInteractive(e, s) -> (ProjectedInteractive(e, mapShape f s))\n      | ProjectedOffset(o, s) -> (ProjectedOffset(o, mapShape f s))\n      | (ProjectedBubble _ as s) | (ProjectedLine _ as s) | (ProjectedShape _ as s) | (ProjectedText _  as s) -> s \n    Projected(pr, sc, f s)\n\n  let createSvg revX revY (width, height) viz = \n    let scaled = calculateScales defstyle viz\n    let master = Scale((if revX then (width, 0.0) else (0.0, width)), (if revY then (0.0, height) else (height, 0.0)))\n    let projected = calculateProjections scaled master\n    let projected = \n      if not revX && not revY then projected else\n        projected |> mapShape (fun s -> \n          match s with\n          | ProjectedText(x, y, v, h, r, s) -> \n              let v = match v with VerticalAlign.Baseline when revY -> VerticalAlign.Hanging | VerticalAlign.Hanging when revY -> VerticalAlign.Baseline | v -> v\n              let h = match h with HorizontalAlign.Start when revX -> HorizontalAlign.End | HorizontalAlign.End when revX -> HorizontalAlign.Start | h -> h\n              ProjectedText(x, y, v, h, r, s)\n          | ProjectedOffset((ox, oy), s) ->               \n              ProjectedOffset(((if revX then -ox else ox), (if revY then -oy else oy)), s) \n          | s -> s)\n\n\n    let defs = ResizeArray<_>()\n    let svg = drawShape { Definitions = defs; Style = defstyle } projected\n\n    let getRelativeLocation el x y =\n      let rec getOffset (parent:HTMLElement) (x, y) = \n        if parent = null then (x, y)\n        else getOffset (unbox parent.offsetParent) (x-parent.offsetLeft, y-parent.offsetTop)\n      let rec getParent (parent:HTMLElement) = \n        // Safari: Skip over all the elements nested inside <svg> as they are weird\n        // IE: Use parentNode when parentElement is not available (inside <svg>?)\n        if parent.namespaceURI = \"http://www.w3.org/2000/svg\" && parent.tagName <> \"svg\" then\n          if parent.parentElement <> null then getParent parent.parentElement\n          else getParent (unbox parent.parentNode)\n        elif parent.offsetParent <> null then parent \n        elif parent.parentElement <> null then getParent parent.parentElement\n        else getParent (unbox parent.parentNode)\n      getOffset (getParent el) (x, y)\n    \n    let mouseHandler kind el (evt:Event) =\n      let evt = evt :?> MouseEvent\n      let x, y = getRelativeLocation el evt.pageX evt.pageY\n      triggerEvent projected evt (MouseEvent(kind, (COV(CO x), COV(CO y))))\n\n    let touchHandler kind el (evt:Event) =\n      let evt = evt :?> TouchEvent\n      let touch = evt.touches.[0]\n      let x, y = getRelativeLocation el touch.pageX touch.pageY\n      triggerEvent projected evt (TouchEvent(kind, (COV(CO x), COV(CO y))))\n\n    let counter = ref 0\n    let renderCtx = \n      { Definitions = defs }\n\n    h?div [\"style\"=>sprintf \"width:%dpx;height:%dpx;margin:0px auto 0px auto\" (int width) (int height)] [\n      s?svg [\n          \"width\"=>string (int width); \"height\"=> string(int height); \n          \"click\" =!> mouseHandler MouseEventKind.Click\n          \"mousemove\" =!> mouseHandler MouseEventKind.Move\n          \"mousedown\" =!> mouseHandler MouseEventKind.Down\n          \"mouseup\" =!> mouseHandler MouseEventKind.Up\n          \"mouseleave\" =!> fun _ evt -> triggerEvent projected evt MouseLeave\n          \"touchmove\" =!> touchHandler TouchEventKind.Move\n          \"touchstart\" =!> touchHandler TouchEventKind.Start\n          \"touchend\" =!> fun _ evt -> triggerEvent projected evt TouchEnd\n        ] [\n          let body = renderSvg renderCtx svg |> Array.ofSeq\n          yield! defs\n          yield! body\n        ]\n    ]","﻿namespace TheGamma.Interactive\n\nopen Fable.Core\nopen Fable.Helpers\nopen Fable.Import.Browser\n\nopen TheGamma.Common\nopen TheGamma.Series\nopen TheGamma.Html\nopen TheGamma.Interactive.Compost\nopen TheGamma.Interactive.Compost.Derived\n\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n// ------------------------------------------------------------------------------------------------\n// Chart options\n// ------------------------------------------------------------------------------------------------\n\ntype AxisOptions = \n  { minValue : obj option\n    maxValue : obj option \n    label : string option\n    labelOffset : float option \n    labelMinimalSize : float option }\n  static member Default = { minValue = None; maxValue = None; label = None; labelOffset = None; labelMinimalSize = None }\n\ntype LegendOptions = \n  { position : string }\n  static member Default = { position = \"none\" }\n\ntype ChartOptions =\n  { size : float option * float option \n    xAxis : AxisOptions\n    yAxis : AxisOptions \n    title : string option\n    legend : LegendOptions\n    emptyMessage : string option } \n  static member Default = \n    { size = None, None; title = None\n      legend = LegendOptions.Default\n      xAxis = AxisOptions.Default\n      yAxis = AxisOptions.Default\n      emptyMessage = None }\n\n// ------------------------------------------------------------------------------------------------\n// Rendering helpers\n// ------------------------------------------------------------------------------------------------\n\nmodule InteractiveHelpers =\n  let showAppAsync outputId opts (data:series<_, _>) initial render update = async { \n    let id = \"container\" + System.Guid.NewGuid().ToString().Replace(\"-\", \"\")\n    h?div [\"id\" => id] [ ] |> renderTo (document.getElementById(outputId))        \n\n    // Get data & wait until the element is created\n    let! data = data.data |> Async.AwaitFuture \n    let mutable i = 10\n    while i > 0 && document.getElementById(id) = null do\n      do! Async.Sleep(10)\n      i <- i - 1\n    let element = document.getElementById(id)\n    if data.Length = 0 && opts.emptyMessage.IsSome then\n      h?p [\"class\"=>\"placeholder\"] [ text opts.emptyMessage.Value ] |> renderTo element\n    else\n      let size = \n        ( match opts.size with Some w, _ -> w | _ -> element.clientWidth ),\n        ( match opts.size with _, Some h -> h | _ -> max 400. (element.clientWidth / 2.) ) \n      do\n        try\n          createVirtualDomApp outputId (initial data) (render data size) (update data)\n        with e ->\n          Log.exn(\"GUI\", \"Interactive rendering failed: %O\", e) } \n\n  let showApp outputId opts data initial render update = \n    showAppAsync outputId opts data initial render update |> Async.StartImmediate \n\n  let showStaticAppAsync outputId opts data render = \n    showAppAsync outputId opts data\n      (fun _ -> ())\n      (fun _ size _ _ -> render size)\n      (fun _ _ _ -> ())\n\n  let showStaticApp outputId opts data render = \n    showApp outputId opts data\n      (fun _ -> ())\n      (fun data size _ _ -> render data size)\n      (fun _ _ _ -> ())\n\n  let calclateMax maxValue data = \n    let max = match maxValue with Some m -> m | _ -> Seq.max (Seq.map snd data)\n    snd (Scales.adjustRange (0.0, max))\n\n  let createLogger id logger = \n    match logger with\n    | Some log -> fun event data -> \n        JsInterop.createObj [\n          \"event\", box event\n          \"id\", box id\n          \"data\", JsInterop.createObj data\n        ] |> log\n    | None -> fun _ _ -> () \n\nmodule CompostHelpers = \n  let (|Cont|) = function COV(CO x) -> x | _ -> failwith \"Expected continuous value\"\n  let (|Cat|) = function CAR(CA x, r) -> x, r | _ -> failwith \"Expected categorical value\"\n  let Cont x = COV(CO x)\n  let Cat(x, r) = CAR(CA x, r)\n  let orElse (a:option<_>) b = if a.IsSome then a else b\n  let vega10 = [| \"#1f77b4\"; \"#ff7f0e\"; \"#2ca02c\"; \"#d62728\"; \"#9467bd\"; \"#8c564b\"; \"#e377c2\"; \"#7f7f7f\"; \"#bcbd22\"; \"#17becf\" |]\n  let infinitely s = \n    if Seq.isEmpty s then seq { while true do yield \"black\" }\n    else seq { while true do yield! s }\n\nopen CompostHelpers\n\n// ------------------------------------------------------------------------------------------------\n// Ordinary charts\n// ------------------------------------------------------------------------------------------------\n\nmodule Internal = \n\n  let prevAndNext (data:_[]) = \n    if data.Length = 1 then\n      [| data.[0], data.[0], data.[0] |]\n    else \n      let res = ResizeArray<_> [| data.[0], data.[0], data.[1] |]\n      for x in 1 .. data.Length - 2 do res.Add (data.[x-1], data.[x], data.[x+1])\n      res.Add(data.[data.Length - 2], data.[data.Length - 1], data.[data.Length - 1])\n      res.ToArray()\n\n  let inline interpolate (x1, y1) (x2, y2) x = \n    if x1 = x2 then [||] else \n    [| x, y1 + (y2 - y1) * (x - x1) / (x2 - x1) |]\n\n  let inline interpolateAt x points = \n    let p, n = points |> Seq.pairwise |> Seq.find (fun ((p, _), (n, _)) -> p <= x && n >= x)\n    interpolate p n x |> Seq.head\n\n  let inline cropLine points lx hx = \n    let inRange = \n      points \n      |> prevAndNext \n      |> Array.filter (fun (p, (x, y), n) -> x > lx && x < hx)\n    if inRange.Length = 0 then [||] else\n    let (s1, s2, _), (_, e1, e2) = inRange.[0], inRange.[inRange.Length-1]\n    let core = inRange |> Array.map (fun (_, v, _) -> v)\n    Array.concat [interpolate s1 s2 lx; core; interpolate e1 e2 hx]\n\n  // Helpers\n  let arrayMap f s = Array.map f s // REVIEW: Hack to avoid Float64Array (which behaves oddly in Safari) see: https://github.com/zloirock/core-js/issues/285\n\n  let parseColor (clr:string) = \n    let r = parseInt (clr.Substring(1,2)) 16\n    let g = parseInt (clr.Substring(3,2)) 16\n    let b = parseInt (clr.Substring(5,2)) 16\n    float r, float g, float b\n\n  let formatColor (r, g, b) = \n    let fi n = (formatInt (int n) 16).PadLeft(2, '0')\n    \"#\" + fi r + fi g + fi b\n\n  let mapColor f (clr:string) = \n    formatColor (f (parseColor clr))\n\n  type ScalePoints = \n    { Minimum : Value<1>; Maximum : Value<1>; Middle : Value<1>; PixelSize : float }\n\n  type ChartContext = \n    { Chart : Shape<1, 1> \n      Width : float\n      Height : float\n      XPoints : ScalePoints \n      YPoints : ScalePoints\n      XData : obj[]\n      YData : obj[]\n      Padding : float * float * float * float\n      ChartOptions : ChartOptions }\n\n  let calculateScales (width, height) chart = \n    let (Scales.Scaled((sx, sy), _, _)) as scaled = Scales.calculateScales Compost.defstyle chart\n    let getPoints = function\n      | Continuous(CO lo, CO hi) as scale -> \n        // Calculate projection and calculate pixel size\n        let master = Projections.Scale((0.0, width), (height, 0.0))\n        let (Projections.Projected(projection, _, _)) = Projections.calculateProjections scaled master\n        let (Cont z, _) = Projections.projectInv (scale, scale) (CO 100.0, CO 0.0) projection\n        let (Cont o, _) = Projections.projectInv (scale, scale) (CO 101.0, CO 0.0) projection\n        { Minimum = COV(CO lo); Maximum = COV(CO hi); Middle = COV(CO ((hi + lo) / 2.)); PixelSize = abs (z - o) }\n      | Categorical(vals) -> \n        { Minimum = CAR(vals.[0], 0.0); Maximum = CAR(vals.[vals.Length-1], 1.0)\n          Middle = if vals.Length % 2 = 1 then CAR(vals.[vals.Length/2], 0.5)\n                   else CAR(vals.[vals.Length/2], 0.0)\n          PixelSize = 0.0 } // TODO: This should probably not be allowed\n    getPoints sx, getPoints sy\n\n  let initChart size xdata ydata options chart =\n    let px, py = calculateScales size chart \n    { Chart = chart; XPoints = px; YPoints = py; Padding = (20., 20., 20., 20.)\n      XData = xdata; YData = ydata; ChartOptions = options \n      Width = fst size; Height = snd size }\n\n  let applyStyle f chart = \n    Style(f, chart)\n\n  let applyStyleCtx f ctx = \n    { ctx with Chart = Style(f, ctx.Chart) }\n\n  let applyInteractive e chart = \n    Interactive(e, chart)\n\n  let applyInteractiveCtx e ctx = \n    { ctx with Chart = Interactive(e ctx, ctx.Chart) }\n\n  /// Add InnerScale (when scales are set explicitly) and AutoScale for the rest\n  /// Recalculate points after changing the scales to make sure they're up to date\n  let applyScales ctx = \n    let getInnerScale axis sp = \n      match sp with\n      | _ when axis.minValue = None && axis.maxValue = None -> None \n      | { Minimum = COV(CO lo); Maximum = COV(CO hi) } ->\n          let amin = FSharp.Core.Option.map dateOrNumberAsNumber axis.minValue\n          let amax = FSharp.Core.Option.map dateOrNumberAsNumber axis.maxValue\n          let lo, hi = defaultArg amin lo, defaultArg amax hi\n          Some(CO(unbox lo), CO(unbox hi))\n      | _ -> None\n    let sx = getInnerScale ctx.ChartOptions.xAxis ctx.XPoints\n    let sy = getInnerScale ctx.ChartOptions.yAxis ctx.YPoints\n    let chart = AutoScale(sx.IsNone, sy.IsNone, InnerScale(sx, sy, ctx.Chart))\n    let xp, yp = calculateScales (ctx.Width, ctx.Height) chart \n    { ctx with Chart = chart; XPoints = xp; YPoints = yp }\n\n  /// \n  let applyAxes tlab rlab blab llab ctx = \n    let style data =\n      let isDate = data |> Seq.exists isDate\n      if isDate then\n        let values = data |> arrayMap dateOrNumberAsNumber\n        let lo, hi = asDate(Seq.min values), asDate(Seq.max values)\n        if (hi - lo).TotalDays <= 1. then fun _ (Cont v) -> formatTime(asDate(v))\n        else fun _ (Cont v) -> formatDate(asDate(v))\n      else Compost.defaultFormat\n    let chart =\n      Axes(tlab, rlab, blab, llab, ctx.Chart) |> applyStyle (fun s -> \n        { s with FormatAxisXLabel = style ctx.XData; FormatAxisYLabel = style ctx.YData })\n    { ctx with Chart = Padding(ctx.Padding, chart) }    \n\n\n  let applyLegend (width, height) labels ctx =     \n    let labels = Array.ofSeq labels\n\n    match ctx.ChartOptions.legend.position, width > 600. with\n    | \"right\", _ | \"auto\", true -> \n        let ptop, _, _, _ = ctx.Padding\n        let labs = \n          InnerScale(Some(CO 0., CO 100.), None, \n              Layered\n                [ for clr, lbl in labels do\n                    let style clr = applyStyle (fun s -> { s with Font = \"9pt Roboto,sans-serif\"; Fill=Solid(1., HTML clr); StrokeColor=(0.0, RGB(0,0,0)) })\n                    yield Padding((4., 0., 4., 0.), Bar(CO 6., CA lbl)) |> style clr\n                    yield Text(COV(CO 8.), CAR(CA lbl, 0.5), VerticalAlign.Middle, HorizontalAlign.Start, 0., lbl) |> style \"black\"\n                ] ) \n        let lwid, lhgt = (width - 250.) / width, (ptop + float labels.Length * 30.) / height    \n        let chart = \n          Layered\n            [ OuterScale(Some(Continuous(CO 0.0, CO lwid)), Some(Continuous(CO 0.0, CO 1.0)), ctx.Chart)\n              OuterScale(Some(Continuous(CO lwid, CO 1.0)), Some(Continuous(CO 0.0, CO lhgt)), Padding((ptop, 0., 0., 20.), labs)) ]\n        { ctx with Chart = chart }\n\n    | \"bottom\", _ | \"auto\", false -> \n        let _, pright, _, pleft = ctx.Padding\n        let labs = \n          InnerScale(Some(CO 0., CO 100.), None, \n              Layered\n                [ for clr, lbl in labels do\n                    let style clr = applyStyle (fun s -> { s with Font = \"9pt Roboto,sans-serif\"; Fill=Solid(1., HTML clr); StrokeColor=(0.0, RGB(0,0,0)) })\n                    yield Padding((4., 0., 4., 0.), Shape[ COV(CO 94.), CAR(CA lbl, 0.); COV(CO 94.), CAR(CA lbl, 1.); COV(CO 100.), CAR(CA lbl, 1.); COV(CO 100.), CAR(CA lbl, 0.) ]) |> style clr\n                    yield Text(COV(CO 92.), CAR(CA lbl, 0.5), VerticalAlign.Middle, HorizontalAlign.End, 0., lbl) |> style \"black\"\n                ] ) \n        let lhgt = (height - float labels.Length * 30.) / height\n        let chart = \n          Layered\n            [ OuterScale(Some(Continuous(CO 0.0, CO 1.0)), Some(Continuous(CO 0.0, CO lhgt)), ctx.Chart)\n              OuterScale(Some(Continuous(CO 0.0, CO 1.0)), Some(Continuous(CO lhgt, CO 1.0)), Padding((20., pright, 0., pleft), labs)) ]\n        { ctx with Chart = chart }\n    | _ -> ctx\n\n\n  let applyLabels ctx =     \n    let ptop, pright, pbot, pleft = ctx.Padding\n    let lblStyle font chart = \n      chart |> applyStyle (fun s -> \n        { s with StrokeWidth = Pixels 0; Fill = Solid(1., HTML \"black\"); Font = font })\n\n    // X axis label, Y axis label\n    let chart = ctx.Chart\n    let chart, pbot = \n      match ctx.ChartOptions.xAxis.label, ctx.ChartOptions.xAxis.labelMinimalSize with\n      | _, Some min when ctx.Height < min -> chart, pbot\n      | Some xl, _ -> \n          let offs = defaultArg ctx.ChartOptions.xAxis.labelOffset 40.\n          let lbl = Offset((0., offs), Text(ctx.XPoints.Middle, ctx.YPoints.Minimum, VerticalAlign.Middle, HorizontalAlign.Center, 0.0, xl))\n          Layered [ chart; lblStyle \"bold 9pt Roboto,sans-serif\" lbl ], (offs + 10.) - 30. // +10 space for label, -30 because offset 30 is added by Axes\n      | _ -> chart, pbot\n    let chart, pleft = \n      match ctx.ChartOptions.yAxis.label, ctx.ChartOptions.yAxis.labelMinimalSize with\n      | _, Some min when ctx.Width < min -> chart, pbot\n      | Some yl, _ -> \n          let offs = defaultArg ctx.ChartOptions.yAxis.labelOffset 60.\n          let lbl = Offset((-offs, 0.), Text(ctx.XPoints.Minimum, ctx.YPoints.Middle, VerticalAlign.Middle, HorizontalAlign.Center, -90.0, yl))\n          Layered [ chart; lblStyle \"bold 9pt Roboto,sans-serif\" lbl ], (offs + 10.) - 50. // +10 space for label, -50 because offset 50 is added by Axes\n      | _ -> chart, pleft\n\n    // Chart title\n    let chart, ptop = \n      match ctx.ChartOptions.title with \n      | Some title ->\n          let ttl = Offset((0., -30.), Text(ctx.XPoints.Middle, ctx.YPoints.Maximum, VerticalAlign.Hanging, HorizontalAlign.Center, 0.0, title))\n          Layered [ chart; lblStyle \"13pt Roboto,sans-serif\" ttl ], 40.\n      | _ -> chart, ptop\n\n    { ctx with Chart = chart; Padding = (ptop, pright, pbot, pleft) }\n\n  let createChart size ctx =   \n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      Compost.createSvg false false size ctx.Chart\n    ]\n        \n  let inAxis axis value =\n    if axis.minValue.IsSome && dateOrNumberAsNumber value < dateOrNumberAsNumber axis.minValue.Value then false\n    elif axis.maxValue.IsSome && dateOrNumberAsNumber value > dateOrNumberAsNumber axis.maxValue.Value then false\n    else true\n                \nmodule Charts = \n  open Internal\n\n  // Charts\n  \n  let renderBubbles trigger selectedBubble chartOptions size bc (data:(obj * obj * obj option * obj option)[]) =   \n    let xdata, ydata = Array.map (fun (x, _, _, _) -> x) data, Array.map (fun (_, y, _, _) -> y) data    \n    let tryFindBubble rx ry px py = \n      data \n      |> Seq.tryFindIndex (fun (x, y, s, _) ->\n        let size = unbox (defaultArg s (box 2.))\n        let rx, ry = rx * size * 2., ry * size * 2.\n        let x, y = dateOrNumberAsNumber x, dateOrNumberAsNumber y\n        ((px - x)*(px - x))/(rx*rx) + ((py - y)*(py - y))/(ry*ry) < 1.0 )\n    Layered [\n      for i, (x, y, s, l) in Seq.mapi (fun i v -> i, v) data do\n        if inAxis chartOptions.xAxis x && inAxis chartOptions.yAxis y then\n          let size = unbox (defaultArg s (box 2.))\n          let b = Bubble(COV(CO (dateOrNumberAsNumber x)), COV(CO (dateOrNumberAsNumber y)), size, size) \n          let alpha = if i = selectedBubble then 1.0 else 0.6\n          yield b |> applyStyle (fun s -> { s with StrokeWidth = Pixels 0; Fill = Solid(alpha, HTML bc) }) \n      for i, (x, y, s, l) in Seq.mapi (fun i v -> i, v) data do\n        if i = selectedBubble && l.IsSome then\n          let t = Text(COV(CO (dateOrNumberAsNumber x)), COV(CO (dateOrNumberAsNumber y)), VerticalAlign.Baseline, HorizontalAlign.Center, 0., unbox l.Value)\n          yield t |> applyStyle (fun s -> { s with Font = \"10pt roboto,sans-serif\"; StrokeWidth = Pixels 0; Fill = Solid(1., HTML \"black\") }) ]\n    |> initChart size xdata ydata chartOptions\n    |> applyInteractiveCtx (fun ctx -> \n        [ TouchStart(fun evt (Cont x, Cont y) -> \n            let bub = defaultArg (tryFindBubble ctx.XPoints.PixelSize ctx.YPoints.PixelSize x y) -1\n            if bub <> selectedBubble then trigger bub )\n          MouseMove(fun evt (Cont x, Cont y) -> \n            let bub = defaultArg (tryFindBubble ctx.XPoints.PixelSize ctx.YPoints.PixelSize x y) -1\n            if bub <> selectedBubble then trigger bub)\n          MouseLeave(fun _ -> trigger -1) ])\n    |> applyScales \n    |> applyLabels \n    |> applyAxes false false true true\n    //|> applyLegend chartOptions\n    |> createChart size \n\n  let renderLines isArea chartOptions size lcs labels (data:(obj * obj)[][]) =   \n    let xdata, ydata = Array.collect (Array.map fst) data, Array.collect (Array.map snd) data    \n    Layered [\n      for clr, line in Seq.zip (infinitely lcs) data do\n        let points = \n          [ for x, y in line do\n              if inAxis chartOptions.xAxis x && inAxis chartOptions.yAxis y then\n                yield COV(CO (dateOrNumberAsNumber x)), COV(CO (dateOrNumberAsNumber y)) ]\n        if not (List.isEmpty points) then \n          if isArea then yield Area points |> applyStyle (fun s -> { s with Fill = Solid(0.4, HTML clr); StrokeWidth = Pixels 0  })\n          yield Line points |> applyStyle (fun s -> { s with StrokeColor = 1.0, HTML clr; StrokeWidth = Pixels 2  }) ]\n    |> initChart size xdata ydata chartOptions\n    |> applyScales \n    |> applyLabels\n    |> applyAxes false false true true    \n    |> applyLegend size (Seq.zip (infinitely lcs) labels)\n    |> createChart size \n\n  let renderColsBars isBar inlineLabels chartOptions size clrs labels (data:(string * float)[]) =   \n    let xdata, ydata = \n      if isBar then Array.map (snd >> box) data, Array.map (fst >> box) data    \n      else Array.map (fst >> box) data, Array.map (snd >> box) data    \n    \n    let { XPoints = xp; YPoints = yp } =\n      Layered [ for lbl, v in data -> if isBar then Bar(CO v, CA lbl) else Column(CA lbl, CO v) ] \n      |> initChart size xdata ydata chartOptions |> applyScales \n    \n    let chartOptions = \n      if isBar && inlineLabels && chartOptions.yAxis.labelOffset.IsNone then { chartOptions with yAxis = { chartOptions.yAxis with labelOffset = None } }\n      elif not isBar && inlineLabels && chartOptions.yAxis.labelOffset.IsNone then { chartOptions with xAxis = { chartOptions.xAxis with labelOffset = None } }\n      else chartOptions\n\n    Layered [\n      for clr, (lbl, v) in Seq.zip (infinitely clrs) data do\n        let elem = \n          if isBar then Padding((6.,0.,6.,1.), Bar(CO v, CA lbl))\n          else Padding((0.,6.,1.,6.), Column(CA lbl, CO v)) \n        let label = \n          if not inlineLabels then None\n          elif isBar then Some(Offset((20., 0.), Text(xp.Minimum, CAR(CA lbl, 0.5), VerticalAlign.Middle, HorizontalAlign.Start, 0.0, lbl)))\n          else Some(Offset((0., -20.), Text(CAR(CA lbl, 0.5), yp.Minimum, VerticalAlign.Middle, HorizontalAlign.Start, -90.0, lbl)))\n        yield elem |> applyStyle (fun s -> { s with Fill = Solid(0.6, HTML clr) }) \n        if label.IsSome then\n          let clr = clr |> mapColor (fun (r,g,b) -> r*0.8, g*0.8, b*0.8)\n          yield label.Value |> applyStyle (fun s -> { s with Font = \"11pt Roboto,sans-serif\"; Fill = Solid(1.0, HTML clr); StrokeWidth = Pixels 0 }) ]\n    |> initChart size xdata ydata chartOptions\n    |> applyScales \n    |> applyLabels\n    |> applyAxes false false (not (inlineLabels && not isBar)) (not (inlineLabels && isBar))\n    |> applyLegend size (Seq.zip (infinitely clrs) labels)\n    |> createChart size \n\n// ------------------------------------------------------------------------------------------------\n// You Guess Line\n// ------------------------------------------------------------------------------------------------\n\nmodule YouGuessLineHelpers = \n  open Internal\n\n  type YouDrawEvent = \n    | ShowResults\n    | Draw of float * float\n\n  type Status = \n    | Autofilled of float\n    | Set of float\n    | NotSet\n    \n  type YouDrawState = \n    { Completed : bool\n      Clip : float\n      Data : (float * float)[]\n      XData : obj[]\n      YData : obj[]\n      Guessed : (float * Status)[] \n      IsKeyDate : bool }\n\n  let initState completed data clipx = \n    let isDate = data |> Seq.exists (fst >> isDate)\n    let numData = data |> Array.map (fun (k, v) -> dateOrNumberAsNumber k, v)\n    { Completed = completed\n      Data = numData\n      XData = Array.map (fst >> box) data\n      YData = Array.map (snd >> box) data\n      Clip = clipx\n      IsKeyDate = isDate\n      Guessed = \n        [| for x, y in numData do \n            if x > clipx then \n              if completed then yield x, Set y \n              else yield x, NotSet |] }\n\n  let handler log state evt = \n    let collectData () = state.Data |> Array.map (fun (k, v) -> [| box k; box v |]) |> box\n    let collectGuesses () = state.Guessed |> Seq.choose (function (k, Set v) -> Some [| box k; box v |] | _ -> None) |> Array.ofSeq |> box\n    match evt with\n    | ShowResults -> \n        log \"completed\" [ \"guess\", collectGuesses(); \"values\", collectData() ]\n        { state with Completed = true }\n    | Draw (downX, downY) ->\n        let indexed = Array.indexed state.Guessed\n        let nearest, _ = indexed |> Array.minBy (fun (_, (x, _)) -> abs (downX - x))\n        { state with\n            Guessed = indexed |> Array.map (fun (i, (x, y)) -> \n              match y with\n              | _ when i = nearest -> (x, Set downY) \n              | NotSet when i > nearest -> (x, Autofilled downY)\n              | _ -> (x, y) ) }\n\n  let render (solvedComment:string option) interactive chartOptions (width, height) (markers:(float*obj)[]) (leftLbl, rightLbl) \n    (leftClr,rightClr,guessClr,markClr) trigger state = \n\n    let all = \n      [| for x, y in state.Data -> Cont x, Cont y |]\n    let known = \n      [| for x, y in state.Data do if x <= state.Clip then yield Cont x, Cont y |]\n    let right = \n      [| yield Array.last known\n         for x, y in state.Data do if x > state.Clip then yield Cont x, Cont y |]\n    let guessed = \n      [| yield Array.last known\n         for x, y in state.Guessed do match y with Set v | Autofilled v -> yield Cont x, Cont v | _ -> () |]\n\n\n    let loy = match chartOptions.yAxis.minValue with Some v -> unbox v | _ -> state.Data |> Seq.map snd |> Seq.min\n    let hiy = match chartOptions.yAxis.maxValue with Some v -> unbox v | _ -> state.Data |> Seq.map snd |> Seq.max       \n    let lx, ly = (fst (Seq.head state.Data) + float state.Clip) / 2., loy + (hiy - loy) / 10.\n    let rx, ry = (fst (Seq.last state.Data) + float state.Clip) / 2., loy + (hiy - loy) / 10.\n    let tx, ty = float state.Clip, hiy - (hiy - loy) / 10.\n    let setColor c s = { s with Font = \"12pt Roboto,sans-serif\"; Fill=Solid(1.0, HTML c); StrokeColor=(0.0, RGB(0,0,0)) }\n    let labels = \n      Shape.Layered [\n        Style(setColor leftClr, Shape.Text(COV(CO lx), COV(CO ly), VerticalAlign.Baseline, HorizontalAlign.Center, 0., leftLbl))\n        Style(setColor rightClr, Shape.Text(COV(CO rx), COV(CO ry), VerticalAlign.Baseline, HorizontalAlign.Center, 0., rightLbl))\n      ]\n\n    let LineStyle shape = \n      Style((fun s -> \n        { s with \n            Fill = Solid(1.0, HTML \"transparent\"); \n            StrokeWidth = Pixels 2; \n            StrokeDashArray = [Integer 5; Integer 5]\n            StrokeColor=0.6, HTML markClr }), shape)\n    let FontStyle shape = \n      Style((fun s -> { s with Font = \"11pt Roboto,sans-serif\"; Fill = Solid(1.0, HTML markClr); StrokeColor = 0.0, HTML \"transparent\" }), shape)\n    \n    let loln, hiln = Scales.adjustRange (loy, hiy)\n    let markers = [\n        for i, (x, lbl) in Seq.mapi (fun i v -> i, v) markers do\n          let kl, kt = if i % 2 = 0 then 0.90, 0.95 else 0.80, 0.85\n          let ytx = loln + (hiln - loln) * kt\n          let hiln = loln + (hiln - loln) * kl\n          yield Line [(COV(CO x), COV(CO loln)); (COV(CO x), COV(CO hiln))] |> LineStyle\n          yield Text(COV(CO x), COV(CO ytx), VerticalAlign.Middle, HorizontalAlign.Center, 0., string lbl) |> FontStyle\n      ]\n\n    let coreChart = \n      Layered [\n        yield labels\n        yield! markers\n        yield Style(Drawing.hideFill >> Drawing.hideStroke, Line all)\n        yield Style(\n          (fun s -> { s with StrokeColor = (1.0, HTML leftClr); Fill = Solid(0.2, HTML leftClr) }), \n          Layered [ Area known; Line known ]) \n        if state.Completed then\n          yield Style((fun s -> \n            { s with \n                StrokeColor = (1.0, HTML rightClr)\n                StrokeDashArray = [ Percentage 0.; Percentage 100. ]\n                Fill = Solid(0.0, HTML rightClr)\n                Animation = Some(1000, \"ease\", fun s -> \n                  { s with\n                      StrokeDashArray = [ Percentage 100.; Percentage 0. ]\n                      Fill = Solid(0.2, HTML rightClr) } \n                ) }), \n            Layered [ Area right; Line right ])                 \n        if guessed.Length > 1 then\n          yield Style(\n            (fun s -> { s with StrokeColor = (1.0, HTML guessClr); StrokeDashArray = [ Integer 5; Integer 5 ] }), \n            Line guessed ) ]\n    \n    let { Internal.ChartContext.Chart = chart } = \n      coreChart\n      |> initChart (width, height) state.XData state.YData chartOptions \n      |> applyScales \n      |> applyLabels \n      |> applyAxes false false true true\n\n    let chart =\n      chart |> applyInteractive\n          ( if state.Completed then []\n            else\n              [ MouseMove(fun evt (Cont x, Cont y) -> \n                  if (int evt.buttons) &&& 1 = 1 then trigger(Draw(x, y)) )\n                TouchMove(fun evt (Cont x, Cont y) -> \n                  trigger(Draw(x, y)) )\n                MouseDown(fun evt (Cont x, Cont y) -> trigger(Draw(x, y)) )\n                TouchStart(fun evt (Cont x, Cont y) -> trigger(Draw(x, y)) ) ])\n    \n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      yield Compost.createSvg false false (width, height) chart\n      if state.Completed && solvedComment.IsSome then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?p [\"class\"=>\"solved\"] [text solvedComment.Value]\n        ]\n      elif interactive then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?button [\n              yield \"type\" => \"button\"\n              yield \"click\" =!> fun _ _ -> trigger ShowResults\n              if state.Guessed |> Seq.last |> snd = NotSet then\n                yield \"disabled\" => \"disabled\"\n            ] [ text \"Show me how I did\" ]\n          ]\n    ]\n\n// ------------------------------------------------------------------------------------------------\n// You Guess Line offset\n// ------------------------------------------------------------------------------------------------\n\nmodule YouGeussLineOffsetHelpers = \n  open Internal\n\n  type YouDrawEvent =   \n    | Animate\n    | HideOverlay\n    | ShowResults\n    | StopMoving\n    | StartMoving of float\n    | ContinueMoving of float\n\n  type YouDrawState = \n    { Completed : bool\n      Interactive : bool\n      Data : (float * float)[]\n      XData : obj[]\n      YData : obj[]\n      IsKeyDate : bool\n      OffsetStart : float option\n      Offset : float \n      OffsetRange : float * float\n      XRange : float * float\n      YRange : float * float \n      OverlayHiding : bool\n      OverlayOpacity : float\n      CompletionStep : float\n      ChartOptions : ChartOptions }\n\n  let initState completed chartOptions data = \n    let isDate = data |> Seq.exists (fst >> isDate)\n    let numData = data |> Array.map (fun (k, v) -> dateOrNumberAsNumber k, v)\n\n    let range axis data = \n      dateOrNumberAsNumber (defaultArg axis.minValue (box (Seq.min data))),\n      dateOrNumberAsNumber (defaultArg axis.maxValue (box (Seq.max data)))\n    let lx, hx = range chartOptions.xAxis (Seq.map snd numData)\n    let ly, hy = range chartOptions.yAxis (Seq.map fst numData)\n    let minData = data |> Seq.map (fst >> dateOrNumberAsNumber) |> Seq.min\n    let maxData = data |> Seq.map (fst >> dateOrNumberAsNumber) |> Seq.max\n\n    { Completed = completed\n      Interactive = not completed\n      ChartOptions = chartOptions\n      Data = numData\n      XData = Array.map (snd >> box) data\n      YData = Array.map (fst >> box) data\n      IsKeyDate = isDate \n      Offset = ly - minData\n      OffsetRange = hy - maxData, ly - minData\n      OffsetStart = None\n      XRange = lx, hx\n      YRange = ly, hy \n      OverlayHiding = completed\n      OverlayOpacity = if completed then 1. else 0.\n      CompletionStep = if completed then 1. else 0. }\n\n  let handler log state evt = \n    let collectData () = state.Data |> Array.map (fun (k, v) -> [| box k; box v |]) |> box\n    match evt with\n    | StopMoving -> { state with OffsetStart = None }\n    | HideOverlay -> { state with OverlayOpacity = state.OverlayOpacity + 0.1 }\n    | StartMoving y -> \n        { state with OffsetStart = Some (y - state.Offset); OverlayHiding = true }\n    | ContinueMoving y -> \n        let lo, hi = state.OffsetRange\n        if state.OffsetStart.IsNone then state // should not happen\n        else { state with Offset = min hi (max lo (y - state.OffsetStart.Value)) }\n    | ShowResults -> \n        log \"completed\" [ \"offset\", box state.Offset; \"values\", collectData() ]\n        { state with Completed = true }\n    | Animate -> { state with CompletionStep = min 1.0 (state.CompletionStep + 0.05) }\n\n  let render (solvedComment:string option) interactive (width, height) labels (markers:(float*obj)[]) (guessClr, correctClr, markerClr) trigger state = \n    if state.Completed && state.CompletionStep < 1.0 then\n      window.setTimeout((fun () -> trigger Animate), 50) |> ignore\n    if state.OverlayHiding && state.OverlayOpacity < 1. then\n      window.setTimeout((fun () -> trigger HideOverlay), 50) |> ignore\n\n    let (lx, hx), (ly, hy) = state.XRange, state.YRange\n    let visiblePoints offset = \n      let lo = dateOrNumberAsNumber state.ChartOptions.yAxis.minValue.Value - offset\n      let hi = dateOrNumberAsNumber state.ChartOptions.yAxis.maxValue.Value - offset\n      cropLine state.Data lo hi |> Array.map (fun (y, x) -> COV(CO x), COV(CO (y + offset)))\n\n    let coreChart = \n      Layered [\n        for (y, str), label in Seq.zip markers labels do\n          let _, inx = state.Data |> Seq.map (fun (y, x) -> y + state.Offset * (1.0 - state.CompletionStep), x) |> interpolateAt y\n          let b = Bubble(COV(CO hx), COV(CO y), 4., 4.) \n          let t = Offset((0., 5.), Text(COV(CO hx), COV(CO y), VerticalAlign.Hanging, HorizontalAlign.End, 0.0, label))\n          yield t |> applyStyle (fun s -> { s with StrokeWidth = Pixels 0; Fill = Solid(0.8, HTML markerClr) }) \n          let l = Line [COV(CO inx), COV(CO y); COV(CO hx), COV(CO y)] \n          yield l |> applyStyle (fun s -> { s with StrokeWidth = Pixels 2; StrokeColor = 0.8, HTML markerClr }) \n\n        if not state.Completed then\n          yield Style(\n            (fun s -> { s with Fill = Solid(0.5, HTML guessClr) }), \n            VShiftedArea(lx, visiblePoints state.Offset) )\n        if state.Interactive then\n          yield Style(\n            (fun s -> { s with StrokeColor = (1.0, HTML guessClr); StrokeDashArray = [ Integer 5; Integer 5 ] }), \n            Line(visiblePoints state.Offset) )\n\n        if state.Completed then \n          let r1, g1, b1 = parseColor guessClr\n          let r2, g2, b2 = parseColor correctClr\n          let dc c1 c2 = (1.0 - state.CompletionStep) * c1 + state.CompletionStep * c2\n          let clr = formatColor (dc r1 r2, dc g1 g2, dc b1 b2)\n          let correct = visiblePoints (state.Offset * (1.0 - state.CompletionStep))\n          yield Style(\n            (fun s -> { s with Fill = Solid(0.5, HTML clr) }), \n            VShiftedArea(lx, correct) )\n          yield Style(\n            (fun s -> { s with StrokeColor = (1.0, HTML clr) }), \n            Layered [ Line correct]) \n        \n        yield \n          Shape [ \n            COV(CO lx), COV(CO ly); COV(CO lx), COV(CO hy);\n            COV(CO hx), COV(CO hy); COV(CO hx), COV(CO ly) ]\n          |> applyStyle (fun x -> { x with Fill = Solid(0.75 * (1. - state.OverlayOpacity), HTML \"#eaeaea\") })\n\n      ] |> applyStyle(fun s -> \n        let cursor = \n          if state.Completed then \"\"\n          //elif state.OffsetStart.IsSome then \"move,grabbing,-moz-grabbing,-webkit-grabbing\" \n          else \"move,grab,-moz-grab,-webkit-grab\"\n        { s with Cursor = cursor }) \n\n    let { Internal.ChartContext.Chart = chart } = \n      coreChart\n      |> initChart (width, height) state.XData state.YData state.ChartOptions \n      |> applyScales \n      |> applyLabels \n      |> applyAxes false false true true\n\n    let chart =\n      Padding((20., 0., 0., 0.), chart)\n      |> applyInteractive\n          ( if state.Completed then []\n            else\n              [ MouseUp(fun _ _ -> trigger(StopMoving))\n                TouchEnd(fun _ -> trigger(StopMoving))\n                MouseMove(fun evt (Cont x, Cont y) -> \n                  if (int evt.buttons) &&& 1 = 1 then trigger(ContinueMoving y) )\n                TouchMove(fun evt (Cont x, Cont y) -> trigger(ContinueMoving y) )\n                MouseDown(fun evt (Cont x, Cont y) -> trigger(StartMoving y) ) \n                TouchStart(fun evt (Cont x, Cont y) -> trigger(StartMoving y) ) ])\n    \n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      yield h?div [\"style\" => sprintf \"width:%dpx; height:0px; margin:0px auto 0px auto\" (int width) ] [\n        h?div [\"style\" => \n          \"pointer-events:none; move,grab,-moz-grab,-webkit-grab;\" +\n          sprintf \"opacity:%f; width:50px; height:70px; border-radius:15px; background:#808080;\" (0.5 * (1. - state.OverlayOpacity)) + \n          sprintf \"position:relative; left:%dpx;top:%dpx\" (int (width - 50.) / 2 + 45) (int (height - 70.) / 2 - 30) ] [\n          h?i [ \"style\" => \"margin:12px 0px 0px 1px;font-size:42px;color:#f0f0f0\"; \"class\" => \"fa fa-hand-o-down\" ] []\n        ]\n      ]\n\n      yield Compost.createSvg false state.IsKeyDate (width, height) chart\n      if state.Completed && solvedComment.IsSome then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?p [\"class\"=>\"solved\"] [text solvedComment.Value]\n        ]\n      elif interactive then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?button [\n              yield \"type\" => \"button\"\n              yield \"click\" =!> fun _ _ -> trigger ShowResults\n              if state.OverlayOpacity < 1. then\n                yield \"disabled\" => \"disabled\"\n            ] [ text \"Show me how I did\" ]\n          ]\n    ]\n            \n// ------------------------------------------------------------------------------------------------\n// You Guess Bar & You Guess Column\n// ------------------------------------------------------------------------------------------------\n\nmodule YouGuessColsHelpers = \n  open Internal\n\n  type YouGuessState = \n    { Completed : bool\n      CompletionStep : float\n      Default : float\n      Maximum : float\n      XData : obj[]\n      YData : obj[]\n      Data : (string * float)[]\n      Guesses : Map<string, float> }\n\n  type YouGuessEvent = \n    | ShowResults \n    | Animate \n    | Update of string * float\n\n  let initState completed isBar data maxValue =     \n    { Completed = completed\n      CompletionStep = 0.0\n      Data = data \n      XData = if isBar then arrayMap (snd >> box) data else arrayMap (fst >> box) data\n      YData = if isBar then arrayMap (fst >> box) data else arrayMap (snd >> box) data\n      Default = Array.averageBy snd data\n      Maximum = InteractiveHelpers.calclateMax maxValue data\n      Guesses = if completed then Map.ofSeq data else Map.empty }\n\n  let update log state evt = \n    let collectData () = state.Data |> Array.map (fun (k, v) -> [| box k; box v |]) |> box\n    let collectGuesses () = state.Guesses |> Seq.map (fun (KeyValue(k, v)) -> [| box k; box v |]) |> Array.ofSeq |> box\n    match evt with\n    | ShowResults -> \n        log \"completed\" [ \"guess\", collectGuesses(); \"values\", collectData() ]\n        { state with Completed = true }\n    | Animate -> { state with CompletionStep = min 1.0 (state.CompletionStep + 0.05) }\n    | Update(k, v) -> { state with Guesses = Map.add k v state.Guesses }\n\n  let renderCols (solvedComment:string option) interactive (width, height) topLabel trigger state = \n    if state.Completed && state.CompletionStep < 1.0 then\n      window.setTimeout((fun () -> trigger Animate), 50) |> ignore\n    let chart = \n      Axes(false, false, true, true, \n        AutoScale(false, true, \n          Interactive\n            ( ( if state.Completed then []\n                else\n                  [ EventHandler.MouseMove(fun evt (Cat(x, _), Cont y) ->\n                      if (int evt.buttons) &&& 1 = 1 then trigger (Update(x, y)) )\n                    EventHandler.MouseDown(fun evt (Cat(x, _), Cont y) ->\n                      trigger (Update(x, y)) )\n                    EventHandler.TouchStart(fun evt (Cat(x, _), Cont y) ->\n                      trigger (Update(x, y)) )\n                    EventHandler.TouchMove(fun evt (Cat(x, _), Cont y) ->\n                      trigger (Update(x, y)) ) ] ),\n              Style\n                ( (fun s -> if state.Completed then s else { s with Cursor = \"row-resize\" }),\n                  (Layered [\n                    yield Stack\n                      ( Horizontal, \n                        [ for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data -> \n                            let sh = Style((fun s -> { s with Fill = Solid(0.2, HTML \"#a0a0a0\") }), Column(CA lbl, CO state.Maximum )) \n                            Shape.Padding((0., 10., 0., 10.), sh) ])\n                    yield Stack\n                      ( Horizontal, \n                        [ for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data -> \n                            let alpha, value = \n                              match state.Completed, state.Guesses.TryFind lbl with\n                              | true, Some guess -> 0.6, state.CompletionStep * value + (1.0 - state.CompletionStep) * guess\n                              | _, Some v -> 0.6, v\n                              | _, None -> 0.2, state.Default\n                            let sh = Style((fun s -> { s with Fill = Solid(alpha, HTML clr) }), Column(CA lbl, CO value)) \n                            Shape.Padding((0., 10., 0., 10.), sh) ])\n                    for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data do\n                      match state.Guesses.TryFind lbl with\n                      | None -> () \n                      | Some guess ->\n                          let line = Line [ CAR(CA lbl, 0.0), COV (CO guess); CAR(CA lbl, 1.0), COV (CO guess) ]\n                          yield Style(\n                            (fun s -> \n                              { s with\n                                  StrokeColor = (1.0, HTML clr)\n                                  StrokeWidth = Pixels 4\n                                  StrokeDashArray = [ Integer 5; Integer 5 ] }), \n                            Shape.Padding((0., 10., 0., 10.), line))\n                    match topLabel with\n                    | None -> ()\n                    | Some lbl ->\n                        let x = CAR(CA (fst state.Data.[state.Data.Length/2]), if state.Data.Length % 2 = 0 then 0.0 else 0.5)\n                        let y = COV(CO (state.Maximum * 0.9))\n                        yield Style(\n                          (fun s -> { s with Font = \"13pt Roboto,sans-serif\"; Fill=Solid(1.0, HTML \"#808080\"); StrokeColor=(0.0, RGB(0,0,0)) }),\n                          Text(x, y, VerticalAlign.Baseline, HorizontalAlign.Center, 0., lbl) )\n                  ]) ))))\n\n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      yield Compost.createSvg false false (width, height) chart\n      if state.Completed && solvedComment.IsSome then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?p [\"class\"=>\"solved\"] [text solvedComment.Value]\n        ]\n      elif interactive then \n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?button [\n              yield \"type\" => \"button\"\n              yield \"click\" =!> fun _ _ -> trigger ShowResults\n              if state.Guesses.Count <> state.Data.Length then\n                yield \"disabled\" => \"disabled\"\n            ] [ text \"Show me how I did\" ]\n          ]\n    ]\n\n\n  let renderBars (solvedComment:string option) interactive inlineLabels size chartOptions trigger state = \n    if state.Completed && state.CompletionStep < 1.0 then\n      window.setTimeout((fun () -> trigger Animate), 50) |> ignore\n\n    let chartOptions = \n      if (*isBar && *)inlineLabels && chartOptions.yAxis.labelOffset.IsNone then { chartOptions with yAxis = { chartOptions.yAxis with labelOffset = Some 10. } }\n      //elif not isBar && inlineLabels then { chartOptions with xAxis = { chartOptions.xAxis with labelOffset = Some 10. } }\n      else chartOptions\n\n    let chart = \n      Layered [\n        yield \n          Stack\n            ( Vertical, \n              [ for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data -> \n                  let sh = Style((fun s -> { s with Fill = Solid(0.2, HTML \"#a0a0a0\") }), Bar(CO state.Maximum, CA lbl)) \n                  Shape.Padding((10., 0., 10., 0.), sh) ])\n        yield Stack\n          ( Vertical, \n            [ for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data -> \n                let alpha, value = \n                  match state.Completed, state.Guesses.TryFind lbl with\n                  | true, Some guess -> 0.6, state.CompletionStep * value + (1.0 - state.CompletionStep) * guess\n                  | _, Some v -> 0.6, v\n                  | _, None -> 0.2, state.Default\n                let sh = Style((fun s -> { s with Fill = Solid(alpha, HTML clr) }), Bar(CO value, CA lbl)) \n                Shape.Padding((10., 0., 10., 0.), sh) ])\n\n        if inlineLabels then\n          for clr, (lbl, _) in Seq.zip (infinitely vega10) state.Data do \n            let x = COV(CO (state.Maximum * 0.95))\n            let y = CAR(CA lbl, 0.5)\n            yield Style(\n              (fun s -> { s with Font = \"13pt Roboto,sans-serif\"; Fill=Solid(1.0, HTML clr); StrokeColor=(0.0, RGB(0,0,0)) }),\n              Text(x, y, VerticalAlign.Middle, HorizontalAlign.End, 0., lbl) )\n\n        for clr, (lbl, value) in Seq.zip (infinitely vega10) state.Data do\n          match state.Guesses.TryFind lbl with\n          | None -> () \n          | Some guess ->\n              let line = Line [ COV (CO guess), CAR(CA lbl, 0.0); COV (CO guess), CAR(CA lbl, 1.0) ]\n              yield Style(\n                (fun s -> \n                  { s with\n                      StrokeColor = (1.0, HTML clr)\n                      StrokeWidth = Pixels 4\n                      StrokeDashArray = [ Integer 5; Integer 5 ] }), \n                Shape.Padding((10., 0., 10., 0.), line)) ]\n      |> applyInteractive\n            ( if state.Completed then []\n              else\n                [ EventHandler.MouseMove(fun evt (Cont x, Cat(y, _)) ->\n                    if (int evt.buttons) &&& 1 = 1 then trigger (Update(y, x)) )\n                  EventHandler.MouseDown(fun evt (Cont x, Cat(y, _)) ->\n                    trigger (Update(y, x)) )\n                  EventHandler.TouchStart(fun evt (Cont x, Cat(y, _)) ->\n                    trigger (Update(y, x)) )\n                  EventHandler.TouchMove(fun evt (Cont x, Cat(y, _)) ->\n                    trigger (Update(y, x)) ) ] )\n      |> applyStyle (fun s -> \n          if state.Completed then s else { s with Cursor = \"col-resize\" })\n\n    let ctx = \n      chart\n      |> initChart size state.XData state.YData chartOptions\n      |> applyScales \n      |> applyLabels\n      //|> applyAxes false false (not (inlineLabels && not isBar)) (not (inlineLabels && isBar))\n      |> applyAxes false false true (not inlineLabels)\n      |> applyLegend size (Seq.zip (infinitely vega10) (Seq.map fst state.Data))\n    \n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      yield Compost.createSvg false false size ctx.Chart\n      if state.Completed && solvedComment.IsSome then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?p [\"class\"=>\"solved\"] [text solvedComment.Value]\n        ]\n      elif interactive then \n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?button [\n              yield \"type\" => \"button\"\n              yield \"click\" =!> fun _ _ -> trigger ShowResults\n              if state.Guesses.Count <> state.Data.Length then\n                yield \"disabled\" => \"disabled\"\n            ] [ text \"Show me how I did\" ]\n          ]\n    ]\n\n// ------------------------------------------------------------------------------------------------\n// You Guess Sort Bars\n// ------------------------------------------------------------------------------------------------\n\nmodule YouGuessSortHelpers = \n  type YouGuessState = \n    { Data : (string * float)[] \n      Colors : System.Collections.Generic.IDictionary<string, string>\n      Assignments : Map<string, string>\n      Selected : string\n      Maximum : float \n      CompletionStep : float\n      Completed : bool }\n\n  type YouGuessEvent = \n    | SelectItem of string\n    | AssignCurrent of string\n    | ShowResults \n    | Animate \n\n  let initState completed maxValue data =     \n    { Data = data \n      CompletionStep = 0.0\n      Completed = completed\n      Colors = Seq.map2 (fun (lbl, _) clr -> lbl, clr) data vega10 |> dict \n      Selected = fst (Seq.head data)\n      Maximum = InteractiveHelpers.calclateMax maxValue data \n      Assignments = \n        if completed then Map.ofSeq [for k, _ in data -> k, k]\n        else Map.empty }\n\n  let update log state evt = \n    let collectData () = state.Data |> Array.map (fun (k, v) -> [| box k; box v |]) |> box\n    let collectGuesses () = \n      state.Assignments |> Seq.map (fun (KeyValue(vk, k)) -> \n        let v = state.Data |> Seq.pick (fun (k, v) -> if k = vk then Some v else None)\n        [| box k; box v |]) |> Array.ofSeq |> box\n    match evt with\n    | Animate -> { state with CompletionStep = min 1.0 (state.CompletionStep + 0.05) }\n    | ShowResults -> \n        log \"completed\" [ \"values\", collectData (); \"guess\", collectGuesses () ] \n        { state with Completed = true }\n    | SelectItem s -> \n        log \"select\" [ \"selection\", box s ]\n        { state with Selected = s }\n    | AssignCurrent target -> \n        let newAssigns = \n          state.Assignments\n          |> Map.filter (fun _ v -> v <> state.Selected)\n          |> Map.add target state.Selected\n        let assigned = newAssigns |> Seq.map (fun kvp -> kvp.Value) |> set\n        let newSelected = \n          state.Data\n          |> Seq.map fst \n          |> Seq.filter (assigned.Contains >> not)\n          |> Seq.tryHead\n        { state with Assignments = newAssigns; Selected = defaultArg newSelected state.Selected }\n  \n  let renderBars (solvedComment:string option) interactive (width, height) trigger (state:YouGuessState) = \n    if state.Completed && state.CompletionStep < 1.0 then\n      window.setTimeout((fun () -> trigger Animate), 50) |> ignore\n    let chart = \n      Axes(false, false, true, false, \n        AutoScale(true, false,\n          Interactive\n            ( ( if state.Completed then [] else\n                  [ EventHandler.MouseDown(fun evt (_, Cat(y, _)) -> trigger(AssignCurrent y))\n                    EventHandler.TouchStart(fun evt (_, Cat(y, _)) -> trigger(AssignCurrent y))\n                    EventHandler.TouchMove(fun evt (_, Cat(y, _)) -> trigger(AssignCurrent y)) ]),\n              Style\n                ( (fun s -> if state.Completed then s else { s with Cursor = \"pointer\" }),\n                  (Layered [\n                    yield Stack\n                      ( Vertical, \n                        [ for i, (lbl, original) in Seq.mapi (fun i v -> i, v) (Seq.sortBy snd state.Data) do\n                            let alpha, value, clr = \n                              match state.Completed, state.Assignments.TryFind lbl with\n                              | true, Some assigned -> \n                                  let _, actual = state.Data |> Seq.find (fun (lbl, _) -> lbl = assigned)\n                                  0.6, state.CompletionStep * actual + (1.0 - state.CompletionStep) * original, state.Colors.[assigned]\n                              | _, Some assigned -> 0.6, original, state.Colors.[assigned]\n                              | _, None -> 0.3, original, \"#a0a0a0\"\n\n                            if i = state.Data.Length - 1 && state.Assignments.Count = 0 then\n                              let txt = Text(COV(CO(state.Maximum * 0.05)), CAR(CA lbl, 0.5), Middle, Start, 0., \"Assign highlighted value to one of the bars by clicking on it!\")\n                              yield Style((fun s -> { s with Font = \"13pt Roboto,sans-serif\"; Fill = Solid(1.0, HTML \"#606060\"); StrokeColor=(0.0, HTML \"white\") }), txt ) \n\n                            let sh = Style((fun s -> { s with Fill = Solid(alpha, HTML clr) }), Bar(CO value, CA lbl)) \n                            if clr <> \"#a0a0a0\" then\n                              let line = Line [ COV (CO original), CAR(CA lbl, 0.0); COV (CO original), CAR(CA lbl, 1.0) ]\n                              yield Style(\n                                (fun s -> \n                                  { s with\n                                      StrokeColor = (1.0, HTML clr)\n                                      StrokeWidth = Pixels 4\n                                      StrokeDashArray = [ Integer 5; Integer 5 ] }), \n                                Shape.Padding((5., 0., 5., 0.), line))\n                            yield Shape.Padding((5., 0., 5., 0.), sh) ])\n                  ]) ))))\n\n    let labs = \n      Padding(\n        (0., 20., 20., 25.),\n        InnerScale(Some(CO 0., CO 100.), None, \n          Interactive(\n            ( if state.Completed then [] else\n                [ EventHandler.MouseDown(fun evt (_, Cat(lbl, _)) -> trigger (SelectItem lbl))\n                  EventHandler.TouchStart(fun evt (_, Cat(lbl, _)) -> trigger (SelectItem lbl)) \n                  EventHandler.TouchMove(fun evt (_, Cat(lbl, _)) -> trigger (SelectItem lbl)) ]),\n            Layered\n              [ for lbl, _ in Seq.rev state.Data do\n                  let clr = state.Colors.[lbl]\n                  let x = COV(CO 5.)\n                  let y = CAR(CA lbl, 0.5)\n                  let af, al = if state.Completed || lbl = state.Selected then 0.9, 1.0 else 0.2, 0.6\n                  yield \n                    Style((fun s -> { s with Fill=Solid(af, HTML clr)  }), \n                      Padding((2., 0., 2., 0.), Bar(CO 4., CA lbl)))\n                  yield Style(\n                    (fun s -> { s with Font = \"11pt Roboto,sans-serif\"; Fill=Solid(al, HTML clr); StrokeColor=(0.0, RGB(0,0,0)) }),\n                    Text(x, y, VerticalAlign.Middle, HorizontalAlign.Start, 0., lbl) ) \n                  if not state.Completed then\n                    yield \n                      Style((fun s -> { s with Cursor=\"pointer\"; Fill=Solid(0.0, HTML \"white\")  }), Bar(CO 100., CA lbl))\n                ])))\n             \n    let all = \n      Layered\n        [ OuterScale(None, Some(Continuous(CO 0.0, CO 3.0)), labs) \n          OuterScale(None, Some(Continuous(CO 3.0, CO 10.0)), Padding((0.,20.,0.,20.), chart)) ]\n\n    h?div [\"style\"=>\"text-align:center;padding-top:20px\"] [\n      yield Compost.createSvg false false (width, height) all\n      if state.Completed && solvedComment.IsSome then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?p [\"class\"=>\"solved\"] [text solvedComment.Value]\n        ]\n      elif interactive then\n        yield h?div [\"style\"=>\"padding-bottom:20px\"] [\n          h?button [\n              yield \"type\" => \"button\"\n              yield \"click\" =!> fun _ _ -> trigger ShowResults\n              if state.Assignments.Count <> state.Data.Length then\n                yield \"disabled\" => \"disabled\"\n            ] [ text \"Show me how I did\" ]\n          ]\n    ]\n    \n// ------------------------------------------------------------------------------------------------\n// You Guess API\n// ------------------------------------------------------------------------------------------------\n\nopen TheGamma.Series\nopen TheGamma.Common\n\ntype YouGuessColsBarsKind = Cols | Bars\n\ntype YouGuessColsBars =\n  private \n    { kind : YouGuessColsBarsKind\n      data : series<string, float> \n      logger : (obj -> unit) option\n      interactive : bool\n      solvedComment : string option\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setSolvedComment(comment) = { y with solvedComment = Some comment }\n  member y.setLogger(logger) = { y with logger = Some logger }\n  member y.setLabel(top:string) = y.setTitle(top) // TODO: Deprecated\n  member y.setMaximum(max:float) = if y.kind = Bars then y.setAxisX(maxValue=box max) else y.setAxisY(maxValue=box max) // TODO: Deprecated\n  member y.setInteractive(state) = { y with interactive = state }\n  member y.show(outputId) =   \n    InteractiveHelpers.showApp outputId y.options y.data\n      (fun data -> YouGuessColsHelpers.initState (not y.interactive) (y.kind = Bars) data (unbox (if y.kind = Bars then y.options.xAxis.maxValue else y.options.yAxis.maxValue)))\n      (fun _ size -> \n          match y.kind with \n          | Bars -> YouGuessColsHelpers.renderBars y.solvedComment y.interactive true size y.options\n          | Cols -> YouGuessColsHelpers.renderCols y.solvedComment y.interactive size y.options.title)\n      (fun _ -> YouGuessColsHelpers.update (InteractiveHelpers.createLogger outputId y.logger) )\n\ntype YouGuessLine = \n  private \n    { data : series<obj, float> \n      markers : series<obj, obj> option\n      clip : float option\n      markerColor : string option\n      knownColor : string option\n      unknownColor : string option \n      drawColor : string option \n      knownLabel : string option\n      guessLabel : string option \n      logger : (obj -> unit) option\n      interactive : bool\n      solvedComment : string option\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setSolvedComment(comment) = { y with solvedComment = Some comment }\n  member y.setLogger(logger) = { y with logger = Some logger }\n  member y.setRange(min, max) = y.setAxisY(min, max) // TODO: Deprecated\n  member y.setClip(clip) = { y with clip = Some (dateOrNumberAsNumber clip) }\n  member y.setColors(known, unknown) = { y with knownColor = Some known; unknownColor = Some unknown }\n  member y.setDrawColor(draw) = { y with drawColor = Some draw }\n  member y.setMarkerColor(marker) = { y with markerColor = Some marker }\n  member y.setLabels(?top, ?known, ?guess) = \n    { y with knownLabel = orElse known y.knownLabel; guessLabel = orElse guess y.guessLabel; options = { y.options with title = orElse top y.options.title } }\n  member y.setMarkers(markers) = { y with markers = Some markers }\n  member y.setInteractive(state) = { y with interactive = state }\n  member y.show(outputId) = Async.StartImmediate <| async {\n    let markers = defaultArg y.markers (series<string, float>.create(async.Return [||], \"\", \"\", \"\"))\n    let! markers = markers.data |> Async.AwaitFuture\n    let markers = markers |> Array.map (fun (k, v) -> dateOrNumberAsNumber k, v) |> Array.sortBy fst\n    return! InteractiveHelpers.showAppAsync outputId y.options y.data\n      (fun data ->\n          let clipx = match y.clip with Some v -> v | _ -> dateOrNumberAsNumber (fst (data.[data.Length / 2]))\n          YouGuessLineHelpers.initState (not y.interactive) (Array.sortBy (fst >> dateOrNumberAsNumber) data) clipx)\n      (fun data size trig ->           \n          let lc, dc, gc, mc = \n            defaultArg y.knownColor \"#606060\", defaultArg y.unknownColor \"#FFC700\", \n            defaultArg y.drawColor \"#808080\", defaultArg y.markerColor \"#C65E31\"    \n          let data = Array.sortBy (fst >> dateOrNumberAsNumber) data\n          let co = { y.options with xAxis = { y.options.xAxis with minValue = Some (box (dateOrNumberAsNumber (fst data.[0]))); maxValue = Some (box (dateOrNumberAsNumber (fst data.[data.Length-1]))) } }\n          YouGuessLineHelpers.render y.solvedComment y.interactive co size markers (defaultArg y.knownLabel \"\", defaultArg y.guessLabel \"\") (lc,dc,gc,mc) trig) \n      (fun _ -> YouGuessLineHelpers.handler (InteractiveHelpers.createLogger outputId y.logger)) } \n\ntype YouGuessLineOffset = \n  private \n    { data : series<obj, float> \n      markers : series<obj, obj> option\n      labels : string[]\n      logger : (obj -> unit) option\n      interactive : bool\n      lineColor : string option \n      guessColor : string option\n      markerColor : string option\n      solvedComment : string option\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setLabels(labels) = { y with labels = labels }\n  member y.setSolvedComment(comment) = { y with solvedComment = Some comment }\n  member y.setLogger(logger) = { y with logger = Some logger }\n  member y.setColors(?draw, ?solved, ?marker) = { y with guessColor = orElse draw y.guessColor; lineColor = orElse solved y.lineColor; markerColor = orElse marker y.markerColor }\n  member y.setMarkers(markers) = { y with markers = Some markers }\n  member y.setInteractive(state) = { y with interactive = state }\n  member y.show(outputId) = Async.StartImmediate <| async {\n    let markers = defaultArg y.markers (series<string, float>.create(async.Return [||], \"\", \"\", \"\"))\n    let! markers = markers.data |> Async.AwaitFuture\n    let markers = markers |> Array.map (fun (k, v) -> dateOrNumberAsNumber k, v) |> Array.sortBy fst\n    return! InteractiveHelpers.showAppAsync outputId y.options y.data\n      (fun data ->\n          let data = Array.sortBy (fst >> dateOrNumberAsNumber) data\n          let lo = defaultArg y.options.yAxis.minValue (box (dateOrNumberAsNumber (fst data.[0])))\n          let hi = defaultArg y.options.yAxis.maxValue (box (dateOrNumberAsNumber (fst data.[data.Length-1])))\n          let co = { y.options with yAxis = { y.options.yAxis with minValue = Some lo; maxValue = Some hi } }\n          YouGeussLineOffsetHelpers.initState (not y.interactive) co (Array.sortBy (fst >> dateOrNumberAsNumber) data))\n      (fun data size trig ->           \n          let lc = defaultArg y.lineColor \"#bcbd22\"\n          let gc = defaultArg y.guessColor \"#808080\"\n          let mc = defaultArg y.markerColor \"#800080\"\n          YouGeussLineOffsetHelpers.render y.solvedComment y.interactive size y.labels markers (gc, lc, mc) trig) \n      (fun _ -> YouGeussLineOffsetHelpers.handler (InteractiveHelpers.createLogger outputId y.logger)) } \n\ntype YouGuessSortBars = \n  private \n    { data : series<string, float> \n      maxValue : float option \n      size : float option * float option \n      logger : (obj -> unit) option \n      interactive : bool \n      solvedComment : string option }\n  member y.setSolvedComment(comment) = { y with solvedComment = Some comment }\n  member y.setLogger(logger) = { y with logger = Some logger }\n  member y.setMaximum(max) = { y with maxValue = Some max }\n  member y.setSize(?width, ?height) = \n    { y with size = (orElse width (fst y.size), orElse height (snd y.size)) }\n  member y.setInteractive(state) = { y with interactive = state }\n  member y.show(outputId) = \n    InteractiveHelpers.showApp outputId { ChartOptions.Default with size = y.size } y.data\n      (YouGuessSortHelpers.initState (not y.interactive) y.maxValue)\n      (fun _ size -> YouGuessSortHelpers.renderBars y.solvedComment y.interactive size)\n      (fun _ -> YouGuessSortHelpers.update (InteractiveHelpers.createLogger outputId y.logger))\n\ntype youguess = \n  static member columns(data:series<string, float>) = \n    { YouGuessColsBars.data = data; kind = Cols; options = ChartOptions.Default; logger = None; interactive = true; solvedComment = None }\n  static member bars(data:series<string, float>) = \n    { YouGuessColsBars.data = data; kind = Bars; options = ChartOptions.Default; logger = None; interactive = true; solvedComment = None }\n  static member sortBars(data:series<string, float>) = \n    { YouGuessSortBars.data = data; maxValue = None; size = None, None; logger = None; interactive = true; solvedComment = None }\n  static member line(data:series<obj, float>) =\n    { YouGuessLine.data = data; clip = None; \n      markerColor = None; guessLabel = None; knownLabel = None; markers = None\n      knownColor = None; unknownColor = None; drawColor = None; \n      options = ChartOptions.Default; logger = None; interactive = true; solvedComment = None }\n  static member vlineOffset(data:series<obj, float>) =\n    { YouGuessLineOffset.data = data; markers = None; lineColor = None; \n      guessColor = None; markerColor = None; labels = [| for c in 'A' .. 'Z' -> string c |]\n      options = ChartOptions.Default; logger = None; interactive = true; solvedComment = None }\n\n// ------------------------------------------------------------------------------------------------\n// Compost Charts API\n// ------------------------------------------------------------------------------------------------\n\ntype CompostBubblesChartSet =\n  private \n    { data : series<obj, obj> \n      selectY : obj -> obj\n      selectX : obj -> obj\n      selectLabel : option<obj -> obj>\n      selectSize : option<obj -> obj>\n      bubbleColor : string option\n  // [copy-paste]\n      options : ChartOptions }\n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setColors(?bubbleColor) = \n    { y with bubbleColor = defaultArg bubbleColor y.bubbleColor }\n  member y.show(outputId) = \n    InteractiveHelpers.showApp outputId y.options y.data\n      (fun data -> -1)\n      (fun data size trigger selectedBubble -> \n        let ss f = match f with Some f -> (fun x -> Some(f x)) | _ -> (fun _ -> None)\n        let data = data |> Array.map (fun (_, v) -> y.selectX v, y.selectY v, ss y.selectSize v, ss y.selectLabel v)\n        let bc = defaultArg y.bubbleColor \"#20a030\"\n        Charts.renderBubbles trigger selectedBubble y.options size bc data)\n      (fun _ _ evt -> evt)\n\ntype CompostBubblesChart<'k, 'v>(data:series<'k, 'v>) = \n  member c.set(x:'v -> obj, y:'v -> obj, ?size:'v -> obj, ?label:'v -> obj) = \n    { CompostBubblesChartSet.data = unbox data\n      selectX = unbox x; selectY = unbox y\n      selectSize = unbox size; bubbleColor = None \n      options = ChartOptions.Default; selectLabel = unbox label }\n\n\ntype CompostColBarChart =\n  private \n    { isBar : bool\n      data : series<string, float>\n      colors : string[] option\n      inlineLabels : bool\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setStyle(?inlineLabels) = \n    { y with inlineLabels = defaultArg inlineLabels y.inlineLabels }\n  member y.setColors(?colors) = \n    { y with colors = defaultArg colors y.colors }\n  member y.show(outputId) = \n    InteractiveHelpers.showStaticApp outputId y.options y.data\n      (fun data size -> \n        let cc = defaultArg y.colors vega10\n        Charts.renderColsBars y.isBar y.inlineLabels y.options size cc (Seq.map fst data) data)\n\n\ntype CompostLineAreaChart =\n  private \n    { isArea : bool\n      data : series<obj, obj>\n      lineColor : string option\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setColors(?lineColor) = \n    { y with lineColor = defaultArg lineColor y.lineColor }\n  member y.show(outputId) = \n    InteractiveHelpers.showStaticApp outputId y.options y.data\n      (fun data size -> \n        let lc = defaultArg y.lineColor \"#1f77b4\"\n        Charts.renderLines y.isArea y.options size [| lc |] [\"Data\"] [| data |])\n\n\ntype CompostLinesAreasChart =\n  private \n    { isArea : bool\n      data : series<obj, obj>[]\n      lineColors : string[] option\n  // [copy-paste]\n      options : ChartOptions }  \n  member y.setEmptyMessage(message) =\n    { y with options = { y.options with emptyMessage = Some message } }\n  member y.setTitle(?title) =\n    { y with options = { y.options with title = title } }\n  member y.setLegend(position) = \n    { y with options = { y.options with legend = { position = position } } }\n  member y.setSize(?width, ?height) = \n    { y with options = { y.options with size = (orElse width (fst y.options.size), orElse height (snd y.options.size)) } }\n  member y.setAxisX(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.xAxis with minValue = orElse minValue y.options.xAxis.minValue; maxValue = orElse maxValue y.options.xAxis.maxValue; label = orElse label y.options.xAxis.label; labelOffset = orElse labelOffset y.options.xAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.xAxis.labelMinimalSize }\n    { y with options = { y.options with xAxis = ax } }\n  member y.setAxisY(?minValue, ?maxValue, ?label, ?labelOffset, ?labelMinimalSize) = \n    let ax = { y.options.yAxis with minValue = orElse minValue y.options.yAxis.minValue; maxValue = orElse maxValue y.options.yAxis.maxValue; label = orElse label y.options.yAxis.label; labelOffset = orElse labelOffset y.options.yAxis.labelOffset; labelMinimalSize = orElse labelMinimalSize y.options.yAxis.labelMinimalSize  }\n    { y with options = { y.options with yAxis = ax } }\n  // [/copy-paste]\n  member y.setColors(?lineColors) = \n    { y with lineColors = defaultArg lineColors y.lineColors }\n  member y.show(outputId) = Async.StartImmediate <| async {\n    let! data = Async.Parallel [ for d in y.data -> Async.AwaitFuture d.data ]\n    let allData = y.data |> Seq.fold (fun (s1:series<_,_>) s2 -> s1.append(s2)) (series<int,int>.create(async.Return [||], \"\", \"\", \"\"))\n    return! InteractiveHelpers.showStaticAppAsync outputId y.options allData\n      (fun size -> \n        let lcs = defaultArg y.lineColors vega10\n        Charts.renderLines y.isArea y.options size lcs (y.data |> Seq.map (fun s -> s.seriesName)) data) }\n      \ntype CompostCharts() = \n  member c.bubbles(data:series<'k, 'v>) = \n    CompostBubblesChart<'k, 'v>(data)\n  member c.line(data:series<'k, 'v>) = \n    { CompostLineAreaChart.data = unbox data; lineColor = None; options = ChartOptions.Default; isArea = false }\n  member c.area(data:series<'k, 'v>) = \n    { CompostLineAreaChart.data = unbox data; lineColor = None; options = ChartOptions.Default; isArea = true }\n  member c.lines(data:series<'k, 'v>[]) = \n    { CompostLinesAreasChart.data = unbox data; lineColors = None; options = ChartOptions.Default; isArea = false }\n  member c.areas(data:series<'k, 'v>[]) = \n    { CompostLinesAreasChart.data = unbox data; lineColors = None; options = ChartOptions.Default; isArea = true }\n  member c.bar(data:series<string, float>) = \n    { CompostColBarChart.data = data; colors = None; options = ChartOptions.Default; isBar = true; inlineLabels = false }\n  member c.column(data:series<string, float>) = \n    { CompostColBarChart.data = data; colors = None; options = ChartOptions.Default; isBar = false; inlineLabels = false }\n\ntype compost = \n  static member charts = CompostCharts()\n","﻿module TheGamma.Ast\n\n/// Create a node with given range and value\nlet node rng node =\n  { Entity = None\n    WhiteBefore = []\n    WhiteAfter = [] \n    Node = node\n    Range = rng }\n\n/// Does an identifier need escaping?\nlet needsEscaping (s:string) = \n  (s.[0] >= '0' && s.[0] <= '9') ||\n  (s.ToCharArray() |> Array.exists (fun c -> not ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) ))\n\n/// Escape identifier if it needs escaping\nlet escapeIdent s = \n  if s = \"\" then \"''\"\n  elif needsEscaping s then \"'\" + s + \"'\" else s\n\n/// Union ranges, assuming Start <= End for each of them\nlet unionRanges r1 r2 =\n  { Start = min r1.Start r2.Start; End = max r1.End r2.End }\n\n/// Is the first range a strict sub-range of the second range\nlet strictSubRange first second = \n  (first.Start > second.Start && first.End <= second.End) ||\n  (first.Start >= second.Start && first.End < second.End)\n\n/// Format a single token (as it looks in the soruce code)\nlet formatToken = function\n  | TokenKind.LParen -> \"(\"\n  | TokenKind.RParen -> \")\"\n  | TokenKind.Equals -> \"=\"\n  | TokenKind.Dot -> \".\"\n  | TokenKind.Comma -> \",\"\n  | TokenKind.Colon -> \":\"\n  | TokenKind.Let -> \"let\"\n  | TokenKind.LSquare -> \"[\"\n  | TokenKind.RSquare -> \"]\"\n  | TokenKind.Fun -> \"fun\"\n  | TokenKind.Arrow -> \"->\"\n  | TokenKind.Operator Operator.Modulo -> \"%\"\n  | TokenKind.Operator Operator.Divide -> \"/\"\n  | TokenKind.Operator Operator.GreaterThan -> \">\"\n  | TokenKind.Operator Operator.GreaterThanOrEqual -> \">=\"\n  | TokenKind.Operator Operator.LessThan -> \"<\"\n  | TokenKind.Operator Operator.LessThanOrEqual -> \"<=\"\n  | TokenKind.Operator Operator.Minus -> \"-\"\n  | TokenKind.Operator Operator.Multiply -> \"*\"\n  | TokenKind.Operator Operator.Plus -> \"+\"\n  | TokenKind.Operator Operator.Power -> \"^\"\n  | TokenKind.Operator Operator.Equals -> \"=\"\n  | TokenKind.Boolean true -> \"true\"\n  | TokenKind.Boolean false -> \"false\"\n  | TokenKind.Number(s, _) -> s\n  | TokenKind.String(s) -> \"\\\"\" + s.Replace(\"\\\\\", \"\\\\\\\\\").Replace(\"\\n\", \"\\\\n\").Replace(\"\\\"\", \"\\\\\\\"\") + \"\\\"\"\n  | TokenKind.Ident(i) -> i\n  | TokenKind.QIdent(q) -> \"'\" + q + \"'\"\n  | TokenKind.White(w) -> w\n  | TokenKind.Newline -> \"\\n\"\n  | TokenKind.Error(c) -> string c\n  | TokenKind.EndOfFile -> \"\"\n\n/// Return human readable description of a token\nlet formatTokenInfo = function\n  | TokenKind.LParen -> \"left parenthesis `(`\"\n  | TokenKind.RParen -> \"right parenthesis `)`\"\n  | TokenKind.Equals -> \"equals sign `=`\"\n  | TokenKind.Dot -> \"dot character `.`\"\n  | TokenKind.Comma -> \"comma character `,`\"\n  | TokenKind.Colon -> \"colon character `:`\"\n  | TokenKind.Let -> \"`let` keyword\"\n  | TokenKind.LSquare -> \"left square bracket `[`\"\n  | TokenKind.RSquare -> \"right square bracket `]`\"\n  | TokenKind.Fun -> \"`fun` keyword\"\n  | TokenKind.Arrow -> \"arrow sign `->`\"\n  | TokenKind.Operator Operator.Equals -> \"equals operator `=`\"\n  | TokenKind.Operator Operator.Divide -> \"division sign `/`\"\n  | TokenKind.Operator Operator.Modulo -> \"modulo operator `%`\"\n  | TokenKind.Operator Operator.GreaterThan -> \"greater than sign `>`\"\n  | TokenKind.Operator Operator.GreaterThanOrEqual -> \"greater than or equals sign `>=`\"\n  | TokenKind.Operator Operator.LessThan -> \"less than sign `<`\"\n  | TokenKind.Operator Operator.LessThanOrEqual -> \"less than or equals sign `<=`\"\n  | TokenKind.Operator Operator.Minus -> \"minus sign `-`\"\n  | TokenKind.Operator Operator.Multiply -> \"multiplication sign `*`\"\n  | TokenKind.Operator Operator.Plus -> \"plus sign `+`\"\n  | TokenKind.Operator Operator.Power -> \"exponentiation sign `^`\"\n  | TokenKind.Boolean true -> \"logical `true` value\"\n  | TokenKind.Boolean false -> \"logical `false` value\"\n  | TokenKind.Number(s, _) -> sprintf \"numerical value `%s`\" s\n  | TokenKind.String(s) -> sprintf \"string value `%s`\" (s.Replace(\"`\", \"'\"))\n  | TokenKind.Ident(i) -> sprintf \"identifer `%s`\" i\n  | TokenKind.QIdent(q) -> sprintf \"quoted identifer `'%s'`\" q\n  | TokenKind.White(w) -> \"whitespace\"\n  | TokenKind.Newline -> \"end of line\"\n  | TokenKind.Error('`') -> \"back-tick character\"\n  | TokenKind.Error(c) -> sprintf \"other character `%s`\" (string c)\n  | TokenKind.EndOfFile -> \"end of file\"\n\n/// Turns series of tokens into string, using their Token value\nlet formatTokens (tokens:seq<Token>) = \n  tokens |> Seq.map (fun t -> formatToken t.Token) |> String.concat \"\"\n\n/// When formatting expression, we append strings and then join them (should be fast in JS)\ntype FormattingContext = \n  { Strings : ResizeArray<string> }\n  member x.Add(tok) = x.Strings.Add(formatToken tok)\n\nlet formatNode (ctx:FormattingContext) f node =\n  for t in node.WhiteBefore do ctx.Add(t.Token)\n  f ctx node.Node\n  for t in node.WhiteAfter do ctx.Add(t.Token)\n  \nlet formatName (ctx:FormattingContext) (name:Name) = \n  if name.Name = \"\" then ()\n  elif needsEscaping name.Name then ctx.Add(TokenKind.QIdent name.Name)\n  else ctx.Add(TokenKind.Ident name.Name)\n\nlet rec formatArgument (ctx:FormattingContext) (arg:Argument) =\n  match arg.Name with \n  | Some name -> \n      formatNode ctx formatName name\n      ctx.Add(TokenKind.Equals)\n  | _ -> ()\n  formatNode ctx formatExpression arg.Value\n\n/// Format a single parsed expression, preserving the parsed whitespace\nand formatExpression (ctx:FormattingContext) expr = \n  match expr with\n  | Expr.Variable(n) -> \n      formatNode ctx formatName n\n  | Expr.Member(inst, mem) -> \n      formatNode ctx formatExpression inst\n      ctx.Add(TokenKind.Dot)\n      formatNode ctx formatExpression mem\n  | Expr.Call(inst, args) ->\n      formatNode ctx formatExpression inst\n      ctx.Add(TokenKind.LParen)\n      args |> formatNode ctx (fun ctx args -> \n        args |> List.iteri (fun i arg ->\n          if i <> 0 then ctx.Add(TokenKind.Comma)\n          formatArgument ctx arg ) )\n      ctx.Add(TokenKind.RParen)\n  | Expr.String s -> ctx.Add(TokenKind.String s)\n  | Expr.Number n -> ctx.Add(TokenKind.Number(string n, n))\n  | Expr.Boolean b -> ctx.Add(TokenKind.Boolean b)\n  | Expr.Binary(l, op, r) ->\n      formatNode ctx formatExpression l\n      op |> formatNode ctx (fun ctx op -> ctx.Add(TokenKind.Operator op))\n      formatNode ctx formatExpression r  \n  | Expr.Function(n, e) ->\n      ctx.Add(TokenKind.Fun)\n      formatNode ctx formatName n\n      ctx.Add(TokenKind.Arrow)\n      formatNode ctx formatExpression e\n  | Expr.Placeholder(n, e) ->\n      ctx.Add(TokenKind.LSquare)\n      formatNode ctx formatName n\n      ctx.Add(TokenKind.Colon)\n      formatNode ctx formatExpression e\n      ctx.Add(TokenKind.RSquare)\n  | Expr.List els ->\n      ctx.Add(TokenKind.LSquare)\n      for e in els do formatNode ctx formatExpression e\n      ctx.Add(TokenKind.RSquare)\n  | Expr.Empty -> ()\n\n/// Format a single parsed command, preserving the parsed whitespace\nlet formatCommand (ctx:FormattingContext) cmd = \n  match cmd with\n  | Command.Expr e -> \n      formatNode ctx formatExpression e\n  | Command.Let(n, e) -> \n      ctx.Add(TokenKind.Let)\n      formatNode ctx formatName n\n      ctx.Add(TokenKind.Equals)\n      formatNode ctx formatExpression e\n\n/// Format single parsed expression, preserving the parsed whitespace\nlet formatSingleExpression expr = \n  let ctx = { Strings = ResizeArray<_>() }\n  formatNode ctx formatExpression expr\n  System.String.Concat(ctx.Strings)\n\n/// Format parsed program, preserving the parsed whitespace\nlet formatProgram (prog:Program) = \n  let ctx = { Strings = ResizeArray<_>() }\n  prog.Body |> formatNode ctx (fun ctx cmds ->\n    for cmd in cmds do formatNode ctx (formatCommand) cmd)\n  System.String.Concat(ctx.Strings)\n\n/// Format all white space after the given expression\nlet formatWhiteAfterExpr nd = \n  let wa = \n    match nd.Node with \n    | Expr.Variable(n) -> n.WhiteAfter @ nd.WhiteAfter \n    | _ -> nd.WhiteAfter\n  String.concat \"\" [ for t in wa -> formatToken t.Token ]\n\n/// Format all white space before the given expression\nlet formatWhiteBeforeExpr nd = \n  let wa = \n    match nd.Node with \n    | Expr.Variable(n) -> nd.WhiteBefore @ n.WhiteBefore \n    | Expr.Member(_, m & { Node = Expr.Variable n }) -> nd.WhiteBefore @ m.WhiteBefore @ n.WhiteBefore\n    | _ -> nd.WhiteBefore\n  String.concat \"\" [ for t in wa -> formatToken t.Token ]\n\n/// Format entity kind into something readable\nlet formatEntityKind = function\n  | EntityKind.GlobalValue _ -> \"global value\"\n  | EntityKind.Variable _ -> \"variable\"\n  | EntityKind.Binding _ -> \"binding\"\n  | EntityKind.Operator(_, op, _) -> (formatToken (TokenKind.Operator op)) + \" operator\"\n  | EntityKind.List _ -> \"list\"\n  | EntityKind.Constant(Constant.Empty) -> \"empty value\"\n  | EntityKind.Constant(Constant.Number n) -> sprintf \"number `%f`\" n \n  | EntityKind.Constant(Constant.String n) -> sprintf \"string `%s`\" n \n  | EntityKind.Constant(Constant.Boolean true) -> \"`true` value\" \n  | EntityKind.Constant(Constant.Boolean false) -> \"`false` value\" \n  | EntityKind.Function _ -> \"function\"\n  | EntityKind.LetCommand _ -> \"let command\"\n  | EntityKind.RunCommand _ -> \"run command\"\n  | EntityKind.Program _ -> \"program\"\n  | EntityKind.Root _ -> \"root\"\n  | EntityKind.CallSite _ -> \"call site\"\n  | EntityKind.NamedParam _ -> \"named param\"\n  | EntityKind.Call _ -> \"call\"\n  | EntityKind.ArgumentList _ -> \"argument list\"\n  | EntityKind.Member _ -> \"member\"\n  | EntityKind.MemberAccess _ -> \"member access\"\n  | EntityKind.MemberName _ -> \"member name\"\n  | EntityKind.Placeholder _ -> \"placeholder\"\n\n/// Return entity name (or anonymous) and all its antecedants\nlet rec entityCodeNameAndAntecedents = function\n  | EntityKind.Root -> 0, [], \"<root>\"\n  | EntityKind.Program(ans) -> 1, ans, \"<program>\"\n  | EntityKind.RunCommand(an) -> 2, [an], \"<do>\"\n  | EntityKind.LetCommand(an1, an2) -> 3, [an1; an2], \"<let>\"\n  | EntityKind.Operator(an1, op, an2) -> 4, [an1; an2], (formatToken (TokenKind.Operator op))\n  | EntityKind.List(ans) -> 5, ans, \"<list>\"\n  | EntityKind.Constant(Constant.String s) -> 6, [], s\n  | EntityKind.Constant(Constant.Number n) -> 7, [], (string n)\n  | EntityKind.Constant(Constant.Boolean b) -> 8, [], (string b)\n  | EntityKind.Constant(Constant.Empty) -> 9, [], \"<empty>\"\n  | EntityKind.Function(an1, an2) -> 10, [an1; an2], \"<function>\"\n  | EntityKind.GlobalValue(n, _) -> 11, [], n.Name\n  | EntityKind.Variable(n, an) -> 12, [an], n.Name\n  | EntityKind.Binding(n, an) -> 13, [an], n.Name\n  | EntityKind.ArgumentList(ans) -> 14, ans, \"<args>\"\n  | EntityKind.Call(an1, an2) -> 15, [an1; an2], \"<call>\"\n  | EntityKind.Member(an1, an2) -> 16, [an1; an2], \"<member>\"\n  | EntityKind.MemberAccess(an) -> 17, [an], \"<member access>\"\n  | EntityKind.NamedParam(n, an) -> 18, [an], n.Name\n  | EntityKind.Placeholder(n, an) -> 19, [an], n.Name\n  | EntityKind.CallSite(an, Choice1Of2 s) -> 20, [an], s\n  | EntityKind.CallSite(an, Choice2Of2 m) -> 21, [an], string m\n  | EntityKind.MemberName(n) -> 22, [], n.Name\n\n/// Return the entity representing the name just before call in call chain\nlet rec lastChainElement ent = \n  match ent.Kind with\n  | EntityKind.Variable _ -> ent\n  | EntityKind.Member(_, mem) -> mem\n  | EntityKind.MemberAccess(mem) -> lastChainElement mem\n  | _ -> ent\n\n// Provide easy access to entity's antecedents\ntype Entity with\n  member x.Antecedents = let _, ans, _ = entityCodeNameAndAntecedents x.Kind in ans\n  member x.Name = let _, _, name = entityCodeNameAndAntecedents x.Kind in name\n\n/// Return full name of the type\nlet rec formatType = function\n  | Type.Delayed _ -> \"delayed type\"\n  | Type.Primitive PrimitiveType.Bool -> \"bool\"\n  | Type.Primitive PrimitiveType.Date -> \"date\"\n  | Type.Primitive PrimitiveType.Number -> \"number\"\n  | Type.Primitive PrimitiveType.String -> \"string\"\n  | Type.Primitive PrimitiveType.Unit -> \"unit\"\n  | Type.Object obj ->  \n      try \n        let mem = obj.Members\n        let mems = mem |> Seq.truncate 5 |> Seq.map (fun m -> m.Name) |> String.concat \", \"\n        \"{ \" + if mem.Length > 5 then mems + \", ...\" else mems + \" }\"\n      with _ -> \"{ members }\"\n  | Type.Method(tin, tout) -> \n      let tout = match tout [for ma in tin -> ma.Type, None ] with Some t -> formatType t | _ -> \"?\"\n      let tin = \n        [ for ma in tin -> \n            sprintf \"%s%s%s:%s\" (if ma.Optional then \"?\" else \"\") \n              (if ma.Static then \"!\" else \"\") ma.Name (formatType ma.Type) ]\n        |> String.concat \", \" \n      \"(\" + tin + \") -> \" + tout\n  | Type.List t -> \"list<\" + formatType t + \">\"\n  | Type.Any -> \"any\"\n\n/// Return readable name of the top-level node in the type\nlet formatTypeInfo = function\n  | Type.Delayed _ -> \"delayed type\"\n  | Type.Primitive PrimitiveType.Bool -> \"bool\"\n  | Type.Primitive PrimitiveType.Date -> \"date\"\n  | Type.Primitive PrimitiveType.Number -> \"number\"\n  | Type.Primitive PrimitiveType.String -> \"string\"\n  | Type.Primitive PrimitiveType.Unit -> \"unit\"\n  | Type.Object _ -> \"object type\"\n  | Type.Method _ -> \"method type\"\n  | Type.List _ -> \"list type\"\n  | Type.Any _ -> \"unknown\"\n\n/// When pattern matching using `ExprNode`, this function lets you rebuild\n/// the original node from the original expression, new expressions & names\nlet rebuildExprNode e es ns =\n  match e, es, ns with\n  | Expr.Placeholder(_, _), [e], [n] -> Expr.Placeholder(n, e)\n  | Expr.List(_), els, [] -> Expr.List(els)\n  | Expr.Function(_), [e], [n] -> Expr.Function(n, e)\n  | Expr.Member(_, _), [e1; e2], [] -> Expr.Member(e1, e2)\n  | Expr.Binary(_, op, _), [e1; e2], [] -> Expr.Binary(e1, op, e2)\n  | Expr.Call(_, args), e::es, ns ->\n      let rec rebuildArgs args es ns =\n        match args, es, ns with\n        | { Argument.Name = None }::args, e::es, ns -> { Value = e; Name = None }::(rebuildArgs args es ns)\n        | { Argument.Name = Some _ }::args, e::es, n::ns -> { Value = e; Name = Some n }::(rebuildArgs args es ns)\n        | [], [], [] -> []\n        | _ -> failwith \"rebuildExprNode: Wrong call length\"\n      Expr.Call(e, { args with Node = rebuildArgs args.Node es ns })\n  | Expr.Variable _, [], [n] -> Expr.Variable(n)\n  | Expr.Placeholder _, _, _ -> failwith \"rebuildExprNode: Wrong placeholder length\"\n  | Expr.Variable _, _, _ -> failwith \"rebuildExprNode: Wrong variable length\"\n  | Expr.Member _, _, _ -> failwith \"rebuildExprNode: Wrong member length\"\n  | Expr.Call _, _, _ -> failwith \"rebuildExprNode: Wrong call length\"\n  | Expr.List _, _, _ -> failwith \"rebuildExprNode: Wrong list length\"\n  | Expr.Function _, _, _ -> failwith \"rebuildExprNode: Wrong function length\"\n  | Expr.Binary _, _, _ -> failwith \"rebuildExprNode: Wrong binary operator argument length\"\n  | Expr.Number _, _, _\n  | Expr.Boolean _, _, _\n  | Expr.String _, _, _\n  | Expr.Empty, _, _ -> failwith \"rebuildExprNode: Not a node\"\n\n/// ExprNode matches when an expression contains nested expressions or names,\n/// ExprLeaf matches when an expression is a primitive (number, bool, etc..)\nlet (|ExprLeaf|ExprNode|) e = \n  match e with\n  | Expr.Placeholder(n, e) -> ExprNode([e], [n])\n  | Expr.Member(e1, e2) -> ExprNode([e1; e2], [])\n  | Expr.Call(e, args) -> ExprNode(e::[for a in args.Node -> a.Value ], (args.Node |> List.choose (fun a -> a.Name)))\n  | Expr.Variable(n) -> ExprNode([], [n])\n  | Expr.List(els) -> ExprNode(els, [])\n  | Expr.Function(n, b) -> ExprNode([b], [n])\n  | Expr.Binary(l, op, r) -> ExprNode([l; r], [])\n  | Expr.Number _\n  | Expr.Boolean _\n  | Expr.String _\n  | Expr.Empty -> ExprLeaf()\n\n/// Find object member with the specified name \nlet (|FindMember|_|) (name:Name) (obj:ObjectType) = \n  obj.Members |> Seq.tryPick (fun m -> if m.Name = name.Name then Some(m) else None) \n\n/// Return the first metadata item with the specified context & type (or None)\nlet pickMetaByType ctx typ metas = \n  metas |> List.tryPick (fun m -> \n    if m.Context = ctx && m.Type = typ then Some(m.Data)\n    else None)\n\n","export function createFromValue(v) {\r\n    return new Lazy(function () { return v; });\r\n}\r\nvar Lazy = (function () {\r\n    function Lazy(factory) {\r\n        this.factory = factory;\r\n        this.isValueCreated = false;\r\n    }\r\n    Object.defineProperty(Lazy.prototype, \"value\", {\r\n        get: function () {\r\n            if (!this.isValueCreated) {\r\n                this.createdValue = this.factory();\r\n                this.isValueCreated = true;\r\n            }\r\n            return this.createdValue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Lazy;\r\n}());\r\nexport default Lazy;\r\n","﻿// ------------------------------------------------------------------------------------------------\n// Interpreter is used to partially evaluate parts of program as needed\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Interpreter\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Common\nopen TheGamma.Babel\nopen TheGamma.Babel.BabelOperators\nopen Fable.Helpers.Babel\nopen System.Collections.Generic\n\n// ------------------------------------------------------------------------------------------------\n// Wrappers around `eval` that let us treat runtime values as `Expressions` we can pass to babel\n// ------------------------------------------------------------------------------------------------\n\n/// Creates an array of objects and list of expressions that refer\n/// to them as if they were stored in an array, e.g. `_stored[0]` and `_stored[1]`\nlet storeArguments values =\n  values |> Array.ofList, \n  values |> List.mapi (fun i _ ->\n    MemberExpression\n      ( IdentifierExpression(\"_stored\", None),\n        NumericLiteral(float i, None), true, None ))\n\n/// Evalaute Babel expression, assuming `_stored` is in scope\nlet evaluateExpression (_stored:RuntimeValue[]) (expr:Expression) =\n  let prog = { Babel.Program.location = None; Babel.Program.body = [ExpressionStatement(expr, None)] }\n  let code = babel.transformFromAst(Serializer.serializeProgram prog, \"\", { presets = [| \"es2015\" |] })\n  Log.trace(\"interpreter\", \"Interpreter evaluating: %O using values %O\", code.code, _stored)\n  try\n    // HACK (1/2): Get fable to reference everything\n    let s = TheGamma.Series.series<int, int>.create(async { return [||] }, \"\", \"\", \"\") \n    TheGamma.TypeProvidersRuntime.RuntimeContext(\"lol\", \"\", \"troll\") |> ignore\n    TheGamma.TypeProvidersRuntime.trimLeft |> ignore\n    TheGamma.TypeProvidersRuntime.convertTupleSequence |> ignore\n    TheGamma.TypeProvidersRuntime.convertSequence |> ignore\n    TheGamma.GoogleCharts.chart.bar |> ignore\n    TheGamma.table<int, int>.create(s) |> ignore\n    TheGamma.General.date.now() |> ignore\n    TheGamma.Series.series<int, int>.values([| 1 |]) |> ignore    \n    TheGamma.placeholder.create(\"\") |> ignore\n    TheGamma.Interactive.youguess.line |> ignore\n\n    // HACK (2/2) The name `_stored` may appear in the generated code!\n    _stored.Length |> ignore\n    eval(code.code)\n  with e ->\n    Log.exn(\"interpreter\", \"Evaluation failed: %O\", e)\n    reraise()\n\n/// Store given arguments and evalaute expression\nlet evaluateExpr args exprBuilder =\n  let _stored, args = storeArguments args\n  evaluateExpression _stored (exprBuilder args)\n\n/// If the value is object with 'preview' method or property, evaluate it!\nlet evaluatePreview (ent:Entity) value = \n  let previewName = {Name.Name=\"preview\"}\n  Log.trace(\"interpreter\", \"Evaluating preview on: %O (%s)\", ent, Ast.formatType ent.Type.Value)\n  match ent.Type with\n  | Some(Type.Object(FindMember previewName mem)) ->       \n      // Member access or member access & call, depending on whether the member is a method\n      match mem.Type with\n      | Type.Method(_, _) -> evaluateExpr [value] (fun inst -> mem.Emitter.Emit(List.head inst) /@/ []) |> Some\n      | _ -> evaluateExpr [value] (fun inst -> mem.Emitter.Emit(List.head inst)) |> Some\n  | _ -> None\n\n// ------------------------------------------------------------------------------------------------\n// Recursively walk over entities & evaluate (starting from antecedents)\n// ------------------------------------------------------------------------------------------------\n\nlet rec evaluateEntity (e:Entity) = \n  match e.Kind with\n  // Constants, variables & global values (using expression stored in GlobalValue entity)\n  | EntityKind.Constant(Constant.Boolean b) -> Some(unbox b)\n  | EntityKind.Constant(Constant.Number n) -> Some(unbox n)\n  | EntityKind.Constant(Constant.String s) -> Some(unbox s)\n  | EntityKind.Constant(Constant.Empty) -> Some(unbox null)\n\n  | EntityKind.Variable(_, value) ->\n      value.Value |> Option.map (fun v -> v.Value)\n\n  | EntityKind.GlobalValue(name, expr) ->\n      match expr with\n      | Some expr -> Some(evaluateExpression [| |] expr)\n      | _ -> None\n\n  // Member access and call - method call is member access followed by a call\n  | EntityKind.Member(inst, { Kind = EntityKind.MemberName(name) }) ->\n      match inst.Type.Value with \n      | Type.Object(FindMember name mem) -> \n          Some(evaluateExpr [getValue inst] (fun inst -> mem.Emitter.Emit(List.head inst)))\n      | _ -> None\n\n  | EntityKind.MemberAccess(mem) ->\n      Some(getValue mem)\n  \n  | EntityKind.Call(inst, { Kind = EntityKind.ArgumentList(args) }) ->\n      // Split arguments between index-based and position-based\n      let pb = args |> List.takeWhile (function { Kind = EntityKind.NamedParam _ } -> false | _ -> true)  \n      let nb = args |> List.skipWhile (function { Kind = EntityKind.NamedParam _ } -> false | _ -> true)  \n\n      let positionBased = \n        pb |> List.map (getValue) |> Array.ofList\n      let nameBased =   \n        nb |> List.choose(function \n          | { Kind = EntityKind.NamedParam(name, value) } -> Some(name.Name, getValue value)\n          | _ -> None) |> dict\n\n      // Get expected arguments from the method type\n      let expectedArgs = \n        match inst.Type.Value with\n        | Type.Method(args, resTy) -> args\n        | _ -> []\n\n      // Evalate arguments and instance and run the call \n      let pars = expectedArgs |> List.mapi (fun i ma ->\n        if i < positionBased.Length then positionBased.[i]\n        elif nameBased.ContainsKey(ma.Name) then nameBased.[ma.Name]\n        else (unbox null) )\n\n      match inst with \n      | { Kind = EntityKind.MemberAccess { Kind = EntityKind.Member(inst, { Kind = EntityKind.MemberName(n) }) } } ->\n          let instValue = getValue inst\n          match inst.Type with \n          | Some(Type.Object(FindMember n mem)) ->\n              evaluateExpr (instValue::pars) (fun stored -> mem.Emitter.Emit(List.head stored) /@/ List.tail stored)\n          | _ ->\n              evaluateExpr (instValue::pars) (fun stored -> ((List.head stored) /?/ str n.Name) /@/ List.tail stored)\n      | _ ->\n          let instValue = getValue inst\n          evaluateExpr (instValue::pars) (fun stored -> List.head stored /@/ List.tail stored)\n\n  | EntityKind.Member(inst, _) ->\n      Log.error(\"interpreter\", \"typeCheckEntity: Member access is missing member name!\")\n      None\n  | EntityKind.Call(inst, _) ->\n      Log.error(\"interpreter\", \"typeCheckEntity: Call to %s is missing argument list!\", (lastChainElement inst).Name)\n      None\n\n  // Binary operators - most map to JavaScript except for power, which is a JS function\n  | EntityKind.Operator(l, Operator.Power, r) ->\n      evaluateExpr [getValue l; getValue r] (function \n        | [l; r] -> ident(\"Math\")?pow /@/ [l; r]\n        | _ -> failwith \"evaluateEntity: Expected two arguments\") |> Some      \n\n  | EntityKind.Operator(l, op, r) ->\n      evaluateExpr [getValue l; getValue r] (function \n        | [l; r] -> \n            let op = \n              match op with\n              | Operator.Modulo -> BinaryModulus\n              | Operator.Equals -> BinaryEqualStrict\n              | Operator.Plus -> BinaryPlus\n              | Operator.Minus -> BinaryMinus\n              | Operator.Multiply -> BinaryMultiply\n              | Operator.Divide -> BinaryDivide\n              | Operator.GreaterThan -> BinaryGreater\n              | Operator.LessThan -> BinaryLess\n              | Operator.GreaterThanOrEqual -> BinaryGreaterOrEqual\n              | Operator.LessThanOrEqual -> BinaryLessOrEqual\n              | Operator.Power -> failwith \"evaluateEntity: Power is not a binary operation\"\n            BinaryExpression(op, l, r, None)\n        | _ -> failwith \"evaluateEntity: Expected two arguments\") |> Some            \n\n  // Other simple language constructs\n  | EntityKind.List(ents) ->\n      evaluateExpr (List.map (getValue) ents) (fun elements ->\n        ArrayExpression(elements, None)) |> Some\n\n  | EntityKind.Placeholder(_, body) ->\n      Some(getValue body)\n\n  // The following entities do not represent anything that has a value      \n  | EntityKind.ArgumentList _\n  | EntityKind.NamedParam _\n  | EntityKind.MemberName _\n  | EntityKind.Binding _\n  | EntityKind.Root _\n  | EntityKind.CallSite _ ->\n      Some(unbox null)\n\n  | EntityKind.Function _\n  | EntityKind.Program _ \n  | EntityKind.LetCommand _ \n  | EntityKind.RunCommand _ -> \n      Log.error(\"interpreter\", \"Cannot evaluate entity (probably not supported yet): %O\", e)\n      None\n\n// Evaluate value and lazily generate preview, if it is None\nand ensureValue (e:Entity) = \n  if e.Value.IsNone then\n    match evaluateEntity e with\n    | Some value ->\n        e.Value <- Some { Value = value; Preview = Lazy.Create(fun () -> evaluatePreview e value) }\n    | _ -> ()\n\n/// Get value assumes that `evaluateEntityTree` evaluated antecedents already\nand getValue (e:Entity) = \n  if e.Value.IsNone then Log.error(\"interpreter\", \"getValue: Value of entity %O has not been evaluated.\", e)\n  e.Value.Value.Value\n\n/// Evalaute antecedents (caching them in `visited`) and then evalaute `e`\nlet evaluateEntityTree (e:Entity) = \n  let visited = Dictionary<Symbol, bool>()\n  let rec loop (e:Entity) = \n    if not (visited.ContainsKey(e.Symbol)) && e.Value.IsNone then\n      visited.[e.Symbol] <- true\n      for e in e.Antecedents do loop e\n      ensureValue e\n  loop e\n  e.Value \n\n// ------------------------------------------------------------------------------------------------\n// Public interface - creating global entities and evaluating entities\n// ------------------------------------------------------------------------------------------------\n\nlet globalEntity name meta typ expr = \n  { Kind = EntityKind.GlobalValue({ Name = name }, expr)\n    Symbol = createSymbol()\n    Type = Some typ\n    Meta = meta\n    Value = None\n    Errors = [] }\n\nlet evaluate (globals:seq<Entity>) (e:Entity) = \n  //Log.trace(\"interpreter\", \"Evaluating entity %s (%O)\", e.Name, e.Kind)\n  let res = evaluateEntityTree e\n  //Log.trace(\"interpreter\", \"Evaluated entity %s (%O) = %O\", e.Name, e.Kind, res)\n  res\n","﻿module TheGamma.Types\nopen TheGamma.Common\n\n// ------------------------------------------------------------------------------------------------\n// Helper functions for working with types\n// ------------------------------------------------------------------------------------------------\n\nlet rec listsEqual l1 l2 f = \n  match l1, l2 with\n  | [], [] -> true\n  | x::xs, y::ys when f x y -> listsEqual xs ys f\n  | _ -> false \n\nlet optionsEqual o1 o2 f = \n  match o1, o2 with\n  | None, None -> true\n  | Some v1, Some v2 -> f v1 v2\n  | _ -> false\n\nlet rec typesEqual t1 t2 = \n  match t1, t2 with\n  | Type.Any, _ | _, Type.Any -> true\n  | Type.List t1, Type.List t2 -> typesEqual t1 t2\n  | Type.Method(a1, r1), Type.Method(a2, r2) -> \n      optionsEqual (r1 [for ma in a1 -> ma.Type, None]) (r2 [for ma in a2 -> ma.Type, None]) typesEqual &&\n      listsEqual a1 a2 (fun m1 m2 -> m1.Name = m2.Name && m1.Optional = m2.Optional && m1.Static = m2.Static && typesEqual m1.Type m2.Type)\n  | Type.Object(o1), Type.Object(o2) -> o1.TypeEquals(o2)\n  | Type.Primitive n1, Type.Primitive n2 -> n1 = n2  \n  | _ -> false\n","﻿// ------------------------------------------------------------------------------------------------\n// F# provider makes it possible to use Fable-compiled F# types (even with generics!)\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.TypeProviders.FSharpProvider\n\nopen TheGamma\nopen TheGamma.Babel\nopen TheGamma.Babel.BabelOperators\nopen TheGamma.Common\nopen Fable.Import\nopen ProviderHelpers\n\n// ------------------------------------------------------------------------------------------------\n// Records that represent the JSON with metadata about the F# types\n// ------------------------------------------------------------------------------------------------\n\n/// AnyType has `kind` property accessible via `getKind`\ntype AnyType = obj\n\ntype GenericParameterType = \n  { kind : string \n    name : string }\n\ntype ArrayType = \n  { kind : string \n    element : AnyType }\n\ntype PrimitiveType = \n  { kind : string \n    name : string }\n\ntype FunctionType = \n  { kind : string \n    arguments : AnyType[]\n    returns : AnyType }\n\ntype NamedType = \n  { kind : string \n    name : string\n    typargs : AnyType[] }\n\n/// Member has `kind` property accessible via `getKind`\ntype Member = obj\n\ntype Argument = \n  { name : string\n    optional : bool\n    ``type`` : AnyType }\n\ntype MethodMember = \n  { kind : string\n    name : string \n    typepars : AnyType[]\n    arguments:Argument[]\n    returns : AnyType }\n\ntype PropertyMember = \n  { kind : string\n    name : string \n    returns : AnyType }\n\ntype ExportedType = \n  { name : string\n    typepars : AnyType[]\n    ``static`` : bool \n    instance : string[]\n    members : Member[] }\n\n// ------------------------------------------------------------------------------------------------\n// Special-case `ObjectTypes` for handling of generics \n// ------------------------------------------------------------------------------------------------\n\n/// Represents a fully applied generic type such as `Series<string, int>`\ntype GenericType =\n  inherit ObjectType\n  abstract TypeArguments : Type list\n  abstract TypeDefinition : GenericTypeDefinition\n\n/// Represents an applied generic type that may contain type parameters e.g. `Series<string, 'V>`\nand GenericTypeSchema = \n  inherit ObjectType\n  abstract TypeDefinition : GenericTypeDefinition\n  abstract TypeArguments : TypeSchema list\n  abstract Substitute : (string -> Type option) -> GenericType\n\n/// Represents a generic type definition such as `Series'2`\nand GenericTypeDefinition = \n  inherit ObjectType\n  abstract FullName : string\n  abstract TypeParameterCount : int\n  abstract Apply : TypeSchema list -> GenericTypeSchema\n\n/// Representation of types that may contain type parameters e.g. `Series<string, 'v>[]`\nand TypeSchema = \n  | Primitive of Type\n  | GenericType of GenericTypeSchema\n  | Parameter of string\n  | Function of TypeSchema list * TypeSchema\n  | List of TypeSchema\n\n// ------------------------------------------------------------------------------------------------\n// Operations on types and type schemas\n// ------------------------------------------------------------------------------------------------\n\nlet rec mapGenericType typ g =\n  match typ with \n  | Type.Delayed(f) -> \n      Type.Delayed(Async.CreateNamedFuture \"applyTypes\" <| async {\n        let! res = Async.AwaitFuture f\n        return mapGenericType res g })\n  | Type.Object(:? GenericTypeDefinition as gtd) -> \n      Type.Object(gtd.Apply([ for t in g gtd -> TypeSchema.Primitive t]).Substitute(fun _ -> None))\n  | t -> t\n\nlet rec applyTypes typ tyargs =\n  match typ with \n  | Type.Delayed(f) -> \n      Type.Delayed(Async.CreateNamedFuture \"applyTypes\" <| async {\n        let! res = Async.AwaitFuture f\n        return applyTypes res tyargs })\n  | Type.Object(:? GenericTypeDefinition as gtd) -> \n      Type.Object(gtd.Apply([ for t in tyargs -> TypeSchema.Primitive t]).Substitute(fun _ -> None))\n  | _ -> failwith \"applyTypes: Expected generic type definition\"\n      \nlet rec unifyTypes ctx schemas tys = \n  match schemas, tys with\n  | [], [] -> Some ctx\n  | TypeSchema.GenericType(gs)::ss, Type.Object(:? GenericType as gt)::ts \n      when gt.TypeDefinition.FullName = gs.TypeDefinition.FullName && \n        List.length gs.TypeArguments = List.length gt.TypeArguments ->\n      unifyTypes ctx (gs.TypeArguments @ ss) (gt.TypeArguments @ ts)\n  | TypeSchema.Primitive(t1)::ss, t2::ts when Types.typesEqual t1 t2 -> unifyTypes ctx ss ts\n  | TypeSchema.Parameter(n)::ss, t::ts -> unifyTypes ((n,t)::ctx) ss ts\n  | TypeSchema.List(s)::ss, Type.List(t)::ts -> unifyTypes ctx (s::ss) (t::ts)\n  | TypeSchema.Function(sa, sr)::ss, Type.Method(ta, tr)::ts when List.length sa = List.length ta -> \n      let ta = [ for ma in ta -> ma.Type, None ]\n      let tr = defaultArg (tr ta) Type.Any // TODO: This should probably never be None\n      unifyTypes ctx (sr::(sa @ ss)) (tr::((List.map fst ta) @ ts)) \n  | TypeSchema.GenericType(_)::_, _ \n  | TypeSchema.Primitive(_)::_, _ \n  | TypeSchema.List(_)::_, _ \n  | TypeSchema.Function(_)::_, _ \n  | [], _\n  | _, [] -> \n    match schemas, tys with\n    | s::_, t::_ -> Log.trace(\"providers\", \"Failed to unify types %O and %O\", s, t)\n    | _ -> Log.trace(\"providers\", \"Failed to unify types %O and %O\", schemas, tys)\n    None\n\nlet rec substituteTypeParams assigns schema = \n  match schema with\n  | TypeSchema.GenericType ts -> Type.Object(ts.Substitute assigns)\n  | TypeSchema.Primitive t -> t\n  | TypeSchema.List s -> Type.List (substituteTypeParams assigns s)\n  | TypeSchema.Parameter n -> match assigns n with Some t -> t | _ -> failwith \"substituteTypeParams: unresolved type parameter\"\n  | TypeSchema.Function(is, rs) -> \n      let args = is |> List.map (fun it -> { MethodArgument.Name = \"\"; Optional = false; Static = false; Type = substituteTypeParams assigns it })\n      Type.Method(args, fun _ -> Some(substituteTypeParams assigns rs)) // TODO: This should check input arguments\n\nlet rec partiallySubstituteTypeParams (assigns:string -> Type option) schema = \n  match schema with\n  | TypeSchema.Primitive t -> TypeSchema.Primitive t\n  | TypeSchema.List s -> TypeSchema.List (partiallySubstituteTypeParams assigns s)\n  | TypeSchema.Parameter n when (assigns n).IsSome -> TypeSchema.Primitive(assigns(n).Value) \n  | TypeSchema.Parameter n -> TypeSchema.Parameter n\n  | TypeSchema.Function(is, rs) -> \n      TypeSchema.Function\n        ( List.map (partiallySubstituteTypeParams assigns) is, \n          partiallySubstituteTypeParams assigns rs )\n  | TypeSchema.GenericType ts ->\n      { new GenericTypeSchema with\n          member x.Members = failwith \"Uninstantiated generic type schema\"\n          member x.TypeEquals _ = failwith \"Uninstantiated generic type schema\"\n          member x.TypeArguments = List.map (partiallySubstituteTypeParams assigns) ts.TypeArguments\n          member x.TypeDefinition = ts.TypeDefinition\n          member x.Substitute assigns2 =\n            ts.Substitute (fun n ->\n              match assigns2 n, assigns n with\n              | Some t, _ \n              | _, Some t -> Some t\n              | _ -> None) } |> TypeSchema.GenericType    \n   \n/// This way of accessing `kind` of `AnyType` or `Member` works both in .NET and in JS\n[<Emit(\"$0.kind\")>]\nlet getKind (o:obj) : string = \n  o.GetType().GetProperty(\"kind\").GetValue(o) :?> string\n\n\n// Needs to be delayed to avoid calling lookupNamed too early\nlet importProvidedType url lookupNamed exp = \n  let rec mapType (t:AnyType) = \n    match getKind t with\n    | \"primitive\" -> \n        ( match (unbox<PrimitiveType> t).name with\n          | \"object\" -> Type.Any\n          | \"int\" | \"float\" -> Type.Primitive PrimitiveType.Number\n          | \"string\" -> Type.Primitive PrimitiveType.String\n          | \"bool\" -> Type.Primitive PrimitiveType.Bool\n          | \"unit\" -> Type.Primitive PrimitiveType.Unit\n          | \"date\" -> Type.Primitive PrimitiveType.Date\n          | t -> failwith (\"provideFSharpType: Unsupported type: \" + t) )\n        |> TypeSchema.Primitive\n    | \"function\"->\n        let t = unbox<FunctionType> t\n        TypeSchema.Function(List.ofSeq (Array.map mapType t.arguments),mapType t.returns)\n    | \"named\" -> \n        let t = (unbox<NamedType> t)\n        let tyargs = List.ofArray (Array.map mapType t.typargs)\n        match lookupNamed t.name with\n        | Type.Object (:? GenericTypeDefinition as gtd) -> \n            if gtd.TypeParameterCount <> List.length tyargs then \n              failwith \"provideFSharpType: Named type has mismatching nuumber of arguments\"\n            gtd.Apply tyargs |> TypeSchema.GenericType \n        | t -> TypeSchema.Primitive t\n    | \"parameter\" -> TypeSchema.Parameter (unbox<GenericParameterType> t).name\n    | \"array\" -> TypeSchema.List(mapType (unbox<ArrayType> t).element)\n    | _ -> failwith \"provideFSharpType: Unexpected type\"\n\n  let getTypeParameters typars = \n    typars |> Array.map (fun t -> \n      match mapType t with\n      | TypeSchema.Parameter(n) -> n\n      | _ -> failwith \"importProvidedType: expected type parameter\") |> List.ofArray\n\n  let generateMembers assigns = \n    exp.members |> Array.choose (fun m ->\n      if getKind m = \"property\" then\n        let m = unbox<PropertyMember> m\n        let retTyp = substituteTypeParams assigns (mapType m.returns)\n        let emitter = { Emit = fun inst -> MemberExpression(inst, IdentifierExpression(m.name, None), false, None) }\n        Some { Member.Name = m.name; Type = retTyp; Metadata = []; Emitter = emitter }\n\n      elif getKind m = \"method\" then\n        let m = unbox<MethodMember> m\n        let typars = getTypeParameters m.typepars \n        // Do not substitute bound variables\n        let assigns n = if List.exists ((=) n) typars then None else assigns n\n\n        let args = [ for a in m.arguments -> a.name, a.optional, partiallySubstituteTypeParams assigns (mapType a.``type``) ]\n        let emitter = { Emit = fun inst -> MemberExpression(inst, IdentifierExpression(m.name, None), false, None) }\n            \n        let retTyp = partiallySubstituteTypeParams assigns (mapType m.returns)\n        let retFunc tys =\n          let tys = List.map fst tys\n          Log.trace(\"providers\", \"F# provider unifying: %O, %O\", [| for _, _, t in args -> t |], Array.ofList tys)\n          match unifyTypes [] [ for _, _, t in args -> t ] tys with \n          | None -> None\n          | Some assigns ->\n              let assigns =\n                assigns \n                |> Seq.groupBy fst\n                |> Seq.map (fun (p, tys) ->\n                    p, tys |> Seq.fold (fun st (_, ty2) ->\n                      match st with\n                      | Some ty1 -> if Types.typesEqual ty1 ty2 then Some ty2 else None\n                      | None -> None) (Some Type.Any) )\n                |> Seq.fold (fun assigns assign ->\n                  match assigns, assign with\n                  | Some assigns, (p, Some assign) -> Some ((p,assign)::assigns)\n                  | _ -> None) (Some [])\n              match assigns with\n              | Some assigns when List.length assigns = List.length typars ->\n                  let assigns = dict assigns\n                  let subst n = if assigns.ContainsKey n then Some assigns.[n] else None\n                  Some (substituteTypeParams subst retTyp)\n              | _ -> None\n\n        // How to show type parameters before they are eliminated?\n        let args = [ for n, o, t in args -> { MethodArgument.Name = n; Optional = o; Static = false; Type = substituteTypeParams (fun _ -> Some Type.Any) t } ] \n        Some { Member.Name = m.name; Type = Type.Method(args, retFunc); Metadata = []; Emitter = emitter }\n      else None)\n\n  let objectType = \n    match getTypeParameters exp.typepars with\n    | [] -> \n        { new ObjectType with\n            member x.Members = generateMembers (fun _ -> None) \n            member x.TypeEquals _ = false }\n    | typars ->\n        { new GenericTypeDefinition with\n            member td.TypeParameterCount = List.length typars\n            member td.FullName = TypeProvidersRuntime.concatUrl url exp.name\n            member td.Members = failwithf \"Uninstantiated generic type definition (%s)\" td.FullName\n            member td.TypeEquals _ = failwithf \"Uninstantiated generic type definition (%s)\" td.FullName\n            member td.Apply tyargs = \n              { new GenericTypeSchema with\n                  member x.Members = failwith \"Uninstantiated generic type schema\"\n                  member x.TypeDefinition = td\n                  member x.TypeEquals _ = failwith \"Uninstantiated generic type schema\"\n                  member x.Substitute assigns = \n                    // Lazy so that lookupNamed does not get called too early\n                    let tyArgLookup = dict (List.zip typars tyargs)\n                    let members = lazy generateMembers (fun n ->\n                      match tyArgLookup.TryGetValue n with\n                      | true, tysch -> Some(substituteTypeParams assigns tysch)\n                      | _ -> None)\n\n                    { new GenericType with\n                        member x.TypeArguments = List.map (substituteTypeParams assigns ) tyargs\n                        member x.TypeDefinition = td\n                        member x.Members = members.Value\n                        member x.TypeEquals t2 = \n                          match t2 with\n                          | :? GenericType as gt ->\n                              gt.TypeDefinition.FullName = x.TypeDefinition.FullName &&\n                                Types.listsEqual x.TypeArguments gt.TypeArguments Types.typesEqual\n                          | _ -> false }\n                  member x.TypeArguments = tyargs } } :> _\n    \n  objectType |> Type.Object\n\nlet provideFSharpTypes lookupNamed url =   \n  async {\n    let! json = Http.Request(\"GET\", url)\n    let expTys = jsonParse<ExportedType[]> json\n    return\n      [ for exp in expTys ->\n          let ty = importProvidedType url lookupNamed exp\n          if exp.``static`` then           \n            let e = exp.instance |> Seq.fold (fun chain s -> \n              match chain with\n              | None -> Some(IdentifierExpression(s, None))\n              | Some e -> Some(MemberExpression(e, IdentifierExpression(s, None), false, None)) ) None |> Option.get\n            let ty = mapGenericType ty (fun gtd -> [ for i in 1 .. gtd.TypeParameterCount -> Type.Any ])\n            ProvidedType.GlobalValue(exp.name, [], e, ty)\n          else\n            ProvidedType.NamedType(exp.name, ty) ] }\n","﻿// ------------------------------------------------------------------------------------------------\n// REST type provider\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.TypeProviders.RestProvider\n\nopen TheGamma\nopen TheGamma.Babel\nopen TheGamma.Babel.BabelOperators\nopen TheGamma.Common\nopen TheGamma.TypeProviders.ProviderHelpers\nopen Fable.Import\n\n// ------------------------------------------------------------------------------------------------\n// Types to represent JSON data returned by REST service\n// ------------------------------------------------------------------------------------------------\n\ntype AnyType = { kind:string }\ntype TypeNested = { kind:string (* = nested *); endpoint:string }\ntype TypeProvider = { kind:string (* = provider *); provider:string; endpoint:string }\ntype TypePrimitive = { kind:string (* = primitive *); ``type``:obj; endpoint:string }\n\n[<Fable.Core.Emit(\"typeof($0)\")>]\nlet jstypeof (o:obj) : string = failwith \"!\"\n\ntype Documentation = \n  { title : string option\n    details : string option }\n\ntype Parameter =\n  { name : string\n    optional : bool\n    kind : string\n    cookie : string option\n    trace : string option\n    ``type`` : obj }\n\ntype Member =\n  { name : string\n    returns : AnyType\n    parameters : Parameter[] option\n    documentation : obj option\n    schema : obj[]\n    trace : string[] }\n\ntype ResultType = \n  | Primitive of string\n  | Generic of string * ResultType[]\n  | Record of (string * ResultType)[]\n\ntype RawField = \n  { name : string\n    ``type`` : obj }\n\ntype RawResultType = \n  { name : string \n    fields : RawField[]\n    ``params`` : obj[] }\n\nlet parseDoc (json:obj option) =\n  if json.IsNone then Documentation.None\n  elif jstypeof json.Value = \"string\" then Documentation.Text(unbox json)\n  else \n    let doc = unbox<Documentation> json.Value\n    match doc.title, doc.details with \n    | Some title, Some dets -> Documentation.Details(title, dets)\n    | _ -> Documentation.None\n\nlet rec fromRawType (json:obj) =\n  if jstypeof json = \"string\" then Primitive(unbox json)\n  else\n    let res = unbox<RawResultType> json\n    if res.name = \"record\" then res.fields |> Array.map (fun f -> f.name, fromRawType f.``type``) |> Record\n    else Generic(res.name, res.``params`` |> Array.map fromRawType)\n\n// ------------------------------------------------------------------------------------------------\n// Code generation for provided members\n// ------------------------------------------------------------------------------------------------\n \nlet trimLeft c (s:string) = s.ToCharArray() |> Array.skipWhile ((=) c) |> System.String\nlet trimRight c (s:string) = s.ToCharArray() |> Array.rev |> Array.skipWhile ((=) c) |> Array.rev |> System.String\n\nlet concatUrl (a:string) (b:string) =\n  if b.StartsWith(\"http://\") || b.StartsWith(\"https://\") then b\n  else (trimRight '/' a) + \"/\" + (trimLeft '/' b)\n\nlet load url cookies = async {\n  let! json = Http.Request(\"GET\", url, cookies=cookies)\n  let members = jsonParse<Member[]> json\n  return members }\n\nlet addTraceCall inst trace =\n  if Seq.isEmpty trace then inst \n  else inst?addTrace /@/ [str (String.concat \"&\" trace)]\n\nlet propAccess trace = \n  { Emit = fun inst -> addTraceCall inst trace }\n\nlet methCall traceNames trace =\n  { Emit = fun inst -> funcN (Seq.length traceNames) (fun args ->\n      let withTrace = addTraceCall inst trace\n      Seq.zip traceNames args |> Seq.fold (fun inst (name, value) ->\n        let trace = BinaryExpression(BinaryPlus, str(name + \"=\"), value, None)\n        inst?addTrace /@/ [trace] ) withTrace) }\n\nlet dataCall parser trace endp = \n  { Emit = fun inst ->\n      let tr = (propAccess trace).Emit(inst) \n      let mem = MemberExpression(tr, IdentifierExpression(\"getValue\", None), false, None)\n      CallExpression(mem, [StringLiteral(endp, None)], None) |> parser }\n \n\n// Turn \"Async<string>\" into the required type\n// I guess we should keep a flag whether the input is still async (or something)\nlet rec getTypeAndEmitter (lookupNamed:string -> Type) ty = \n  match ty with\n  | Primitive(\"string\") -> Type.Primitive(PrimitiveType.String), id\n  | Primitive(\"obj\") -> Type.Primitive(PrimitiveType.String), id\n  | Primitive(\"int\") \n  | Primitive(\"float\") -> Type.Primitive(PrimitiveType.Number), fun e -> ident(\"Number\") /@/ [e]\n  | Primitive(\"date\") -> Type.Primitive(PrimitiveType.Date), fun e -> NewExpression(ident(\"Date\"), [ident(\"Date\")?parse /@/ [e]], None)\n  | Generic(\"seq\", [|Generic(\"tuple\", [|t1; t2|])|]) -> \n      let t1, e1 = getTypeAndEmitter lookupNamed t1\n      let t2, e2 = getTypeAndEmitter lookupNamed t2\n      let typ = FSharpProvider.applyTypes (lookupNamed \"series\") [t1; t2]\n      typ, \n      fun d -> \n        ident(\"series\")?create /@/ \n          [ ident(\"convertTupleSequence\") /@/ [func \"v\" e1; func \"v\" e2; d] \n            str \"key\"; str \"value\"; str \"\" ] // TODO: We don't have any info - that sucks\n  | Generic(\"seq\", [|ty|]) ->\n      let elTy, emitter = getTypeAndEmitter lookupNamed ty\n      let serTy = FSharpProvider.applyTypes (lookupNamed \"series\") [Type.Primitive PrimitiveType.Number; elTy]\n      serTy, \n      // This is over async, but the child `emitter` is not over async\n      fun d -> \n        ident(\"series\")?ordinal /@/ \n          [ ident(\"convertSequence\") /@/ [func \"v\" emitter; d] \n            str \"key\"; str \"value\"; str \"\" ]\n  | Record(membs) ->\n      let membs = \n        membs |> Array.map (fun (name, ty) ->\n          let memTy, memConv = getTypeAndEmitter lookupNamed ty\n          let emitter = { Emit = fun inst -> memConv <| inst?(name) }\n          { Member.Name = name; Type = memTy; Metadata = [docMeta(Documentation.Text \"\")]; Emitter = emitter })\n      let obj = \n        { new ObjectType with\n            member x.Members = membs\n            member x.TypeEquals _ = false }\n        |> TheGamma.Type.Object \n      obj, id\n  | _ -> \n      Browser.console.log(\"getTypeAndEmitter: Cannot handle %O\", ty)\n      failwith \"getTypeAndEmitter: Cannot handle type\"\n\n// ------------------------------------------------------------------------------------------------\n// Type provider\n// ------------------------------------------------------------------------------------------------\n\nlet restTypeCache = System.Collections.Generic.Dictionary<_, _>()\n\nlet rec createRestType lookupNamed resolveProvider root cookies url = \n\n  let provideMember m = \n    let schema = \n      if m.schema = null then []\n      elif isArray m.schema then m.schema |> Array.map (fun s ->\n        { Type = getProperty s \"@type\"; Context = getProperty s \"@context\"; Data = s }) |> List.ofSeq\n      else \n        [ { Type = getProperty m.schema \"@type\"; Context = getProperty m.schema \"@context\"; Data = m.schema } ]\n\n    match m.returns.kind with\n    | \"provider\" ->\n        let returns = unbox<TypeProvider> m.returns \n        let typ, emitter = resolveProvider returns.provider returns.endpoint\n        { Member.Name = m.name; Type = typ; Metadata = (docMeta (parseDoc m.documentation))::schema; Emitter = emitter }\n    | \"nested\" ->\n        let returns = unbox<TypeNested> m.returns \n        let createReturnType cookies = \n          try Some(createRestType lookupNamed resolveProvider root cookies returns.endpoint)\n          with _ -> None\n\n        match m.parameters with \n        | Some parameters ->\n            let args = \n              [ for p in parameters -> \n                  let ty = fromRawType p.``type``\n                  let ty, _ = getTypeAndEmitter lookupNamed ty\n                  { MethodArgument.Name = p.name; Optional = p.optional; Type = ty; Static = p.kind = \"static\" } ] \n            \n            let retFunc tys = \n              if not (Types.listsEqual (List.map fst tys) [ for ma in args -> ma.Type ] Types.typesEqual) then None else\n              let matched = Seq.zip parameters tys\n              let newCookies = \n                matched |> Seq.choose (function\n                  | pa, (_, Some value) when pa.kind = \"static\" -> Some(pa.cookie.Value + \"=\" + Fable.Import.JS.encodeURIComponent(string value))\n                  | _ -> None) \n              let cookies = Seq.append [cookies] newCookies |> String.concat \"&\"\n              createReturnType cookies\n\n            let traceNames = parameters |> Seq.choose (fun p -> p.trace)\n            { Member.Name = m.name; Metadata = [docMeta (parseDoc m.documentation)]\n              Type = Type.Method(args, retFunc); Emitter = methCall traceNames m.trace }\n        | None -> \n            let retTyp = defaultArg (createReturnType cookies) Type.Any\n            { Member.Name = m.name; Type = retTyp; Metadata = (docMeta (parseDoc m.documentation))::schema; Emitter = propAccess m.trace }\n    | \"primitive\" ->  \n        let returns = unbox<TypePrimitive> m.returns                      \n        let ty = fromRawType returns.``type``\n        let typ, parser = getTypeAndEmitter lookupNamed ty\n        { Member.Name = m.name; Type = typ; Metadata = (docMeta (parseDoc m.documentation))::schema; \n          Emitter = dataCall parser m.trace returns.endpoint }\n    | _ -> failwith \"?\" \n\n  let guid = (concatUrl root url) + cookies\n  match restTypeCache.TryGetValue guid with\n  | true, res -> res\n  | _ ->\n    let future = async {\n      try\n        let! members = load (concatUrl root url) cookies \n        let members = members |> Array.map provideMember\n        return \n          { new ObjectType with \n              member x.Members = members\n              member x.TypeEquals _ = false } |> Type.Object \n      with e -> \n        Log.error(\"providers\", \"Cannot provide object type: %O\", e)\n        return Type.Any }\n    let ty = Type.Delayed(Async.CreateNamedFuture guid future)\n    restTypeCache.[guid] <- ty\n    ty\n\nlet rec provideRestType lookupNamed resolveProvider name root cookies = \n  let ctx = ident(\"RuntimeContext\")\n  ProvidedType.GlobalValue\n    ( name, [],\n      NewExpression(ctx, [str root; str cookies; str \"\"], None),\n      createRestType lookupNamed resolveProvider root cookies \"/\")","﻿// ------------------------------------------------------------------------------------------------\n// Pivot type provider - for expressing data aggregation queries over a table\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.TypeProviders.Pivot\n\nopen Fable.Core\nopen Fable.Import\n\nopen TheGamma\nopen TheGamma.Babel\nopen TheGamma.Babel.BabelOperators\nopen TheGamma.Common\nopen TheGamma.TypeProviders\n\n// ------------------------------------------------------------------------------------------------\n// Operations that we can do on the table\n// ------------------------------------------------------------------------------------------------\n\n[<RequireQualifiedAccess>]\ntype GroupAggregation = \n  | GroupKey\n  | CountAll\n  | CountDistinct of string\n  | ConcatValues of string\n  | Sum of string\n  | Mean of string\n\n[<RequireQualifiedAccess>]\ntype WindowAggregation = \n  | Min of string\n  | Sum of string\n  | Max of string\n  | Mean of string\n  | FirstKey\n  | LastKey\n  | MiddleKey\n\ntype SortDirection =\n  | Ascending\n  | Descending \n\ntype Paging =\n  | Take of string\n  | Skip of string\n  \ntype FilterOperator = \n  | And | Or\n\ntype RelationalOperator = \n  | Equals \n  | NotEquals \n  | LessThan\n  | GreaterThan \n  | InRange\n  | Like\n\ntype FilterCondition = RelationalOperator * string * string\n\ntype Transformation = \n  | DropColumns of string list\n  | SortBy of (string * SortDirection) list\n  | GroupBy of string list * GroupAggregation list\n  | WindowBy of string * string * WindowAggregation list\n  | ExpandBy of string * WindowAggregation list\n  | FilterBy of FilterOperator * FilterCondition list\n  | Paging of Paging list\n  | Empty\n  // One of these may be the last one\n  | Metadata\n  | GetSeries of string * string\n  | GetTheData\n  | GetRange of string\n\ntype Field = \n  { Name : string \n    Type : PrimitiveType }\n\nmodule Transform = \n\n  let private formatGroupAgg = function\n    | GroupAggregation.GroupKey -> \"key\"\n    | GroupAggregation.CountAll -> \"count-all\"\n    | GroupAggregation.CountDistinct(f) -> \"count-dist \" + Ast.escapeIdent f\n    | GroupAggregation.ConcatValues(f) -> \"concat-vals \" + Ast.escapeIdent f\n    | GroupAggregation.Sum(f) -> \"sum \" + Ast.escapeIdent f\n    | GroupAggregation.Mean(f) -> \"mean \" + Ast.escapeIdent f\n\n  let private formatWinAgg = function\n    | WindowAggregation.FirstKey -> \"first-key\"\n    | WindowAggregation.MiddleKey -> \"mid-key\"\n    | WindowAggregation.LastKey -> \"last-key\"\n    | WindowAggregation.Mean(f) -> \"mean \" + Ast.escapeIdent f\n    | WindowAggregation.Min(f) -> \"min \" + Ast.escapeIdent f\n    | WindowAggregation.Max(f) -> \"max \" + Ast.escapeIdent f\n    | WindowAggregation.Sum(f) -> \"sum \" + Ast.escapeIdent f\n\n  let formatCondition (op, f, v) =\n    let op = \n      match op with Equals -> \"eq\" | NotEquals -> \"neq\" | LessThan -> \"lte\" | GreaterThan -> \"gte\" | InRange -> \"in\" | Like -> \"like\"\n    Ast.escapeIdent f + \" \" + op + \" \" + Ast.escapeIdent v\n\n  let toUrl transforms = \n    [ for t in transforms ->\n        match t with\n        | GetTheData -> []\n        | Metadata -> [\"metadata\", []]\n        | GetRange fld -> [\"range\", [fld]]\n        | FilterBy(op, conds) -> [\"filter\", (match op with And -> \"and\" | Or -> \"or\")::(List.map formatCondition conds)]\n        | DropColumns(columns) -> [\"drop\", columns]\n        | SortBy(columns) -> [\"sort\", (List.map (fun (c, o) -> c + (if o = Ascending then \" asc\" else \" desc\")) columns)]\n        | GroupBy(flds, aggs) -> [\"groupby\", (List.map (fun fld -> \"by \" + Ast.escapeIdent fld) flds) @ (List.map formatGroupAgg aggs)]\n        | WindowBy(fld, size, aggs) -> [\"windowby\", (\"by \" + Ast.escapeIdent fld) :: size :: (List.map formatWinAgg aggs)]\n        | ExpandBy(fld, aggs) -> [\"expandby\", (\"by \" + Ast.escapeIdent fld) :: (List.map formatWinAgg aggs)]\n        | Paging(ops) -> ops |> List.map (function Take k -> \"take\", [k] | Skip k -> \"skip\", [k]) \n        | GetSeries(k, v) -> [\"series\", [k; v]]\n        | Empty -> [] ]\n    |> List.concat\n    |> List.map (fun (op, args) -> \n        if List.isEmpty args then op \n        else op + \"(\" + String.concat \",\" args + \")\")\n    |> String.concat \"$\"\n\n  (*\n  let sample = \n    [ GroupBy([\"Athlete\"], [GroupKey; Sum(\"Gold Medals\"); ConcatValues(\"Team\")])\n      SortBy([\"Gold\", Descending])\n      Paging([Take \"10\"])\n      GetSeries(\"Athlete\", \"Gold\") ]\n  \n  toUrl  sample\n  // groupby([Athlete],key,sum 'Gold Medals',concat-vals Team)$sort(Gold desc)$take(10)$series(Athlete,Gold)\n  *)\n   \n  let singleTransformFields fields = function\n    | Empty -> fields\n    | Metadata -> failwith \"Metadata should not appear in normal queries\"\n    | GetRange _ -> failwith \"GetRange should not appear in normal queries\"\n    | GetTheData -> fields\n    | SortBy _ -> fields\n    | Paging _ -> fields\n    | FilterBy _ -> fields\n    | GetSeries(k, v) -> \n        [ fields |> List.find (fun f -> f.Name = k)\n          fields |> List.find (fun f -> f.Name = v) ]\n    | DropColumns(drop) ->\n        let dropped = set drop\n        fields |> List.filter (fun f -> not(dropped.Contains f.Name))\n    | ExpandBy(key, aggs) \n    | WindowBy(key, _, aggs) ->\n        let oldFields = dict [ for f in fields -> f.Name, f ]\n        aggs \n        |> List.collect (function\n           | WindowAggregation.FirstKey -> [ { Name = \"first \" + key; Type = oldFields.[key].Type } ]\n           | WindowAggregation.MiddleKey -> [ { Name = \"middle \" + key; Type = oldFields.[key].Type } ]\n           | WindowAggregation.LastKey -> [ { Name = \"last \" + key; Type = oldFields.[key].Type } ]\n           | WindowAggregation.Mean fld \n           | WindowAggregation.Min fld \n           | WindowAggregation.Sum fld \n           | WindowAggregation.Max fld -> [ oldFields.[fld] ])\n    | GroupBy(flds, aggs) ->\n        let oldFields = dict [ for f in fields -> f.Name, f ]\n        aggs \n        |> List.collect (function\n           | GroupAggregation.GroupKey -> List.map (fun f -> oldFields.[f]) flds\n           | GroupAggregation.ConcatValues fld\n           | GroupAggregation.Sum fld -> [ oldFields.[fld] ]\n           | GroupAggregation.Mean fld -> [ oldFields.[fld] ]\n           | GroupAggregation.CountAll -> [ { Name = \"count\"; Type = PrimitiveType.Number } ]\n           | GroupAggregation.CountDistinct fld -> [ { Name = oldFields.[fld].Name; Type = PrimitiveType.Number } ])\n      \n  let transformFields fields tfs = \n    tfs |> List.fold singleTransformFields (List.ofSeq fields) |> List.ofSeq\n\n// ------------------------------------------------------------------------------------------------\n// Pivot provider\n// ------------------------------------------------------------------------------------------------\n\nopen TheGamma.TypeProviders.ProviderHelpers\n\nlet trimLeft c (s:string) = s.ToCharArray() |> Array.skipWhile ((=) c) |> System.String\nlet trimRight c (s:string) = s.ToCharArray() |> Array.rev |> Array.skipWhile ((=) c) |> Array.rev |> System.String\n\nlet concatUrl (a:string) (b:string) =\n  (trimRight '/' a) + \"/\" + (trimLeft '/' b)\n\ntype PivotObject(members:seq<Member>) =\n  member x.MemberNames = [ for m in members -> m.Name ]\n  interface ObjectType with \n    member x.Members = Array.ofSeq members \n    member x.TypeEquals y = \n      match y with\n      | :? PivotObject as y -> y.MemberNames = x.MemberNames \n      | _ -> false\n\nlet makeObjectType members = Type.Object(PivotObject(members))\n\nlet isNumeric fld = fld = PrimitiveType.Number\nlet isBool fld = fld = PrimitiveType.Bool\nlet isDate fld = fld = PrimitiveType.Date\nlet isConcatenable fld = fld = PrimitiveType.String\n\nlet getTypeAndEmitter = function \n  | PrimitiveType.String -> Type.Primitive(PrimitiveType.String), id\n  | PrimitiveType.Date -> Type.Primitive(PrimitiveType.String), fun e -> NewExpression(ident(\"Date\"), [ident(\"Date\")?parse /@/ [e]], None)\n  | PrimitiveType.Number -> Type.Primitive(PrimitiveType.Number), fun e -> ident \"Number\" /@/ [e]\n  | PrimitiveType.Bool -> Type.Primitive(PrimitiveType.Number), fun e -> ident \"Boolean\" /@/ [e]\n  | PrimitiveType.Unit -> Type.Primitive(PrimitiveType.Unit), fun e -> NullLiteral(None)\n\nlet propertyEmitter = \n  { Emit = fun this -> this }\n\nlet makeMethodEmitter callid pars =\n  { Emit = fun this -> funcN (Seq.length pars) (fun args ->\n      let args = arr [ for v in args -> v ]\n      this?addCall /@/ [str callid; args]) }\n\nlet makeDataEmitter isPreview isSeries convValues tfs = \n  { Emit = fun this -> \n      if isSeries then\n        ident(\"series\")?create /@/ \n          [ this?getData /@/ [convValues; str (Transform.toUrl (List.rev tfs)); bool isPreview]\n            str \"key\"; str \"value\"; str \"\" ]\n      else\n        ident(\"series\")?ordinal /@/ \n          [ this?getData /@/ [convValues; str (Transform.toUrl (List.rev tfs)); bool isPreview]\n            str \"key\"; str \"value\"; str \"\" ] }\n\n\n// ------------------------------------------------------------------------------------------------\n// Transformations\n// ------------------------------------------------------------------------------------------------\n\ntype Context = \n  { Root : string\n    IgnoreFiltersInRange : bool\n    LookupNamed : string -> Type\n    InputFields : Field list\n    Fields : Field list }\n\nlet rec makeProperty ctx name tfs = \n  let meta1 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Transformations\"; Data = box tfs  }\n  let meta2 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Fields\"; Data = box ctx.Fields  }\n  { Member.Name = name; Type = makePivotType ctx tfs; Metadata = [meta1; meta2]; Emitter = propertyEmitter }\n  \nand makeMethod ctx name tfs callid args = \n  let meta1 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Transformations\"; Data = box tfs  }\n  let meta2 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Fields\"; Data = box ctx.Fields  }\n  { Member.Name = name; Metadata = [meta1; meta2]\n    Type = \n      Type.Method\n        ( [ for n, t in args -> { MethodArgument.Name = n; Optional = false; Static = false; Type = Type.Primitive t } ],\n          (fun ts -> \n              let ts = List.map fst ts\n              if Types.listsEqual ts args (fun t1 (_, t2) -> Types.typesEqual t1 (Type.Primitive t2)) \n                then Some(makePivotType ctx tfs) else None) )\n    Emitter = makeMethodEmitter callid args }\n\nand makeDataMember ctx name isPreview tfs =\n  let fields = Transform.transformFields ctx.InputFields (List.rev tfs)\n  Log.trace(\"providers\", \"Make data member using transform %O. Got fields: %O\", [| box tfs; box fields |])\n  let isSeries, dataTyp, convValues = \n    match tfs with \n    | (GetSeries _)::_ -> \n        match fields with\n        | [kf; vf] ->  \n            true,\n            FSharpProvider.applyTypes (ctx.LookupNamed \"series\") [Type.Primitive kf.Type; Type.Primitive vf.Type], \n            func \"o\" (fun arg -> \n              arr [ snd (getTypeAndEmitter kf.Type) (arg /?/ num 0.)\n                    snd (getTypeAndEmitter vf.Type) (arg /?/ num 1.) ])\n        | _ -> failwith \"makeDataMember: Series should have key and value\"\n    | _ -> \n        let convs, membs = \n          fields \n            |> Array.ofSeq \n            |> Array.map (fun fld ->\n              let memTy, memConv = getTypeAndEmitter fld.Type\n              let emitter = { Emit = fun inst -> inst /?/ str fld.Name }\n              (fld.Name, memConv),\n              { Member.Name = fld.Name; Type = memTy; Emitter = emitter;\n                Metadata = [docMeta (Documentation.Text \"\")] })\n            |> Array.unzip\n        let recTyp = makeObjectType membs\n        false,\n        FSharpProvider.applyTypes (ctx.LookupNamed \"series\") [Type.Primitive PrimitiveType.Number; recTyp ],\n        func \"o\" (fun arg ->\n          let mems = \n            [ for fld, conv in convs ->\n                ObjectProperty(str fld, conv (arg /?/ str fld), true, None) ]\n          ObjectExpression(mems, None) )\n\n  let tfs = if isSeries then tfs else GetTheData::tfs\n  let meta = \n    [ yield { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Transformations\"; Data = box tfs }\n      yield { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Fields\"; Data = box ctx.Fields  }\n      if isPreview then\n        yield { Context = \"http://schema.thegamma.net\"; Type = \"CompletionItem\"; Data = JsInterop.createObj [\"hidden\", box true] }]\n  { Member.Name = name; Type = dataTyp; Metadata = meta; Emitter = makeDataEmitter isPreview isSeries convValues tfs }\n\nand handleGetSeriesRequest ctx rest k v = \n  match k, v with\n  | \"!\", \"!\" ->\n    [ for field in ctx.Fields ->\n        makeProperty ctx (\"with key \" + field.Name) (GetSeries(field.Name, \"!\")::rest) ]\n    |> makeObjectType\n  | k, \"!\" ->\n    [ for field in ctx.Fields ->\n        makeDataMember ctx (\"and value \" + field.Name) false (GetSeries(k, field.Name)::rest) ]\n    |> makeObjectType\n  | _ -> \n    failwith \"handleGetSeriesRequest: Should not happen\"\n  \nand handlePagingRequest ctx rest pgid ops =\n  let takeMemb = \n    makeMethod ctx \"take\" (Empty::Paging(List.rev (Take(pgid + \"-take\")::ops))::rest) (pgid + \"-take\") [\"count\", PrimitiveType.Number] \n  let skipMemb = \n    makeMethod ctx \"skip\" (Paging(Skip(pgid + \"-skip\")::ops)::rest) (pgid + \"-skip\") [\"count\", PrimitiveType.Number] \n  let thenMemb = \n    makeProperty ctx \"then\" (Empty::Paging(List.rev ops)::rest)\n  ( match ops with\n    | [] -> [skipMemb; takeMemb; thenMemb]\n    | [Skip _] -> [takeMemb; thenMemb]\n    | _ -> failwith \"handlePagingRequest: Shold not happen\" ) |> makeObjectType\n\nand handleDropRequest ctx rest dropped = \n  let droppedFields = set dropped\n  [ yield makeProperty ctx \"then\" (Empty::DropColumns(dropped)::rest)\n    for field in ctx.Fields do\n      if not (droppedFields.Contains field.Name) then\n        yield \n          makeProperty ctx (\"drop \" + field.Name) (DropColumns(field.Name::dropped)::rest) ]\n  |> makeObjectType    \n\nand handleSortRequest ctx rest keys = \n  let usedKeys = set (List.map fst keys)\n  [ yield makeProperty ctx \"then\" (Empty::SortBy(keys)::rest)\n    for field in ctx.Fields do\n      if not (usedKeys.Contains field.Name) then\n        let doc = sprintf \"Use the field '%s' as the next sorting keys\" field.Name\n        let prefix = if keys = [] then \"by \" else \"and by \"\n        yield makeProperty ctx (prefix + field.Name) (SortBy((field.Name, Ascending)::keys)::rest) \n        yield makeProperty ctx (prefix + field.Name + \" descending\") (SortBy((field.Name, Descending)::keys)::rest) ]\n  |> makeObjectType    \n\nand handleWindowRequest ctx rest wndid = \n  [ for field in ctx.Fields do \n      if isDate field.Type || isNumeric field.Type then\n        yield makeMethod ctx (\"window by \" + field.Name) (WindowBy(field.Name, wndid, [])::rest) wndid [\"size\", PrimitiveType.Number] \n        yield makeProperty ctx (\"expanding by \" + field.Name) (ExpandBy(field.Name, [WindowAggregation.LastKey])::rest) ]\n  |> makeObjectType  \n\nand handleWindowExpandAggRequest ctx rest fld make aggs = \n  let containsKey = aggs |> Seq.exists(function\n    | WindowAggregation.FirstKey | WindowAggregation.LastKey | WindowAggregation.MiddleKey -> true\n    | _ -> false)\n  let containsField fld = aggs |> Seq.exists (function \n    | WindowAggregation.Sum f | WindowAggregation.Max f | WindowAggregation.Min f | WindowAggregation.Mean f -> f = fld \n    | WindowAggregation.FirstKey | WindowAggregation.LastKey | WindowAggregation.MiddleKey -> false)\n\n  let makeAggMember name agg = \n    makeProperty ctx name (make(aggs @ [agg])::rest) \n\n  [ if not (List.isEmpty aggs) then\n      yield makeProperty ctx \"then\" (Empty::make(aggs)::rest) \n    if not containsKey then\n      yield makeAggMember (\"first \" + fld) WindowAggregation.FirstKey\n      yield makeAggMember (\"last \" + fld) WindowAggregation.LastKey\n      yield makeAggMember (\"middle \" + fld) WindowAggregation.MiddleKey\n    for fld in ctx.Fields do\n      if not (containsField fld.Name) then\n        if isNumeric fld.Type || isBool fld.Type then\n          yield makeAggMember (\"min \" + fld.Name) (WindowAggregation.Min fld.Name)\n          yield makeAggMember (\"sum \" + fld.Name) (WindowAggregation.Sum fld.Name)\n          yield makeAggMember (\"max \" + fld.Name) (WindowAggregation.Max fld.Name)\n          yield makeAggMember (\"mean \" + fld.Name) (WindowAggregation.Mean fld.Name) ]\n  |> makeObjectType  \n\nand aggregationMembers ctx rest keys aggs = \n  let containsCountAll = aggs |> Seq.exists ((=) GroupAggregation.CountAll)\n  let containsField fld = aggs |> Seq.exists (function \n    | GroupAggregation.CountDistinct f | GroupAggregation.ConcatValues f \n    | GroupAggregation.Sum f | GroupAggregation.Mean f -> f = fld \n    | GroupAggregation.CountAll | GroupAggregation.GroupKey -> false)\n\n  let makeAggMember name agg = \n    makeProperty ctx name (GroupBy(keys,aggs @ [agg])::rest) \n\n  [ yield makeProperty ctx \"then\" (Empty::GroupBy(keys, aggs)::rest) \n    if not containsCountAll then \n      yield makeAggMember \"count all\" GroupAggregation.CountAll\n    for fld in ctx.Fields do\n      if not (containsField fld.Name) then\n        yield makeAggMember (\"count distinct \" + fld.Name) (GroupAggregation.CountDistinct fld.Name) \n        if isConcatenable fld.Type then\n          yield makeAggMember (\"concatenate values of \" + fld.Name) (GroupAggregation.ConcatValues fld.Name)\n        if isNumeric fld.Type || isBool fld.Type then\n          yield makeAggMember (\"average \" + fld.Name) (GroupAggregation.Mean fld.Name)\n          yield makeAggMember (\"sum \" + fld.Name) (GroupAggregation.Sum fld.Name) ]\n\nand handleGroupAggRequest ctx rest keys aggs =\n  aggregationMembers ctx rest keys aggs  \n  |> makeObjectType  \n  \nand handleGroupRequest ctx rest keys = \n  let prefix = if List.isEmpty keys then \"by \" else \"and \"\n  [ for field in ctx.Fields ->\n      makeProperty ctx (prefix + field.Name) (GroupBy(field.Name::keys, [])::rest) \n    if not (List.isEmpty keys) then\n      yield! aggregationMembers ctx rest keys [GroupAggregation.GroupKey] ]\n  |> makeObjectType  \n\nand handleFilterEqNeqRequest ctx rest (fld, eq) op conds = async {\n  let tfs = \n    if op = Or then rest \n    elif List.isEmpty conds then rest \n    else FilterBy(op, conds)::rest\n  let tfs = \n    tfs |> List.filter (function \n      | FilterBy _ when ctx.IgnoreFiltersInRange -> false \n      | FilterBy(_, conds) when conds |> List.exists (function ((Equals | NotEquals), _, _) -> false | _ -> true) -> false\n      | _ -> true)\n  let url = ctx.Root + \"?\" + (GetRange(fld)::tfs |> List.rev |> Transform.toUrl |> Fable.Import.JS.encodeURIComponent)\n  let! options = Http.Request(\"GET\", url)\n  let options = jsonParse<string[]> options\n  return\n    [ for opt in options do\n        yield makeProperty ctx opt (FilterBy(op, (eq, fld, opt)::conds)::rest) ] \n    |> makeObjectType }\n\nand handleFilterRequest ctx rest flid op conds = \n  let prefixes = \n    match conds, op with\n    | [], _ -> [\"\", And] \n    | _::[], _ -> [\"and \", And; \"or \", Or]\n    | _, And -> [\"and \", And] \n    | _, Or -> [\"or \", Or]\n  [ for prefix, op in prefixes do\n      for field in ctx.Fields do\n        if field.Type = PrimitiveType.String then\n          yield makeProperty ctx (prefix + field.Name + \" is\") (FilterBy(op, (Equals, field.Name, \"!\")::conds)::rest) \n          yield makeProperty ctx (prefix + field.Name + \" is not\") (FilterBy(op, (NotEquals, field.Name, \"!\")::conds)::rest) \n          yield makeMethod ctx (prefix + field.Name + \" contains\") (FilterBy(op, (Like, field.Name, flid)::conds)::rest) flid [\"text\", PrimitiveType.String]\n        if field.Type = PrimitiveType.Number then\n          yield makeMethod ctx (prefix + field.Name + \" is less than\") (FilterBy(op, (LessThan, field.Name, flid)::conds)::rest) flid [\"value\", PrimitiveType.Number]\n          yield makeMethod ctx (prefix + field.Name + \" is greater than\") (FilterBy(op, (GreaterThan, field.Name, flid)::conds)::rest) flid [\"value\", PrimitiveType.Number]\n          yield makeMethod ctx (prefix + field.Name + \" is in range\") (FilterBy(op, (InRange, field.Name, flid)::conds)::rest) flid [\"minimum\", PrimitiveType.Number; \"maximum\", PrimitiveType.Number]\n        if field.Type = PrimitiveType.Date then\n          yield makeMethod ctx (prefix + field.Name + \" is less than\") (FilterBy(op, (LessThan, field.Name, flid)::conds)::rest) flid [\"value\", PrimitiveType.Date]\n          yield makeMethod ctx (prefix + field.Name + \" is greater than\") (FilterBy(op, (GreaterThan, field.Name, flid)::conds)::rest) flid [\"value\", PrimitiveType.Date]\n          yield makeMethod ctx (prefix + field.Name + \" is in range\") (FilterBy(op, (InRange, field.Name, flid)::conds)::rest) flid [\"minimum\", PrimitiveType.Date; \"maximum\", PrimitiveType.Date]\n    if not (List.isEmpty conds) then\n      yield makeProperty ctx \"then\" (Empty::FilterBy(op, conds)::rest) ]\n  |> makeObjectType  \n\nand makePivotTypeImmediate ctx tfs = async {\n  let last, rest = match tfs with last::rest -> last, rest | _ -> Empty, []\n  let ctx = { ctx with Fields = Transform.transformFields ctx.InputFields (List.rev rest) }\n  match last with\n  // Starting a new pivoting operation\n  | Empty ->\n    return\n      [ yield makeProperty ctx \"group data\" (GroupBy([], [])::rest) \n        yield makeProperty ctx \"filter data\" (FilterBy(And, [])::rest) \n        yield makeProperty ctx \"sort data\" (SortBy([])::rest) \n        yield makeProperty ctx \"drop columns\" (DropColumns([])::rest) \n        yield makeProperty ctx \"paging\" (Paging([])::rest) \n        yield makeProperty ctx \"get series\" (GetSeries(\"!\",\"!\")::rest) \n        yield makeDataMember ctx \"get the data\" false rest \n        if ctx.Fields |> List.exists (fun fld -> fld.Type = PrimitiveType.Date || fld.Type = PrimitiveType.Number) then\n          yield makeProperty ctx \"windowing\" (WindowBy(\"!\", \"!\", [])::rest) ]\n      |> makeObjectType    \n  // \n  | GetSeries(k, v) ->\n      return handleGetSeriesRequest ctx rest k v\n  | Paging(ops) ->\n      let pgid = rest |> Seq.sumBy (function Paging _ -> 1 | _ -> 0) |> sprintf \"pgid-%d\"  \n      return handlePagingRequest ctx rest pgid ops\n  | SortBy(keys) ->\n      return handleSortRequest ctx rest keys\n  | DropColumns(dropped) ->\n      return handleDropRequest ctx rest dropped\n  | FilterBy(fop, (rop & (Equals | NotEquals), fld, \"!\")::conds) ->\n      return! handleFilterEqNeqRequest ctx rest (fld, rop) fop conds\n  | FilterBy(op, conds) ->\n      let flid = conds.Length + (Seq.sumBy (function FilterBy(_, cds) -> cds.Length | _ -> 0) rest)\n      return handleFilterRequest ctx rest (sprintf \"flid-%d\" flid) op conds\n  | WindowBy(\"!\", \"!\", []) ->\n      let wnid = rest |> Seq.sumBy (function WindowBy _ -> 1 | _ -> 0) |> sprintf \"wnid-%d\"\n      return handleWindowRequest ctx rest wnid\n  | WindowBy(fld, size, aggs) ->\n      return handleWindowExpandAggRequest ctx rest fld (fun aggs -> WindowBy(fld, size, aggs)) aggs\n  | ExpandBy(fld, aggs) ->\n      return handleWindowExpandAggRequest ctx rest fld (fun aggs -> ExpandBy(fld, aggs)) aggs\n  | GroupBy(flds, []) ->\n      return handleGroupRequest ctx rest flds\n  | GroupBy(flds, aggs) ->\n      return handleGroupAggRequest ctx rest flds aggs \n  | GetTheData | GetRange _ | Metadata ->\n      return failwith \"makePivotTypeImmediate: GetTheData, GetRange and Metadata shouldn't be of pivot type\" }\n\nand adjustForPreview tfs = \n  match tfs with\n  | WindowBy(_,\"!\",_)::tfs -> tfs // We do not yet know the size \n  | GroupBy([], _)::tfs -> tfs // We do not yet know the grouping key, so return original data\n  | GroupBy(k, [])::tfs -> GroupBy(k, [GroupAggregation.GroupKey])::tfs // We do not have any aggregations yet\n  | GetSeries _::tfs -> tfs // We do not yet know the key/value of the series, so return original data\n  | _ -> tfs\n\nand withPreview ctx tfs typ = \n  match typ with\n  | Type.Object(o) -> \n      let preview = makeDataMember ctx \"preview\" true (adjustForPreview tfs)\n      makeObjectType (Array.append [| preview |] o.Members) \n  | typ -> failwith \"withPreview: Expected object type\"\n\nand makePivotType ctx tfs = \n  let guid = Transform.toUrl tfs\n  let typ = async {\n    try\n      let! typ = makePivotTypeImmediate ctx tfs\n      return withPreview ctx tfs typ \n    with e ->\n      Log.exn(\"providers\", \"Failed when generating type for %O with exception %O\", tfs, e)      \n      return raise e }\n  Type.Delayed(Async.CreateNamedFuture guid typ)\n  \nlet makePivotExpression root = \n  NewExpression(ident(\"PivotContext\"), [str root; ArrayExpression([], None)], None)\n\nlet makePivotGlobalValue root name lookupNamed ignoreFilter fields =\n  let fields = [ for f, t in fields -> { Name = f; Type = t }]\n  let typ = makePivotType { Fields = fields; InputFields = fields; LookupNamed = lookupNamed; Root = root; IgnoreFiltersInRange = ignoreFilter } []\n  let meta1 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Transformations\"; Data = box []  }\n  let meta2 = { Context = \"http://schema.thegamma.net/pivot\"; Type = \"Fields\"; Data = box fields  }\n  ProvidedType.GlobalValue( name, [meta1; meta2], makePivotExpression root, typ)\n\nlet providePivotType root ignoreFilter name lookupNamed = async {\n  let! membersJson = Http.Request(\"GET\", root + \"?metadata\")\n  let fields = JsHelpers.properties(jsonParse<obj> membersJson) |> Array.map (fun kv -> \n    let typ = \n      match unbox kv.value with\n      | \"string\" -> PrimitiveType.String\n      | \"bool\" -> PrimitiveType.Bool\n      | \"number\" -> PrimitiveType.Number\n      | \"date\" -> PrimitiveType.Date\n      | s -> failwith (sprintf \"The property '%s' has invalid type '%s'. Only 'string', 'number' and 'bool' are supported.\" kv.key s)\n    kv.key, typ)\n  return makePivotGlobalValue root name lookupNamed ignoreFilter fields }","﻿// ------------------------------------------------------------------------------------------------\n// Binder attaches `Entity` objects to `Node` objects produced by the parser\n// Entities are reused when possible and contain inferred types etc.\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Binder\n\nopen TheGamma.Ast\nopen TheGamma.Common\n\n/// Represents case of the EntityKind union\ntype EntityCode = int\n\n/// As we bind, we keep root entity, current scope & variables in scope\ntype BindingContext = \n  { Variables : Map<Name, Entity>  \n    GlobalValues : Map<Name, Entity>\n    Root : Entity\n\n    /// When we are in `foo(fun x -> ...)` the `x` is linked to the call site \n    CallSite : Entity option\n    /// When we are in `foo.[name:x].bar` the Chain represents `foo` so that `x` can be a member\n    Chain : Entity option\n\n    /// Table with previously created entities. This is a mutable mapping from \n    /// list of symbols (antecedent entities) together with entity kind & name\n    /// to the actual entity. Antecedents capture dependencies (if dependency \n    /// changed, we need to recreate the entity that depends on them)\n    Table : ListDictionary<Symbol, Map<EntityCode * string, Entity>> \n    /// Collects all bound entities and their ranges\n    Bound : ResizeArray<Range * Entity> }\n\n/// Represents result of binding syntax tree to entities \n/// (provides access to all bound entities & children lookup function)\ntype BindingResult(ents:(Range * Entity)[]) = \n  let childrenLookup = \n    let res = System.Collections.Generic.Dictionary<Symbol, ResizeArray<Entity>>()\n    let add a e = \n      if not (res.ContainsKey(a)) then res.Add(a, ResizeArray())\n      res.[a].Add(e)\n    for _, e in ents do\n      for a in e.Antecedents do\n        add a.Symbol e\n    res \n  member x.Entities = ents\n  member x.GetChildren(ent) = \n    match childrenLookup.TryGetValue(ent.Symbol) with true, res -> res.ToArray() | _ -> [||]\n\n/// Lookup entity (if it can be reused) or create & cache a new one\nlet bindEntity ctx kind =\n  let code, antecedents, name = entityCodeNameAndAntecedents kind\n  let symbols = ctx.Root::antecedents |> List.map (fun a -> a.Symbol)\n  let nestedDict = \n    match ListDictionary.tryFind symbols ctx.Table with\n    | None -> Map.empty\n    | Some res -> res\n  if nestedDict.ContainsKey (code, name) then \n    Log.trace(\"binder\", \"Cached: binding %s %s\", formatEntityKind kind, name)\n    nestedDict.[code, name]\n  else\n    Log.trace(\"binder\", \"New: binding %s %s\", formatEntityKind kind, name)\n    let symbol = createSymbol ()\n    let entity = { Kind = kind; Symbol = symbol; Type = None; Errors = []; Meta = []; Value = None }\n    ListDictionary.set symbols (Map.add (code, name) entity nestedDict) ctx.Table\n    entity    \n\n/// Assign entity to a node in parse tree\nlet setEntity ctx node entity = \n  ctx.Bound.Add(node.Range, entity)\n  node.Entity <- Some entity\n  entity\n\n/// Bind entities to expressions in the parse tree\n/// (See `EntityKind` for explanation of how the entity tree looks like)\nlet rec bindExpression ctx node = \n  let bindCallArgExpression site ctx = bindExpression { ctx with CallSite = Some site; Chain = None }\n  let bindMemberExpression chain ctx = bindExpression { ctx with CallSite = None; Chain = Some chain }\n  let bindPlaceExpression ctx = bindExpression { ctx with CallSite = None }\n  let bindExpression ctx = bindExpression { ctx with CallSite = None; Chain = None }\n\n  match node.Node with\n  | Expr.Placeholder(name, body) ->\n      // Keep `ctx.Chain` in case the plceholder contains member access\n      let bodyEnt = bindPlaceExpression ctx body\n      bindEntity ctx (EntityKind.Placeholder(name.Node, bodyEnt)) |> setEntity ctx node |> ignore\n      bodyEnt\n\n  | Expr.Variable(name) ->\n      // Variable is actually member access inside chain or placeholder inside chain\n      match ctx.Chain with\n      | Some chain -> \n          let memberName = bindEntity ctx (EntityKind.MemberName(name.Node)) |> setEntity ctx name\n          bindEntity ctx (EntityKind.Member(chain, memberName)) |> setEntity ctx node \n      | _ -> \n      // Variable is a local variable defined somewhere in context\n      match ctx.Variables.TryFind name.Node with \n      | Some decl -> bindEntity ctx (EntityKind.Variable(name.Node, decl)) |> setEntity ctx node\n      | _ ->\n      // Variable is a global, known or unknown variable\n      match ctx.GlobalValues.TryFind name.Node with \n      | Some glob -> glob |> setEntity ctx node\n      | _ -> bindEntity ctx (EntityKind.GlobalValue(name.Node, None)) |> setEntity ctx node\n\n  | Expr.Call(instExpr, argsNode) ->\n      // Bind instance & create call site that depends on it\n      let inst = bindExpression ctx instExpr\n      let site arg = bindEntity ctx (EntityKind.CallSite(inst, arg))\n      // Bind arguments - which depend on the call site\n      let args = argsNode.Node |> List.mapi (fun idx arg -> \n          let site = site (match arg.Name with Some n -> Choice1Of2 n.Node.Name | _ -> Choice2Of2 idx)\n          let expr = bindCallArgExpression site ctx arg.Value\n          match arg.Name with \n          | Some n -> bindEntity ctx (EntityKind.NamedParam(n.Node, expr)) |> setEntity ctx n\n          | None -> expr)\n      let args = bindEntity ctx (EntityKind.ArgumentList(args)) |> setEntity ctx argsNode\n      bindEntity ctx (EntityKind.Call(inst, args)) |> setEntity ctx node \n\n  | Expr.Member(instExpr, memExpr) ->\n      let instEnt = bindExpression ctx instExpr\n      let memEnt = bindMemberExpression instEnt ctx memExpr \n      bindEntity ctx (EntityKind.MemberAccess(memEnt)) |> setEntity ctx node\n\n  | Expr.Binary(lExpr, op, rExpr) ->\n      let lEnt = bindExpression ctx lExpr\n      let rEnt = bindExpression ctx rExpr\n      bindEntity ctx (EntityKind.Operator(lEnt, op.Node, rEnt)) |> setEntity ctx node\n\n  | Expr.List(elExprs) ->\n      let elEnts = elExprs |> List.map (bindExpression ctx)\n      bindEntity ctx (EntityKind.List(elEnts)) |> setEntity ctx node\n\n  | Expr.Function(var, bodyExpr) ->\n      let callSite = match ctx.CallSite with Some s -> s | None -> failwith \"bindExpression: Function missing call site\"\n      let varEnt = bindEntity ctx (EntityKind.Binding(var.Node, callSite)) |> setEntity ctx var\n      let bodyEnt = bindExpression { ctx with Variables = Map.add var.Node varEnt ctx.Variables } bodyExpr\n      bindEntity ctx (EntityKind.Function(varEnt, bodyEnt)) |> setEntity ctx node\n\n  | Expr.Boolean b -> bindEntity ctx (EntityKind.Constant(Constant.Boolean b)) |> setEntity ctx node\n  | Expr.String s -> bindEntity ctx (EntityKind.Constant(Constant.String s)) |> setEntity ctx node\n  | Expr.Number n -> bindEntity ctx (EntityKind.Constant(Constant.Number n)) |> setEntity ctx node\n  | Expr.Empty -> bindEntity ctx (EntityKind.Constant Constant.Empty) |> setEntity ctx node\n\n/// Bind entities to a command in a parse tree. The handling of `let` is similar\n/// to the handling of lambda abstraction. This adds variables to context - we ignore\n/// bound entities, because nothing depends on it (except via variables)\nlet bindCommand ctx node =\n  match node.Node with\n  | Command.Let(v, e) ->\n      let body = bindExpression ctx e \n      let var = bindEntity ctx (EntityKind.Variable(v.Node, body)) |> setEntity ctx v\n      let node = bindEntity ctx (EntityKind.LetCommand(var, body)) |> setEntity ctx node\n      { ctx with Variables = Map.add v.Node var ctx.Variables }, node\n\n  | Command.Expr(e) ->\n      let body = bindExpression ctx e \n      let node = bindEntity ctx (EntityKind.RunCommand(body)) |> setEntity ctx node\n      ctx, node\n\n/// Bind entities to all nodes in the program\nlet bindProgram ctx (program:Program) =\n  ctx.Bound.Clear()\n  let _, ents = \n    program.Body.Node |> List.fold (fun (ctx, nodes) cmd -> \n      let ctx, node = bindCommand ctx cmd\n      ctx, node::nodes) (ctx, [])  \n  bindEntity ctx (EntityKind.Program(ents)) |> setEntity ctx program.Body,\n  BindingResult(ctx.Bound.ToArray())\n  \n/// Create a new binding context - this stores cached entities\nlet createContext (globals:list<Entity>) name =\n  let root = \n    { Kind = EntityKind.Root; Errors = []; Symbol = createSymbol(); Type = None; Meta = []; Value = None }\n  { Table = System.Collections.Generic.Dictionary<_, _>(); \n    Bound = ResizeArray<_>(); Variables = Map.empty; \n    GlobalValues = Map.ofList [ for e in globals -> { Name = e.Name }, e ]\n    Root = root; CallSite = None; Chain = None }","import { defaultCancellationToken } from \"./Async\";\r\nimport { fromContinuations } from \"./Async\";\r\nimport { startImmediate } from \"./Async\";\r\nvar QueueCell = (function () {\r\n    function QueueCell(message) {\r\n        this.value = message;\r\n    }\r\n    return QueueCell;\r\n}());\r\nvar MailboxQueue = (function () {\r\n    function MailboxQueue() {\r\n    }\r\n    MailboxQueue.prototype.add = function (message) {\r\n        var itCell = new QueueCell(message);\r\n        if (this.firstAndLast) {\r\n            this.firstAndLast[1].next = itCell;\r\n            this.firstAndLast = [this.firstAndLast[0], itCell];\r\n        }\r\n        else\r\n            this.firstAndLast = [itCell, itCell];\r\n    };\r\n    MailboxQueue.prototype.tryGet = function () {\r\n        if (this.firstAndLast) {\r\n            var value = this.firstAndLast[0].value;\r\n            if (this.firstAndLast[0].next)\r\n                this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];\r\n            else\r\n                delete this.firstAndLast;\r\n            return value;\r\n        }\r\n        return void 0;\r\n    };\r\n    return MailboxQueue;\r\n}());\r\nvar MailboxProcessor = (function () {\r\n    function MailboxProcessor(body, cancellationToken) {\r\n        this.body = body;\r\n        this.cancellationToken = cancellationToken || defaultCancellationToken;\r\n        this.messages = new MailboxQueue();\r\n    }\r\n    MailboxProcessor.prototype.__processEvents = function () {\r\n        if (this.continuation) {\r\n            var value = this.messages.tryGet();\r\n            if (value) {\r\n                var cont = this.continuation;\r\n                delete this.continuation;\r\n                cont(value);\r\n            }\r\n        }\r\n    };\r\n    MailboxProcessor.prototype.start = function () {\r\n        startImmediate(this.body(this), this.cancellationToken);\r\n    };\r\n    MailboxProcessor.prototype.receive = function () {\r\n        var _this = this;\r\n        return fromContinuations(function (conts) {\r\n            if (_this.continuation)\r\n                throw new Error(\"Receive can only be called once!\");\r\n            _this.continuation = conts[0];\r\n            _this.__processEvents();\r\n        });\r\n    };\r\n    MailboxProcessor.prototype.post = function (message) {\r\n        this.messages.add(message);\r\n        this.__processEvents();\r\n    };\r\n    MailboxProcessor.prototype.postAndAsyncReply = function (buildMessage) {\r\n        var result;\r\n        var continuation;\r\n        function checkCompletion() {\r\n            if (result && continuation)\r\n                continuation(result);\r\n        }\r\n        var reply = {\r\n            reply: function (res) {\r\n                result = res;\r\n                checkCompletion();\r\n            }\r\n        };\r\n        this.messages.add(buildMessage(reply));\r\n        this.__processEvents();\r\n        return fromContinuations(function (conts) {\r\n            continuation = conts[0];\r\n            checkCompletion();\r\n        });\r\n    };\r\n    return MailboxProcessor;\r\n}());\r\nexport default MailboxProcessor;\r\nexport function start(body, cancellationToken) {\r\n    var mbox = new MailboxProcessor(body, cancellationToken);\r\n    mbox.start();\r\n    return mbox;\r\n}\r\n","﻿module TheGamma.Errors\nopen TheGamma.Ast\n\nmodule Tokenizer = \n  let inputEndInsideString rng s =\n    { Number = 101; Range = rng; Message = sprintf \"Missing \\\" at the end of the input. The string \\\"%s\\\" ends without closing double-quote.\" s }\n  let missingClosingQuote rng q = \n    { Number = 102; Range = rng; Message = sprintf \"Quoted identifier '%s' is missing closing quote.\" q }\n  let unexpectedCharacter rng (c:char) =\n    { Number = 103; Range = rng; Message = sprintf \"Unexcpected character '%s' in the input.\" (string c) }\n\nmodule Parser = \n  let unexpectedTokenAfterDot rng tok =\n    { Number = 201; Range = rng; Message = sprintf \"Unexpected %s after '.' in method chain\" (formatTokenInfo tok) }\n\n  let unexpectedScopeEndAfterDot rng tok =\n    { Number = 202; Range = rng; Message = sprintf \"Unexpected end of scope after %s. Did you forget to indent the rest of the member chain?\" (formatTokenInfo tok) }\n\n  let unexpectedTokenInPlaceholder rng tok =\n    { Number = 203; Range = rng; Message = sprintf \"Unexpected token '%s' in placeholder expression. Shold be `[ident: <expr>]`\" (formatTokenInfo tok) }\n\n  let unexpectedScopeEndInPlaceholder rng tok =\n    if Option.isSome tok then { Number = 204; Range = rng; Message = sprintf \"Unexpected end of scope in placeholder after %s. Did you forget to indent the body of the plceholder?\" (formatTokenInfo tok.Value) }\n    else { Number = 204; Range = rng; Message = \"Unexpected end of scope in placeholder after expression. Did you forget to indent the body of the plceholder?\" }\n\n  let unexpectedEndOfPlaceholder rng =\n    { Number = 205; Range = rng; Message = \"Incomplete placeholder expression. Shold be `[ident: <expr>]`\" }\n\n  let unexpectedEndAfterOperator rng op =\n    { Number = 206; Range = rng; Message = sprintf \"Unexpected token after operator '%s'. Expected an expression or closing parenthesis.\" (formatTokenInfo op) }\n\n  let unexpectedTokenInArgList rng tok =\n    { Number = 207; Range = rng; Message = sprintf \"Unexpected token '%s' in list of call arguments\" (formatTokenInfo tok) }\n\n  let unexpectedScopeEndInArgList rng =\n    { Number = 208; Range = rng; Message = \"Unexpected end of argument list. Did you forget to indent the arguments?\" }\n\n  let unexpectedTokenInParenthesizedExpr rng tok =\n    { Number = 209; Range = rng; Message = sprintf \"Unexpected token '%s' in parenthesized expression. Are you missing ')'?\" (formatTokenInfo tok) }\n\n  let unexpectedScopeEndInParenthesizedExpr rng =\n    { Number = 210; Range = rng; Message = \"Unexpected end of nested expression in `(`. Did you forget to indent the body of the expression?\" }\n\n  let missingParenthesizedExpr rng =\n    { Number = 211; Range = rng; Message = \"The parenthesized expression (...) is missing body!\" }\n\n  let unexpectedTokenInList rng tok =\n    { Number = 212; Range = rng; Message = sprintf \"Unexpected token '%s' in list expression\" (formatTokenInfo tok) }\n\n  let unexpectedScopeEndInList rng =\n    { Number = 213; Range = rng; Message = \"Unexpected end of list expression. Did youu forget to indent the elements of the list?\" }\n\n  let unexpectedTokenInLetBinding rng tok =\n    { Number = 214; Range = rng; Message = sprintf \"Unexpected token '%s' in let declaration (should be `let name = expr`)\" (formatTokenInfo tok) }\n\n  let missingBodyInLetBinding rng =\n    { Number = 215; Range = rng; Message = \"This let binding is missing body after equals (should be `let name = expr`\" }\n\n  let unexpectedNestedTokenInCommand rng tok =\n    { Number = 216; Range = rng; Message = sprintf \"Unexpected indented token '%s' in command list. Try removing the indentation before the token.\" (formatTokenInfo tok) }\n\n  let unexpectedTokenAfterFun rng tok =\n    { Number = 217; Range = rng; Message = sprintf \"Unexpected token '%s' after `fun`. Expected variable name.\" (formatTokenInfo tok) }\n\n  let missingArrowInFunc rng =\n    { Number = 218; Range = rng; Message = \"Missing arrow after variable in function definition\" }\n\n  let unexpectedScopeEndInFunc rng =\n    { Number = 219; Range = rng; Message = \"Unexpected end of function declaration. Did you forget to indent the body of the function?\" }\n\n  let missingBodyOfFunc rng =\n    { Number = 220; Range = rng; Message = \"The function is missing body. Did you forget to indent the body of the function?\" }\n\n  let unexpectedScopeEndInLet rng =\n    { Number = 221; Range = rng; Message = \"Unexpected end of let declaration. Did you forget to indent the body of the let declaration?\" }\n\n  let exceptionWhileParsing rng msg = \n    { Number = 299; Range = rng; Message = \"Unexpected exception while parsing: \" + msg }\n\n    \nmodule TypeChecker = \n  let numericOperatorExpectsNumbers op idx typs typ rng =\n    { Number = 301; Range = rng \n      Message = \n        sprintf \"Both operands of binary operator '%s' should be %s but the %s operand was %s instead.\" \n          (String.concat \" or \" (List.map formatTypeInfo typs))\n          (formatToken (TokenKind.Operator op)) (if idx = 0 then \"left\" else \"right\") (formatTypeInfo typ) }\n\n  let variableNotInScope name rng =\n    { Number = 302; Range = rng \n      Message = sprintf \"Variable '%s' is not in scope.\" name }\n\n  let private formatMembers (members:seq<Member>) =     \n    let members = members |> Array.ofSeq\n    let suffix = if members.Length > 10 then sprintf \", (%d members)\" (members.Length - 10) else \"\"\n    (String.concat \", \" [ for m in members -> m.Name ]) + suffix\n\n  let memberMissing name members rng = \n    { Number = 303; Range = rng \n      Message = sprintf \"Could not find property '%s' in the list '%s'.\" name (formatMembers members) }\n\n  let notAnObject name typ rng = \n    { Number = 305; Range = rng \n      Message = sprintf \"Type is not an object but %s and it does not have member `%s`\" (formatTypeInfo typ) name }\n\n  let listElementTypeDoesNotMatch listty elty rng = \n    { Number = 306; Range = rng \n      Message = sprintf \"The type of this list element is %s but it should be %s\" (formatTypeInfo elty) (formatTypeInfo listty) }\n\n  let nameBasedParamMustBeLast rng = \n    { Number = 307; Range = rng \n      Message = \"All named parameters must be at the end of parameter list.\" }\n\n  let parameterMissingValue par rng = \n    { Number = 308; Range = rng \n      Message = sprintf \"Required parameter `%s` is not given a value.\" par }\n\n  let notAnMethod name typ rng = \n    { Number = 309; Range = rng \n      Message = sprintf \"The type of member %s is `%s` and not a method and so it cannot be called.\" name (formatTypeInfo typ) }\n\n(*\n  let incorrectParameterType parName parType actualType err1 err2 rng = \n    { Number = 309; Range = rng \n      Message = \n        sprintf \"The value of parameter `%s` has wrong type. Expected %s but got %s. The type %s does not match the type %s.\"\n          parName (formatTypeInfo parType) (formatTypeInfo actualType) (formatTypeInfo err1) (formatTypeInfo err2) }\n\n  let inferenceConflict var t1 t2 rng = \n    { Number = 310; Range = rng \n      Message = \n        sprintf \"The arguments of the call have conflicting types. The type %s assigned to a variable %s does not match the type %s.\"\n          (formatTypeInfo t1) var (formatTypeInfo t2) }\n*)\n  let parameterConflict rng = \n    { Number = 310; Range = rng \n      Message = \"Invalid argument type\" }\n\n  let callMissingInstance name rng = \n    { Number = 311; Range = rng \n      Message = sprintf \"The `%s` property access or call is missing an instance\" name }\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","require('../../modules/es6.number.parse-float');\nmodule.exports = parseFloat;\n","module.exports = { \"default\": require(\"core-js/library/fn/number/parse-float\"), __esModule: true };","﻿// ------------------------------------------------------------------------------------------------\n// Tokenizer for TheGamma script language - turns string into Token[]\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Tokenizer\nopen TheGamma\n\n/// Tokenization context for storing input, errors & parsed tokens\ntype Context = \n  { Tokens : ResizeArray<Token>\n    Errors : ResizeArray<Error<Range>>\n    Input : string }\n\n/// Test whether 's' has 'prefix' at offset 'i'. The\n/// parameter 'j' is index inside prefix where we're starting.\nlet rec startsWith (s:string) i j (prefix:string) = \n  if j = prefix.Length then true\n  elif i = s.Length then false\n  elif s.[i] <> prefix.[j] then false\n  else startsWith s (i+1) (j+1) prefix\n\n/// Is given character a string?\nlet letter c = (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')\n\n/// Is given character a number?\nlet number c = c >= '0' && c <= '9'\n\n\n/// Add newly parsed token to the context, increment \n/// offset correctly & continue tokenizing\nlet rec addAndTokenize ctx tok i l =\n  { Token = tok\n    Range = { Start = i; End = i + l - 1 } } |> ctx.Tokens.Add \n  tokenizeInput ctx (i + l)\n\n\n/// Tokenize identifier (continue consuming letters & characters)\nand tokenizeIdent ctx start l =\n  if start + l < ctx.Input.Length && \n      (letter ctx.Input.[start+l] || number ctx.Input.[start+l]) then\n    tokenizeIdent ctx start (l+1)\n  else\n    addAndTokenize ctx (TokenKind.Ident(ctx.Input.Substring(start, l))) start l\n\n\n/// Tokenize string (until end of input or closing double-quote)\nand tokenizeString ctx acc start l =\n  if start + l >= ctx.Input.Length then \n    tokenizeStringEnd true ctx acc start l\n  else\n    match ctx.Input.[start + l] with\n    | '\\\\' when start + l + 1 >= ctx.Input.Length ->\n        tokenizeStringEnd true ctx ('\\\\'::acc) start (l + 1)\n    | '\\\\' ->\n        match ctx.Input.[start + l + 1] with\n        | 'n' -> tokenizeString ctx ('\\n'::acc) start (l + 2)\n        | 't' -> tokenizeString ctx ('\\t'::acc) start (l + 2)\n        | '\\\\' -> tokenizeString ctx ('\\\\'::acc) start (l + 2)\n        | '\"' -> tokenizeString ctx ('\"'::acc) start (l + 2)\n        | c -> tokenizeString ctx (c::'\\\\'::acc) start (l + 2)\n    | '\"' -> tokenizeStringEnd false ctx acc start (l + 1)\n    | c -> tokenizeString ctx (c::acc) start (l+1)\n\nand tokenizeStringEnd error ctx acc start l =\n  let str = acc |> List.toArray |> Array.rev |> System.String\n  let rng = { Start = start; End = start + l }\n  if error then ctx.Errors.Add(Errors.Tokenizer.inputEndInsideString rng str) \n  addAndTokenize ctx (TokenKind.String(str)) start l\n\n\n/// Tokenize quoted ident (until end of input or closing single-quote)\nand tokenizeQuotedIdent ctx start l =\n  if start + l >= ctx.Input.Length then \n    tokenizeQuotedIdentEnd true ctx start l\n  else\n    match ctx.Input.[start + l] with\n    | '\\n' -> tokenizeQuotedIdentEnd true ctx start (l + 1)\n    | '\\'' -> tokenizeQuotedIdentEnd false ctx start (l + 1)\n    | c -> tokenizeQuotedIdent ctx start (l + 1)\n\nand tokenizeQuotedIdentEnd error ctx start l =\n  let rng = { Start = start; End = start + l }\n  let qid = ctx.Input.Substring(start + 1, l - if error then 1 else 2)\n  let qid = if qid.EndsWith(\"\\n\") then qid.Substring(0, qid.Length-1) else qid\n  if error then ctx.Errors.Add(Errors.Tokenizer.missingClosingQuote rng qid) \n  addAndTokenize ctx (TokenKind.QIdent(qid)) start l\n\n\n/// Tokenize whitespace - consume all spaces available\nand tokenizeWhite ctx start l =\n  if start + l < ctx.Input.Length && ctx.Input.[start+l] = ' ' then\n    tokenizeWhite ctx start (l+1)\n  else\n    addAndTokenize ctx (TokenKind.White(ctx.Input.Substring(start, l))) start l\n\n\n/// Tokenize number - consume all numbers, or '.' when 'decimal = false'\nand tokenizeNumber ctx decimal start l =\n  if start + l < ctx.Input.Length && number ctx.Input.[start+l] then\n    tokenizeNumber ctx decimal start (l+1)\n  elif start + l < ctx.Input.Length && not decimal && ctx.Input.[start+l] = '.' then\n    tokenizeNumber ctx true start (l+1)\n  else\n    let str = ctx.Input.Substring(start, l)\n    addAndTokenize ctx (TokenKind.Number(str, float str)) start l\n\n\nand tokenizeInput ctx i = \n  // Reached the end of the input\n  if i >= ctx.Input.Length then ctx else\n\n  // Keyword or multi-letter symbol\n  match ctx.Input.[i] with\n  | '-' when startsWith ctx.Input i 0 \"->\" -> \n      addAndTokenize ctx (TokenKind.Arrow) i 2\n  | 'f' when startsWith ctx.Input i 0 \"fun\" -> \n      addAndTokenize ctx (TokenKind.Fun) i 3\n  | 'l' when startsWith ctx.Input i 0 \"let\" -> \n      addAndTokenize ctx (TokenKind.Let) i 3\n  | 't' when startsWith ctx.Input i 0 \"true\" -> \n      addAndTokenize ctx (TokenKind.Boolean true) i 4\n  | 'f' when startsWith ctx.Input i 0 \"false\" -> \n      addAndTokenize ctx (TokenKind.Boolean false) i 5\n  | '<' when startsWith ctx.Input i 0 \"<=\" -> \n      addAndTokenize ctx (TokenKind.Operator Operator.LessThanOrEqual) i 2\n  | '>' when startsWith ctx.Input i 0 \">=\" -> \n      addAndTokenize ctx (TokenKind.Operator Operator.GreaterThanOrEqual) i 2\n\n  // Single-letter tokens\n  | '(' -> addAndTokenize ctx TokenKind.LParen i 1\n  | ')' -> addAndTokenize ctx TokenKind.RParen i 1\n  | '=' -> addAndTokenize ctx TokenKind.Equals i 1\n  | '.' -> addAndTokenize ctx TokenKind.Dot i 1\n  | ',' -> addAndTokenize ctx TokenKind.Comma i 1\n  | ':' -> addAndTokenize ctx TokenKind.Colon i 1\n  | '[' -> addAndTokenize ctx TokenKind.LSquare i 1\n  | ']' -> addAndTokenize ctx TokenKind.RSquare i 1\n  | '\\n' -> addAndTokenize ctx TokenKind.Newline i 1\n\n  // Single-letter operators\n  | '>' -> addAndTokenize ctx (TokenKind.Operator(Operator.GreaterThan)) i 1\n  | '<' -> addAndTokenize ctx (TokenKind.Operator(Operator.LessThan)) i 1\n  | '+' -> addAndTokenize ctx (TokenKind.Operator(Operator.Plus)) i 1\n  | '-' -> addAndTokenize ctx (TokenKind.Operator(Operator.Minus)) i 1\n  | '*' -> addAndTokenize ctx (TokenKind.Operator(Operator.Multiply)) i 1\n  | '%' -> addAndTokenize ctx (TokenKind.Operator(Operator.Modulo)) i 1\n  | '/' -> addAndTokenize ctx (TokenKind.Operator(Operator.Divide)) i 1\n  | '^' -> addAndTokenize ctx (TokenKind.Operator(Operator.Power)) i 1\n  \n  // Symbols that start something (string, whitespace, quoted ident)\n  | '\"' -> tokenizeString ctx [] i 1\n  | ' ' -> tokenizeWhite ctx i 1\n  | '\\'' -> tokenizeQuotedIdent ctx i 1\n  | c ->\n  \n  // Letter starts identifer, number starts number\n  if letter c then tokenizeIdent ctx i 1\n  elif number c then tokenizeNumber ctx false i 1\n  else \n\n  // Otherwise report an error & skip one character\n  ctx.Errors.Add(Errors.Tokenizer.unexpectedCharacter { Start = i; End = i } c)\n  addAndTokenize ctx (TokenKind.Error c) i 1\n\n\n/// Tokenize the given input. Consumes all input characters and returns\n/// list of parsed tokens together with an array of tokenization errors.\nlet tokenize input = \n  let ctx = \n    { Errors = new ResizeArray<_>()\n      Tokens = new ResizeArray<_>()\n      Input = input }\n  let ctx = tokenizeInput ctx 0\n  ctx.Tokens.Add { Token = TokenKind.EndOfFile; Range = { Start = input.Length; End = input.Length } }\n  ctx.Tokens.ToArray(), ctx.Errors.ToArray()\n","﻿// ------------------------------------------------------------------------------------------------\n// Parser for TheGamma script langauge - turns Token[] into Program\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Parser\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Common\n\n// ------------------------------------------------------------------------------------------------\n// This is mostly a recursive-descent parser\n// ------------------------------------------------------------------------------------------------\n\n/// Parsing context is mutated, because we never backtrack (except for one case,\n/// in which case we clone the context explicitly using `clone`)\ntype ParsingContext = \n  { Tokens : Token[]\n    Whitespace : ResizeArray<Token>\n    Errors : ResizeArray<Error<Range>>\n    mutable SilentMode : bool\n    mutable Position : int }\n\nmodule Context =\n  /// Lets us implement lookahead withot making the whole context immutable\n  /// (this is only used in fairly limited scenarios - e.g. named arguments)\n  let clone ctx = \n    { Tokens = ctx.Tokens\n      Whitespace = ResizeArray(ctx.Whitespace)\n      Errors = ResizeArray(ctx.Errors)\n      Position = ctx.Position\n      SilentMode = ctx.SilentMode }\n\n  /// Advance the position\n  let next ctx = ctx.Position <- ctx.Position + 1\n\n  /// Add specified error to context\n  let error ctx e = if not ctx.SilentMode then ctx.Errors.Add(e)\n\n  /// Run the given function with silent mode on\n  let silent ctx f = \n    ctx.SilentMode <- true\n    let res = f ctx\n    ctx.SilentMode <- false    \n    res\n\n  /// Parses next token & accumulates whitespace. \n  /// Only retrns tokens if they are next or indented.\n  let rec tokenIndent ctx = \n    match ctx.Tokens.[ctx.Position] with\n    | { Token = TokenKind.Newline } as t1 ->\n        match ctx.Tokens.[ctx.Position + 1] with\n        | t2 & { Token = TokenKind.White s } ->\n            next ctx; next ctx\n            ctx.Whitespace.Add t1\n            ctx.Whitespace.Add t2\n            tokenIndent ctx\n        | _ -> None\n    | { Token = TokenKind.Error _ | TokenKind.White _ } as t ->\n        ctx.Whitespace.Add t\n        next ctx\n        tokenIndent ctx\n    | t -> \n        let white = ctx.Whitespace |> Seq.toList\n        ctx.Whitespace.Clear()\n        Some(white, t)\n\n  /// Parses next token & accumulates whitespace. \n  /// Only retrns tokens if they are first or non-indented after a newline.\n  let rec tokenNonIndent ctx = \n    match ctx.Tokens.[ctx.Position] with\n    | { Token = TokenKind.Newline } as t1 ->\n\n        // Find next Newline that is followed by non-whitespace (indented or not)\n        let mutable newNonEmptyLinePos = ctx.Position\n        let mutable i = ctx.Position\n        while i < ctx.Tokens.Length do\n          match ctx.Tokens.[i].Token with\n          | TokenKind.Newline -> newNonEmptyLinePos <- i; i <- i + 1\n          | TokenKind.White _ -> i <- i + 1\n          | _ -> i <- ctx.Tokens.Length          \n        ctx.Position <- newNonEmptyLinePos\n\n        // If it was indented, then bad luck...\n        match ctx.Tokens.[ctx.Position + 1] with\n        | { Token = TokenKind.White _ } -> None\n        | t -> \n            next ctx\n            ctx.Whitespace.Add(t1)\n            let white = ctx.Whitespace |> Seq.toList\n            ctx.Whitespace.Clear()\n            Some(white, t)\n\n    | { Token = TokenKind.White _ } when ctx.Position = 0 -> None\n    | t when ctx.Position = 0 || ctx.Position = ctx.Tokens.Length - 1 -> \n        Some([], t)\n    | _ -> None\n\n/// Creates a node with a range and no whitespace\nlet node rng n = \n  { Node = n; Range = rng; WhiteBefore = []; WhiteAfter = []; Entity = None }\n\n/// Appends whitespace after node\nlet whiteAfter w n = { n with WhiteAfter = n.WhiteAfter @ w  }\n\n/// Preppends whitespace beforenode\nlet whiteBefore w n = { n with WhiteBefore = w @ n.WhiteBefore }\n\n/// Parsed token is identifier or quoted identifier (with preceding whitespace)\nlet (|Identifier|_|) t = \n  match t with\n  | white, { Range = rng; Token = (TokenKind.Ident id | TokenKind.QIdent id) } ->\n      node rng { Name.Name = id } |> whiteBefore white |> Some\n  | _ -> None\n\n// ------------------------------------------------------------------------------------------------\n// Operator precedence handling\n// ------------------------------------------------------------------------------------------------\n\ntype Associativity = Left | Right\n\nlet precedence = function\n  | Operator.Equals -> 0, Left\n  | Operator.GreaterThan | Operator.GreaterThanOrEqual\n  | Operator.LessThan | Operator.LessThanOrEqual -> 1, Left\n  | Operator.Plus | Operator.Minus -> 2, Left\n  | Operator.Modulo | Operator.Multiply | Operator.Divide -> 3, Left\n  | Operator.Power -> 4, Right\n  \n/// Represnts a sequence of expressions separated by binary operators\n/// (e.g. 'f x + 1 * 2 / g y' has 4 expressions separated by 3 operators)\ntype OpExpr = OpExpr of Node<Expr> * option<Node<Operator> * OpExpr>\n\n/// Turn 'OpExpr' into a parsed 'Expr' using the \"Precedence climbing method\"\n/// (see https://en.wikipedia.org/wiki/Operator-precedence_parser)\nlet rec precClimb minPrec (OpExpr(app, next)) =   \n  let rec loop result (next:(Node<Operator>*OpExpr) option) = \n    match next with \n    | Some(op, next) when fst (precedence op.Node) >= minPrec ->\n        let prec, assoc = precedence op.Node\n        let nextMinPrec = \n          if assoc = Left then prec + 1 else prec\n        let rhs, next = precClimb nextMinPrec next\n        let result = node (unionRanges result.Range rhs.Range) (Expr.Binary(result, op, rhs))\n        loop result next\n    | _ -> result, next      \n  loop app next\n\n/// The terms are passed in reverse order as accumulated\nlet buildExpression terms term =\n  terms \n  |> List.fold (fun oe (t, op) -> OpExpr(t, Some(op, oe))) (OpExpr(term, None))\n  |> precClimb 0\n  |> fst\n\n// ------------------------------------------------------------------------------------------------\n// The parser - member access and calls\n// ------------------------------------------------------------------------------------------------\n\n/// Try parsing input as '<id> = <expr>', if that does not work, treat it as <expr>\nlet rec parseExpressionOrNamedParam ctx = \n  let lookAheadCtx = Context.clone ctx\n  match Context.tokenIndent lookAheadCtx with\n  | Some(Identifier id) ->\n      Context.next lookAheadCtx\n      match Context.tokenIndent lookAheadCtx with\n      | Some(white, ({ Token = TokenKind.Equals } as t)) ->\n          // Replay what we did on lookahead context on the original context\n          ignore (Context.tokenIndent ctx); Context.next ctx\n          ignore (Context.tokenIndent ctx); Context.next ctx\n          match parseExpression [] ctx with\n          | Some expr -> Choice1Of2(whiteAfter white id, expr)\n          | None -> \n              Errors.Parser.unexpectedTokenInArgList t.Range t.Token |> Context.error ctx\n              Choice1Of2(whiteAfter white id, node { Start = id.Range.End; End = id.Range.End } Expr.Empty)\n      | _ -> Choice2Of2(parseExpression [] ctx)\n  | _ -> \n      Choice2Of2(parseExpression [] ctx)\n    \n\n/// Parse a comma separated list of expressions or named parameter assignments -- after `(`\nand parseCallArgList afterComma lastRng acc ctx = \n  let parsed, acc = \n    match parseExpressionOrNamedParam ctx with\n    | Choice2Of2(None) -> false, acc\n    | Choice2Of2(Some e) -> true, { Name = None; Value = e }::acc\n    | Choice1Of2(id, e) -> true, { Name = Some id; Value = e }::acc\n  match Context.tokenIndent ctx with\n  | Some(white, ({ Token = TokenKind.RParen } as t)) ->\n      Context.next ctx\n      if afterComma && not parsed then        \n        Errors.Parser.unexpectedTokenInArgList lastRng TokenKind.RParen |> Context.error ctx\n      t.Range, white, List.rev acc\n\n  | Some(white, { Token = TokenKind.Comma; Range = lastRng }) when parsed ->\n      Context.next ctx\n      parseCallArgList true lastRng acc ctx\n\n  | Some(_, t) when t.Token <> TokenKind.EndOfFile ->\n      // Skip over unexpected, but correctly nested tokens\n      Context.next ctx\n      Errors.Parser.unexpectedTokenInArgList t.Range t.Token |> Context.error ctx\n      Context.silent ctx (fun ctx -> \n        parseCallArgList afterComma t.Range acc ctx)\n  | _ ->\n      // Unexpected end of nesting - end argument list now\n      Errors.Parser.unexpectedScopeEndInArgList lastRng |> Context.error ctx\n      lastRng, [], List.rev acc\n\n\n/// If something goes wrong inside placeholder, this skips over everything until `]`\nand parsePlaceholderRecovery silent lastTokRng lastTokOpt whiteAcc ctx =\n  match Context.tokenIndent ctx with\n  | Some(white, { Token = TokenKind.RSquare; Range = lastTokRng }) ->\n      Context.next ctx\n      if not silent then Errors.Parser.unexpectedEndOfPlaceholder lastTokRng |> Context.error ctx\n      lastTokRng, whiteAcc @ white\n\n  | Some(white, t) when t.Token <> TokenKind.EndOfFile ->\n      // Skip over unexpected, but correctly nested tokens\n      Context.next ctx\n      if not silent then Errors.Parser.unexpectedTokenInPlaceholder t.Range t.Token |> Context.error ctx\n      parsePlaceholderRecovery true t.Range (Some t.Token) (whiteAcc @ white @ [t]) ctx\n\n  | _ ->\n      // Unexpected end of placeholder - end placeholder now\n      if not silent then Errors.Parser.unexpectedScopeEndInPlaceholder lastTokRng lastTokOpt |> Context.error ctx\n      lastTokRng, whiteAcc\n\n\n/// Parse placeholder after parsing `[` -- the full syntax is `[ident: <expr>]`\nand parsePlaceholder rngLSQuare ctx = \n  match Context.tokenIndent ctx with\n  | Some(Identifier id & (_, tokId)) ->\n      Context.next ctx\n      match Context.tokenIndent ctx with\n      | Some(whiteBeforeColon, { Token = TokenKind.Colon; Range = rngColon }) ->\n          Context.next ctx\n          match parseExpression [] ctx with\n          | Some body ->\n              match Context.tokenIndent ctx with\n              | Some(whiteBeforeSquare, { Token = TokenKind.RSquare; Range = rngRSquare }) ->\n                  Context.next ctx\n                  rngRSquare, Expr.Placeholder(whiteAfter whiteBeforeColon id, whiteAfter whiteBeforeSquare body)\n              | _ ->\n                  // RECOVERY: Skip everything until `]` or end of indentation\n                  let rng, white = parsePlaceholderRecovery false body.Range None [] ctx\n                  rng, Expr.Placeholder(id, whiteAfter white body)\n          | _ ->\n              // RECOVERY: Skip everything until `]` or end of indentation\n              let rng, white = parsePlaceholderRecovery false rngColon (Some TokenKind.Colon) [] ctx\n              rng, Expr.Placeholder(id, whiteAfter white (node rng Expr.Empty))\n      | _ ->\n          // RECOVERY: Skip everything until `]` or end of indentation\n          let rng, white = parsePlaceholderRecovery false id.Range (Some tokId.Token) [] ctx\n          rng, Expr.Placeholder(id, whiteAfter white (node rng Expr.Empty))\n    | _ ->\n        // RECOVERY: Skip everything until `]` or end of indentation\n        let rng, white = parsePlaceholderRecovery false rngLSQuare (Some TokenKind.LSquare) [] ctx\n        rng, Expr.Placeholder(node rngLSQuare { Name = \"\" }, whiteAfter white (node rng Expr.Empty))\n\n      \n/// Parse `ident` after `.` in `.ident`; skips over non-idents after dot until it finds ident\nand parseIdentAfterDot body prevDotRng prevDotTok ctx =\n  match Context.tokenIndent ctx with\n  | Some(Identifier id) ->\n      Context.next ctx\n      let body = Expr.Member(body, node id.Range (Expr.Variable id)) |> node (unionRanges body.Range id.Range)\n      parseCallOrMember body ctx\n  | Some(white, { Token = TokenKind.LSquare; Range = rngLSQuare }) ->\n      Context.next ctx\n      let rngRSquare, place = parsePlaceholder rngLSQuare ctx\n      let body = \n        Expr.Member(body, node (unionRanges rngRSquare rngLSQuare) place) \n        |> node (unionRanges rngLSQuare rngRSquare) |> whiteBefore white \n      parseCallOrMember body ctx\n  | Some(_, { Token = TokenKind.EndOfFile })\n  | None ->\n      // RECOVERY: Nothing after dot - return body so far\n      Errors.Parser.unexpectedScopeEndAfterDot prevDotRng prevDotTok |> Context.error ctx \n      let emptyRng = { End = prevDotRng.End; Start = prevDotRng.End+1 }\n      Expr.Member(body, node emptyRng (Expr.Variable(node emptyRng {Name=\"\"})))\n      |> node (unionRanges body.Range emptyRng)\n\n  | Some(white, t) ->\n      // RECOVERY: Wrong token after dot - skip and try next\n      Context.next ctx\n      Errors.Parser.unexpectedTokenAfterDot t.Range t.Token |> Context.error ctx \n      let emptyRng = { End = prevDotRng.End; Start = prevDotRng.End+1 }\n      let body =\n        Expr.Member(body, node emptyRng (Expr.Variable(node emptyRng {Name=\"\"})))\n        |> node (unionRanges body.Range emptyRng)\n      Context.silent ctx (parseIdentAfterDot body prevDotRng prevDotTok)\n\n\n\n/// Parse `.ident` or `(args)` after we parsed an expression specified as body\nand parseCallOrMember body ctx = \n  match Context.tokenIndent ctx with\n  | Some(white, { Token = TokenKind.LParen; Range = firstRng }) ->\n      Context.next ctx\n      let lastRng, white, args = parseCallArgList false firstRng [] ctx\n      let body = \n        Expr.Call(body, whiteAfter white (node (unionRanges firstRng lastRng) args)) \n        |> node (unionRanges body.Range lastRng)\n      // Parse more chain elements after `(args).`\n      match Context.tokenIndent ctx with\n      | Some(white, t & { Token = TokenKind.Dot }) ->\n          Context.next ctx\n          parseIdentAfterDot (whiteAfter white body) t.Range t.Token ctx\n      | _ -> body\n            \n  | Some(white, t & { Token = TokenKind.Dot }) ->\n      Context.next ctx\n      parseIdentAfterDot (whiteAfter white body) t.Range t.Token ctx\n\n  | _ -> body      \n\n// ------------------------------------------------------------------------------------------------\n// The parser - functions, lists\n// ------------------------------------------------------------------------------------------------\n\n/// We already parsed `fun`, parse the rest of the function, i.e. `<id> -> <expr>`\nand parseFunction ctx funRng = \n  match Context.tokenIndent ctx with\n  | Some(Identifier id) ->\n      Context.next ctx\n      match Context.tokenIndent ctx with\n      | Some(whiteAfterId, { Token = TokenKind.Arrow; Range = rngArr }) ->\n          Context.next ctx\n          let body = \n            match parseExpression [] ctx with\n            | Some body -> body\n            | _ -> \n                Errors.Parser.missingBodyOfFunc (unionRanges funRng rngArr) |> Context.error ctx\n                node { Start = rngArr.End; End = rngArr.End } Expr.Empty\n          let rng = unionRanges funRng body.Range\n          node rng (Expr.Function(whiteAfter whiteAfterId id, body)) |> Some\n\n      | nt -> \n          // RECOVERY: Missing arrow - try parsing the body anyway\n          let errRng, whiteAfterId = \n            match nt with\n            | None -> unionRanges funRng id.Range, []\n            | Some(whiteAfterId, t) -> t.Range, whiteAfterId\n          Errors.Parser.missingArrowInFunc errRng |> Context.error ctx\n          let body = \n            match parseExpression [] ctx with \n            | Some e -> e \n            | _ -> node {Start=id.Range.End; End=id.Range.End} Expr.Empty\n          node (unionRanges funRng body.Range) \n            (Expr.Function(id, whiteBefore whiteAfterId body)) |> Some            \n          \n  // RECOVERY: Unexpected token or end of scope - return empty function\n  | Some(white, t) ->\n      Errors.Parser.unexpectedTokenAfterFun t.Range t.Token |> Context.error ctx\n      let rng = { Start = funRng.End; End = funRng.End }\n      node rng (Expr.Function(node rng {Name=\"\"}, node rng Expr.Empty)) \n      |> whiteBefore white |> Some\n  \n  | None ->\n      Errors.Parser.unexpectedScopeEndInFunc funRng |> Context.error ctx\n      let rng = { Start = funRng.End; End = funRng.End }\n      node rng (Expr.Function(node rng {Name=\"\"}, node rng Expr.Empty)) |> Some\n    \n\n/// Parse expression followed by a list of more elements or closing square bracket\nand parseListElements afterComma lastRng whiteStart startRng acc ctx =\n  let parsed, acc =  \n    match parseExpression [] ctx with\n    | Some expr -> true, fun white -> (whiteAfter white expr)::acc\n    | _ -> false, fun _ -> acc\n\n  match Context.tokenIndent ctx with\n  | Some(white, { Token = TokenKind.RSquare; Range = endRng }) ->\n      Context.next ctx\n      if not parsed && afterComma then\n        Errors.Parser.unexpectedTokenInList lastRng TokenKind.Comma |> Context.error ctx\n      node (unionRanges startRng endRng) (Expr.List(List.rev (acc []))) |> whiteBefore white |> Some\n\n  | Some(white, { Token = TokenKind.Comma; Range = lastRng }) ->\n      Context.next ctx\n      if not parsed && afterComma then\n        Errors.Parser.unexpectedTokenInList lastRng TokenKind.Comma |> Context.error ctx\n      parseListElements true lastRng whiteStart startRng (acc white) ctx\n\n  | Some(_, t) when t.Token <> TokenKind.EndOfFile ->\n      // Skip over unexpected, but correctly nested tokens\n      Context.next ctx\n      Errors.Parser.unexpectedTokenInList t.Range t.Token |> Context.error ctx\n      Context.silent ctx (fun ctx ->\n        parseListElements afterComma t.Range whiteStart startRng (acc []) ctx)\n  | _ ->\n      // Unexpected end of nesting - end argument list now\n      Errors.Parser.unexpectedScopeEndInList lastRng |> Context.error ctx\n      node (unionRanges startRng lastRng) (Expr.List(List.rev (acc []))) |> Some\n\n\n// ------------------------------------------------------------------------------------------------\n// The parser - terms and expressions\n// ------------------------------------------------------------------------------------------------\n\n/// A term is a single thing inside expression involving operators, i.e.\n///   <expression> := <term> <op> <term> <op> .. <op> <term>\nand parseTerm ctx = \n  match Context.tokenIndent ctx with\n  // Variable or call chain\n  | Some(Identifier id) ->\n      Context.next ctx\n      parseCallOrMember (node id.Range (Expr.Variable id)) ctx |> Some\n\n  // String, numeric and Boolean literals\n  | Some(white, { Token = TokenKind.Number(_, n); Range = r }) ->\n      Context.next ctx\n      node r (Expr.Number n) |> whiteAfter white |> Some\n  | Some(white, { Token = TokenKind.String(s); Range = r }) ->\n      Context.next ctx\n      node r (Expr.String s) |> whiteAfter white |> Some\n  | Some(white, { Token = TokenKind.Boolean(b); Range = r }) ->\n      Context.next ctx\n      node r (Expr.Boolean b) |> whiteAfter white |> Some\n\n  // Parse nested expressions starting with `(` or list starting with `[`\n  | Some(white, ({ Token = TokenKind.LParen } as t)) ->\n      Context.next ctx\n      parseParenTermEnd (t::List.rev white) [] (parseExpression [] ctx) ctx\n  | Some(white, ({ Token = TokenKind.LSquare } as t)) ->\n      Context.next ctx\n      parseListElements false t.Range white t.Range [] ctx\n\n  | Some(white, ({ Token = TokenKind.Fun } as t)) ->\n      Context.next ctx\n      parseFunction ctx t.Range\n\n  // Not a term, but that's fine\n  | _ -> None \n\n\n/// Parse what follows after `(<expr>` - either `)` or some errors \nand parseParenTermEnd wb wa bodyOpt ctx =  \n  // Create parenthesized expression body, or return empty expression if missing\n  let makeBody wa =\n    let body = \n      match bodyOpt with\n      | Some body -> body\n      | None -> \n          let rng = List.append [List.head wb] wa |> List.map (fun t -> t.Range) |> List.reduce unionRanges\n          Errors.Parser.missingParenthesizedExpr rng |> Context.error ctx\n          node rng Expr.Empty\n    Some(body |> whiteBefore (List.rev wb) |> whiteAfter (List.rev wa))\n\n  // Wait for ')', ignoring other nested tokens & ending on end of nesting\n  match Context.tokenIndent ctx with\n  | Some(white, ({ Token = TokenKind.RParen } as t)) -> \n      Context.next ctx\n      makeBody (t::(List.append (List.rev white) wa))\n  | Some(white, t) -> \n      Context.next ctx\n      Errors.Parser.unexpectedTokenInParenthesizedExpr t.Range t.Token |> Context.error ctx\n      Context.silent ctx (fun ctx ->\n        parseParenTermEnd wb (t::(List.append (List.rev white) wa)) bodyOpt ctx)\n  | None ->\n      let rng = match bodyOpt with Some b -> b.Range | _ -> (List.head wb).Range\n      Errors.Parser.unexpectedScopeEndInParenthesizedExpr rng |> Context.error ctx\n      makeBody wa\n            \n\n/// Parse expression consisting of multiple terms & operators\nand parseExpression terms ctx = \n  match terms, parseTerm ctx with\n  | terms, Some term -> \n      match Context.tokenIndent ctx with\n      // Followed by operator and more expressions\n      | Some(white, ({ Token = TokenKind.Equals } as t)) ->\n          Context.next ctx\n          parseExpression ((term, whiteBefore white (node t.Range Operator.Equals))::terms) ctx\n      | Some(white, ({ Token = TokenKind.Operator op } as t)) ->\n          Context.next ctx\n          parseExpression ((term, whiteBefore white (node t.Range op))::terms) ctx\n      | Some(white, _) -> buildExpression terms term |> whiteAfter white |> Some  \n      | None -> buildExpression terms term |> Some\n          \n  // Not an expression, return None\n  | [], None -> None  \n\n  // Nothing after operator - ignore operator, but parse preceding terms\n  | (term, op)::terms, None -> \n      Errors.Parser.unexpectedEndAfterOperator op.Range (TokenKind.Operator op.Node) |> Context.error ctx\n      Some(buildExpression terms term)\n\n\n// ------------------------------------------------------------------------------------------------\n// The parser - commands\n// ------------------------------------------------------------------------------------------------\n\n/// Parse expression, skipping all tokens that cannot be parsed\nlet rec parseLetBindingBody lastRng ctx = \n  match parseExpression [] ctx with\n  | Some body -> body\n  | None ->\n      match Context.tokenIndent ctx with\n      | None ->     \n          Errors.Parser.unexpectedScopeEndInLet lastRng |> Context.error ctx\n          node lastRng Expr.Empty\n      | Some(white, t) ->\n          Errors.Parser.unexpectedTokenInLetBinding t.Range t.Token |> Context.error ctx\n          Context.silent ctx (fun ctx -> parseLetBindingBody t.Range ctx)\n\n\n/// Skip all remaining nested tokens after a command\nlet rec skipNestedTokens firstTok white ctx = \n  match Context.tokenIndent ctx with \n  | None -> firstTok, white\n  | Some(whiteBefore, t & { Token = TokenKind.EndOfFile }) ->\n      (if firstTok = None then Some t else firstTok), white @ whiteBefore\n  | Some(whiteBefore, t) ->\n      Context.next ctx\n      let firstTok = if firstTok = None then Some t else firstTok\n      skipNestedTokens firstTok (white @ whiteBefore @ [t]) ctx\n      \n\n/// Parse the rest of the let binding after `let`, handling all sorts of errors\n/// This returns parsed command together with all nested expressions after the command\n/// (those should not be nested, but we accept them anyway & report error)\nlet parseLetBinding whiteBeforeLet rngLet ctx = \n  match Context.tokenIndent ctx with\n  | Some(Identifier id) ->\n      Context.next ctx\n      match Context.tokenIndent ctx with\n      | Some (whiteAfterId, { Token = TokenKind.Equals; Range = rngEq }) ->\n          Context.next ctx\n          let body = parseLetBindingBody rngEq ctx                \n          Command.Let(whiteAfter whiteAfterId id, body)\n          |> node (unionRanges rngLet body.Range) \n          |> whiteBefore whiteBeforeLet\n\n      | Some(whiteAfterId, t) -> \n          // RECOVERY: Unexpected token after ident - try to parse the body anyway\n          Errors.Parser.unexpectedTokenInLetBinding t.Range t.Token |> Context.error ctx\n          let body = parseLetBindingBody t.Range ctx\n          Command.Let(whiteAfter whiteAfterId id, body)\n          |> node (unionRanges rngLet id.Range) \n          |> whiteBefore whiteBeforeLet\n\n      | None ->\n          // RECOVERY: End of block after ident - return binding with empty expression\n          Errors.Parser.missingBodyInLetBinding id.Range |> Context.error ctx\n          let body = node { Start = id.Range.End; End = id.Range.End } Expr.Empty\n          Command.Let(id, body)\n          |> node (unionRanges rngLet id.Range) \n          |> whiteBefore whiteBeforeLet\n          \n  | Some(whiteAfterLet, t) ->\n      // RECOVERY: Unexpected token after let - try to parse body as expression & assume emtpy identifier\n      Errors.Parser.unexpectedTokenInLetBinding t.Range t.Token |> Context.error ctx\n      let letEndRng = { Start = rngLet.End; End = rngLet.End }\n      let body = \n        match parseExpression [] ctx with \n        | Some e -> e\n        | None -> \n            let firstSkipped, white = skipNestedTokens None [] ctx\n            let skipRng = t::white |> List.map (fun t -> t.Range) |> List.reduce unionRanges\n            node skipRng Expr.Empty |> whiteAfter (t::white)\n      Command.Let(whiteBefore whiteAfterLet (node letEndRng { Name = \"\" } ), body)\n      |> node (unionRanges rngLet body.Range) \n      |> whiteBefore whiteBeforeLet\n      \n  | None ->\n      // RECOVERY: Missing body - return let binding with empty expression and empty identifier\n      Errors.Parser.missingBodyInLetBinding rngLet |> Context.error ctx\n      let rng = { Start = rngLet.End; End = rngLet.End }\n      Command.Let(node rng { Name = \"\" }, node rng Expr.Empty)\n      |> node rng |> whiteBefore whiteBeforeLet\n\n\n/// A command is either top-level expression or let binding\nlet rec parseCommands acc ctx = \n  match Context.tokenNonIndent ctx with\n  | Some(white, { Token = TokenKind.EndOfFile }) ->\n      // Return commands & store the whitespace\n      match acc with \n      | x::xs -> List.rev ({ x with WhiteAfter = white }::xs)\n      | [] -> []\n    \n  | Some(whiteBeforeLet, tok & { Token = TokenKind.Let; Range = rngLet }) ->\n      Context.next ctx\n      let cmd = parseLetBinding whiteBeforeLet rngLet ctx \n      parseCommands (cmd::acc) ctx\n\n  | Some(white, t) -> \n      // Treat command as top-level expression\n      match parseExpression [] ctx with\n      | Some expr -> \n          let cmd = node expr.Range (Command.Expr(expr)) |> whiteBefore white\n          parseCommands (cmd::acc) ctx\n      | None -> \n          // RECOVERY: Not an expression, just skip over the whole thing\n          let _, white = skipNestedTokens None [] ctx\n          Errors.Parser.unexpectedNestedTokenInCommand t.Range t.Token |> Context.error ctx\n          let skipRng = t::white |> List.map (fun t -> t.Range) |> List.reduce unionRanges\n          let cmd = node skipRng (Command.Expr(node skipRng Expr.Empty)) |> whiteAfter (t::white)\n          parseCommands (cmd::acc) ctx\n\n  | None ->\n      // RECOVERY: Skip over all subsequent nested tokens\n      let firstSkipped, white = skipNestedTokens None [] ctx\n      let firstSkipped = firstSkipped.Value\n      Errors.Parser.unexpectedNestedTokenInCommand firstSkipped.Range firstSkipped.Token |> Context.error ctx\n      let skipRng = firstSkipped::white |> List.map (fun t -> t.Range) |> List.reduce unionRanges\n      let cmd = node skipRng (Command.Expr(node skipRng Expr.Empty)) |> whiteAfter white\n      parseCommands (cmd::acc) ctx\n\n\n// ------------------------------------------------------------------------------------------------\n// User friendly entry point\n// ------------------------------------------------------------------------------------------------\n\nlet parseProgram (input:string) = \n  try\n    let tokens, errors = Tokenizer.tokenize input\n    let ctx = \n      { Tokens = tokens; Position = 0; SilentMode = false\n        Errors = ResizeArray<_>(); Whitespace = ResizeArray<_>() }\n    let cmds = parseCommands [] ctx\n    let errors = Array.append errors (ctx.Errors.ToArray())\n    let rng = cmds |> List.fold (fun rng cmd -> unionRanges rng cmd.Range) { Start = 0; End = 0 }\n    { Body = node rng cmds }, errors\n  with e ->\n    Log.exn(\"parsing\", \"Exception while parsing program: %O\", e)\n    let rng = { Start=0; End=0 }\n    let error = Errors.Parser.exceptionWhileParsing rng (e.ToString())\n    { Body = node rng [] }, [| error |]\n","﻿// ------------------------------------------------------------------------------------------------\n// Type checker sets the Type properties of the Entities created by the Binder\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.TypeChecker\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Types\nopen TheGamma.Common\nopen System.Collections.Generic\n\n// ------------------------------------------------------------------------------------------------\n// Type checking \n// ------------------------------------------------------------------------------------------------\n\ntype CheckingContext = \n  { Errors : ResizeArray<Error<Range>> \n    Globals : IDictionary<string, Entity> \n    Ranges : IDictionary<Symbol, Range>\n    Evaluate : Entity -> EntityValue option }\n\nlet addError ctx ent err = \n  ctx.Errors.Add(err ctx.Ranges.[ent.Symbol])\n\n/// Given a list of types, find the most frequent type (using Type.Any as the last resort)\nlet inferListType typs = \n  typs \n  |> List.filter (function Type.Any -> false | _ -> true)\n  |> List.groupWith typesEqual\n  |> List.map (fun g -> List.head g, List.length g)\n  |> List.append [Type.Any, 0]\n  |> List.maxBy snd\n  |> fst\n\n/// Resolve type of parameter - parSpec can be Choice1Of2 with \n/// parameter name or Choice2Of2 with parameter index.\nlet resolveParameterType instTy parSpec = \n  match instTy with\n  | Type.Method(args, _) -> \n      let par = \n        match parSpec with\n        | Choice1Of2 name -> args |> Seq.tryFind (fun ma -> ma.Name = name)\n        | Choice2Of2 idx -> args |> Seq.tryItem idx  \n      match par with\n      | Some ma -> ma.Type\n      | _ -> failwith \"resolveParameterType: Parameter specification was incorrect\"\n  | _ -> failwith \"resolveParameterType: Instance is not an object\"\n\n/// Check method call - methodName is for logging only; parameterTypes and resultTypeFunc\n/// are the type information from `Type.Method` of the parent; `argList` and `args` are the\n/// actual type-checked arguments (argList is for storing errors only)\nlet rec checkMethodCallAsync (methodName:string) ctx (parameterTypes:MethodArgument list) \n    (resultTypeFunc:((Type * RuntimeValue option) list -> Type option)) argList args = async {\n\n  // Split arguments into position & name based and report \n  // error if there is non-named argument after named argument\n  let positionBased, nameBased = \n    let pb = args |> List.takeWhile (function { Kind = EntityKind.NamedParam _ } -> false | _ -> true)  \n    let nb = args |> List.skipWhile (function { Kind = EntityKind.NamedParam _ } -> false | _ -> true)  \n    pb |> Array.ofList,\n    nb |> List.choose (fun arg -> \n      match arg.Kind with\n      | EntityKind.NamedParam(name, value) -> Some(name.Name, value)\n      | _ ->\n          Errors.TypeChecker.nameBasedParamMustBeLast |> addError ctx arg\n          None ) |> Map.ofList\n\n  // Match actual arguments with the parameters and report\n  // error if non-optional parameter is missing an assignment\n  let matchedArguments = \n    parameterTypes |> List.mapi (fun index ma ->\n      let arg = \n        if index < positionBased.Length then Some(positionBased.[index]) \n        else Map.tryFind ma.Name nameBased \n      match arg with\n      | Some arg -> getType ctx arg, if ma.Static then Some arg else None\n      | None when ma.Optional -> ma.Type, None\n      | None ->\n          Errors.TypeChecker.parameterMissingValue ma.Name |> addError ctx argList\n          Type.Any, None)\n\n  // Evalaute arguments of static parameters\n  Log.trace(\"typechecker\", \"Evaluating arguments of type-level method '%s'\", methodName)\n  for e in matchedArguments |> Seq.choose snd do e.Value <- ctx.Evaluate e\n  Log.trace(\"typechecker\", \"Evaluated arguments of '%s': %O\", methodName, [| for e in Seq.choose snd matchedArguments -> e.Value |])\n  \n  let tcargs = matchedArguments |> List.map (function (t, Some e) -> t, Some(e.Value.Value.Value) | (t, _) -> t, None)\n  match resultTypeFunc tcargs with\n  | Some typ -> return typ\n  | None ->   \n      Log.trace(\"typechecker\", \"Invalid argument type when calling '%s'. Argument types: %O\", \n        methodName, (Array.ofList (List.map (fst >> Ast.formatType) matchedArguments)))\n      Errors.TypeChecker.parameterConflict |> addError ctx argList\n      return Type.Any }\n  \n\n/// Get type of an entity and record errors generated when type checking this entity\nand getType ctx (e:Entity) = \n  if e.Type.IsNone then \n    let errorCount = ctx.Errors.Count\n    e.Type <- Some (typeCheckEntity ctx e)\n    e.Errors <- [ for i in errorCount .. ctx.Errors.Count - 1 -> ctx.Errors.[i] ]\n  e.Type.Value\n\n/// Type check entity - assumes that all antecedents of the entity \n/// have been reduced to non-delayed type before\nand typeCheckEntity ctx (e:Entity) = \n  match e.Kind with\n\n  // Type check global value reference (from globals) and variable reference (from antecedent)\n  | EntityKind.GlobalValue(name, _) ->\n      if not (ctx.Globals.ContainsKey(name.Name)) then\n        Errors.TypeChecker.variableNotInScope name.Name |> addError ctx e\n        Type.Any\n      else\n        getType ctx ctx.Globals.[name.Name]\n\n  | EntityKind.Variable(_, inst) ->\n      getType ctx inst      \n\n  // Member access gets type of a given member, call assumes the called thing was a method\n  | EntityKind.Member(inst, nameEnt & { Kind = EntityKind.MemberName name }) ->\n      match getType ctx inst with \n      | Type.Any -> Type.Any\n      | Type.Object(FindMember name mem) -> \n          e.Meta <- mem.Metadata\n          mem.Type\n      | Type.Object obj ->\n          Errors.TypeChecker.memberMissing name.Name obj.Members |> addError ctx nameEnt\n          Type.Any\n      | typ ->\n          Errors.TypeChecker.notAnObject name.Name typ |> addError ctx inst\n          Type.Any\n\n  | EntityKind.MemberAccess(mem) ->\n      getType ctx mem     \n\n  | EntityKind.Member(inst, _) ->\n      Log.error(\"typechecker\", \"typeCheckEntity: Member access is missing member name!\")\n      failwith \"typeCheckEntity: Member access is missing member name!\"\n\n  | EntityKind.Call(inst, { Kind = EntityKind.ArgumentList(ents) }) ->\n      Log.error(\"typechecker\", \"typeCheckEntity: Call to %s has not been type-checked in typeCheckEntityAsync!\", (lastChainElement inst).Name)\n      failwithf \"typeCheckEntity: Call to %s has not been type-checked in typeCheckEntityAsync!\" (lastChainElement inst).Name\n\n  | EntityKind.Call(inst, _) ->\n      Log.error(\"typechecker\", \"typeCheckEntity: Call to %s is missing argument list!\", (lastChainElement inst).Name)\n      failwithf \"typeCheckEntity: Call to %s is missing argument list!\" (lastChainElement inst).Name\n\n  // Type of placeholder is the type of its body\n  | EntityKind.Placeholder(_, body) ->      \n      getType ctx body\n\n  // Operators and lists depend on the types of operands and elements...\n  | EntityKind.Operator(l, operator, r) ->      \n      let operandTypes = \n        ( match operator with\n          | Operator.Equals -> [PrimitiveType.Number; PrimitiveType.String; PrimitiveType.Date; PrimitiveType.Bool]\n          | Operator.Plus -> [PrimitiveType.Number; PrimitiveType.String]\n          | _ -> [PrimitiveType.Number] ) |> List.map Type.Primitive \n\n      [l; r] |> List.iteri (fun idx operand ->\n        let typ = getType ctx operand\n        if operandTypes |> List.forall (fun opt -> not (typesEqual typ opt)) then\n          Errors.TypeChecker.numericOperatorExpectsNumbers operator idx operandTypes typ |> addError ctx operand )\n      match operator with\n      | Operator.Equals | Operator.LessThan | Operator.GreaterThan \n      | Operator.LessThanOrEqual | Operator.GreaterThanOrEqual -> Type.Primitive PrimitiveType.Bool      \n      | _ -> getType ctx l\n\n  | EntityKind.List(elems) ->      \n      let typs = elems |> List.map (getType ctx)\n      let typ = inferListType typs \n      for a in elems do \n        let elty = getType ctx a\n        if not (typesEqual typ elty) then\n          Errors.TypeChecker.listElementTypeDoesNotMatch typ elty |> addError ctx a\n      Type.List(typ)\n\n  | EntityKind.Binding(name, { Kind = EntityKind.CallSite(inst, parSpec) }) ->\n      // Binding node is used to resolve type of a lambda function variable. \n      // Its antecedent is `EntityKind.CallSite` containing reference to the method around it - \n      // assuming lambda appears in something like: `foo(10, fun x -> ...)`\n      match resolveParameterType (getType ctx inst) parSpec with\n      | Type.Method([ma], _) -> ma.Type\n      | _ -> failwith \"typeCheckEntity: Expected parameter of function type\"\n\n  | EntityKind.Binding(name, _) ->\n      failwithf \"typeCheckEntity: Variable binding %s is missing call site!\" name.Name\n\n  | EntityKind.Function(var, body) ->\n      let resTyp = getType ctx body\n      Type.Method([ { MethodArgument.Name = \"\"; Optional = false; Static = false; Type = getType ctx var }], fun _ -> Some resTyp)\n\n  // Entities with primitive types\n  | EntityKind.Constant(Constant.Number _) -> Type.Primitive(PrimitiveType.Number)\n  | EntityKind.Constant(Constant.String _) -> Type.Primitive(PrimitiveType.String)\n  | EntityKind.Constant(Constant.Boolean _) -> Type.Primitive(PrimitiveType.Bool)\n  | EntityKind.Constant(Constant.Empty) -> Type.Any\n\n  // Entities that do not have a real type\n  | EntityKind.Root -> Type.Any\n  | EntityKind.LetCommand _ -> Type.Any\n  | EntityKind.RunCommand _ -> Type.Any\n  | EntityKind.ArgumentList _ -> Type.Any\n  | EntityKind.NamedParam _ -> Type.Any\n  | EntityKind.CallSite _ -> Type.Any\n  | EntityKind.Program _ -> Type.Any\n  | EntityKind.MemberName _ -> Type.Any\n\n\n/// Perform type applications & evaluate delayed types\nlet rec evaluateDelayedType topLevel (t:Type) = async {\n  match t with\n  | Type.Delayed(f) ->\n      let! t = Async.AwaitFuture f\n      return! evaluateDelayedType topLevel t\n  | t -> return t }\n\n\n/// Type check entity & return its type. This first recursively processes\n/// all antecedants to make sure that no antecedant is delayed  \n/// (this way, `getType` can be ordinary synchronouus function)\nlet typeCheckEntityAsync ctx (e:Entity) = async {\n  let visited = Dictionary<Symbol, bool>()\n\n  let rec loop e = async {\n    let isGlobal = match e.Kind with EntityKind.GlobalValue _ -> true | _ -> false\n    if not (visited.ContainsKey(e.Symbol)) && (isGlobal || e.Type.IsNone) then\n      visited.[e.Symbol] <- true\n      for a in e.Antecedents do\n        do! loop a  \n\n      match e.Kind with\n      | EntityKind.Call(inst, { Kind = EntityKind.ArgumentList(ents) } & arglist) ->\n          let errorCount = ctx.Errors.Count\n          let! typ = \n            match getType ctx inst with \n            | Type.Any -> async.Return Type.Any\n            | Type.Method(parameterTypes, resultTypeFunc) ->  \n                checkMethodCallAsync inst.Name ctx parameterTypes resultTypeFunc arglist ents\n            | typ ->\n                let lastName = lastChainElement inst\n                Errors.TypeChecker.notAnMethod lastName.Name typ |> addError ctx inst\n                async.Return Type.Any\n          e.Type <- Some typ\n          e.Errors <- [ for i in errorCount .. ctx.Errors.Count - 1 -> ctx.Errors.[i] ]\n      | _ -> ()\n\n      let! t = evaluateDelayedType true (getType ctx e)\n      Log.trace(\"typechecker\", \"Type of entity '%s' (%s) is: %s\", e.Name, formatEntityKind e.Kind, formatType t)\n      e.Type <- Some t }\n\n  do! loop e\n  return getType ctx e }\n\n\n// ------------------------------------------------------------------------------------------------\n// User friendly entry point\n// ------------------------------------------------------------------------------------------------\n\nlet collectTypeErrors (entity:Entity) = \n  let errors = ResizeArray<_>()\n  let visited = Dictionary<Symbol, bool>()\n  let rec loop e = \n    if not (visited.ContainsKey e.Symbol) then\n      visited.[e.Symbol] <- true\n      for e in e.Antecedents do loop e\n      errors.AddRange(e.Errors)\n  loop entity\n  errors.ToArray()\n\nlet typeCheckProgram (globals:Entity list) (bound:Binder.BindingResult) evaluate prog = async {\n  Log.trace(\"typechecker\", \"Type checking program\")\n  try\n    let rangeLookup = dict [ for r, e in bound.Entities -> e.Symbol, r ]\n    let vars = dict [ for e in globals -> e.Name, e ]\n    let ctx = { Globals = vars; Errors = ResizeArray<_>(); Ranges = rangeLookup; Evaluate = evaluate }\n    let! _ = typeCheckEntityAsync ctx prog \n    Log.trace(\"typechecker\", \"Completed type checking\")\n  with e ->\n    Log.exn(\"typechecker\", \"Type checking program failed: %O\", e) }","﻿namespace TheGamma\n\n/// Represents range in 1-based line / 1-based column format\ntype LineColumnRange =\n  { StartLineNumber : int\n    StartColumn : int\n    EndLineNumber : int\n    EndColumn : int }\n\ntype LocationMapper(code:string) = \n  // ResizeArray is workaround for \"TypeError: TypedArray.from requires its this argument subclass a TypedArray constructor\" in Safari\n  let lengths = ResizeArray<_>(code.Split('\\n') |> Seq.map (fun s -> s.Length)) \n\n  /// Convert absolute 0-based location to 1-based line and 1-based column location\n  member x.AbsoluteToLineCol(offs) = \n    let mutable line = 0\n    let mutable col = 0\n    let mutable offs = offs\n    while line <= lengths.Count && offs > lengths.[line] do\n      offs <- offs - lengths.[line] - 1\n      line <- line + 1\n    line + 1, offs + 1\n\n  /// Convert 1-based line and 1-based column location to an absolute 0-based location\n  member x.LineColToAbsolute(line, col) = \n    let mutable offs = 0\n    for l in 1 .. line-1 do offs <- offs + lengths.[l-1] + 1\n    offs + col - 1\n\n","﻿// ------------------------------------------------------------------------------------------------\n// Shared components for creating live previews\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Live.Common\n\nopen TheGamma\nopen Fable.Import\n\ntype CustomLiveState = interface end\ntype CustomLiveEvent = interface end\ntype LiveEditorZone = { Line:int; Preview:Html.DomNode }\n\ntype LivePreview<'TState, 'TEvent> =\n  { ID : string\n    Update : (LiveEvent<'TEvent> -> unit) -> LiveState<'TState> -> LiveEvent<'TEvent> -> LiveState<'TState> option\n    Render : (LiveEvent<'TEvent> -> unit) -> LiveState<'TState> -> LiveEditorZone option\n    InitialState : 'TState }\n\nand LiveState<'T> =\n  { // Initialized once - global values\n    Globals : seq<Entity>\n    // Updated when code changes - parsed program\n    Code : string\n    Program : Program\n    Mapper : LocationMapper\n    // Updated when cursor moves \n    Location : int\n    // Instructing the event loop to do things to the editor  \n    Selection : option<LineColumnRange>\n    \n    State : 'T\n    CurrentPreview : option<LivePreview<CustomLiveState, CustomLiveEvent>> }\n\nand LiveEvent<'T> =\n  | InitializeGlobals of seq<Entity>\n  | UpdateSource of string * int * Program * LocationMapper\n  | UpdateLocation of int\n  | CustomEvent of 'T\n\nlet updateLiveState state event = \n  match event with\n  | InitializeGlobals(globals) ->\n      { state with Globals = globals }\n  | UpdateLocation(loc) ->\n      { state with Location = loc }\n  | UpdateSource(code, loc, program, mapper) ->\n      { state with Location = loc; Program = program; Code = code; Mapper = mapper }\n  | CustomEvent _ -> state\n\n// ------------------------------------------------------------------------------------------------\n// Generally usefl functions for previews\n// ------------------------------------------------------------------------------------------------\n\nopen TheGamma.Ast\n\n/// Represents a chain such as `foo.bar(1).goo`, potentially \n/// inside a command (that may contain things like `let` etc.)\ntype NestedChain = \n  { // List containing Expr.Member, Expr.Call and Expr.Variable nodes \n    // from a call chain with their starting offset\n    Chain : (int * Node<Expr>) list }\n\nlet rec collectChain acc node =\n  match node.Node with\n  | Expr.Call(e, a) -> collectChain ((a.Range.Start, node)::acc) e\n  | Expr.Member(e, n) -> collectChain ((n.Range.Start, node)::acc) e\n  | Expr.Variable(n) -> Some((n.Range.Start, node)::acc)\n  | _ -> None\n\nlet rec collectFirstChain expr = \n  match collectChain [] expr with\n  | Some((_::_) as chain) -> Some { Chain = chain }\n  | _ ->\n  match expr with\n  | { Node = ExprNode(es, ns) } -> es |> Seq.tryPick collectFirstChain\n  | _ -> None\n","﻿module TheGamma.Services\n\nopen Fable.Import\nopen TheGamma.Html\nopen TheGamma.Common\nopen TheGamma.Ast\n\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n// ------------------------------------------------------------------------------------------------\n// Type checker\n// ------------------------------------------------------------------------------------------------\n\ntype CheckingMessage = \n  | TypeCheck of code:string * AsyncReplyChannel<bool * Binder.BindingResult * Program>\n  | IsWellTyped of code:string * AsyncReplyChannel<bool>\n\ntype Position = { Line:int; Column:int }\ntype LineRange = { Start:Position; End:Position }\n\nlet rec offsetToLocation lines offs lengths =\n  match lengths with\n  | l::lengths when offs <= l -> { Line = lines; Column = offs }\n  | l::lengths -> offsetToLocation (lines+1) (offs-l-1) lengths\n  | [] -> { Line = lines; Column = offs  } // error? out of range\n\nlet rangeToLoc lengths (rng:Range) = \n  { Start = offsetToLocation 1 rng.Start lengths\n    End = offsetToLocation 1 rng.Start lengths }\n\ntype CheckingService(article, globals:Future<Entity list>) =\n  let errorsReported = Control.Event<_>()\n  let emptyProg = { Body = Ast.node { Start = 0; End = 0 } [] }\n  let bindingContext =  \n    async { \n      let! globals = globals |> Async.AwaitFuture\n      return Binder.createContext globals article } |> Async.StartAsFuture\n\n  let errorsToLineCol (code:string) errors = \n    let lengths = code.Split('\\n') |> Array.toList |> List.map (fun l -> l.Length)\n    errors |> Array.map (fun e -> \n      { Number = e.Number; Message = e.Message; Range = rangeToLoc lengths e.Range })\n\n  let typeCheck code = async {\n    let! globals = Async.AwaitFuture globals\n    Log.trace(\"service\", \"Evaluated globals\")\n    for g in globals do Log.trace(\"service\", \"Global value '%s' : %O = %O\", g.Name, Option.map formatType g.Type, g.Value)\n    try\n      let progSyntax, parseErrors = Parser.parseProgram code\n      let! bindingContext = bindingContext |> Async.AwaitFuture\n      let progEntity, boundEntities = Binder.bindProgram bindingContext progSyntax\n      do! TypeChecker.typeCheckProgram globals boundEntities (Interpreter.evaluate globals) progEntity\n      let typeErrors = TypeChecker.collectTypeErrors progEntity\n      Log.trace(\"service\", \"Type checking completed\")\n      let errors = errorsToLineCol code (Array.append parseErrors typeErrors)\n      return Some(progSyntax, boundEntities, errors)\n    with e ->\n      Log.exn(\"service\", \"Type checking failed: %O\", e)\n      return None }\n\n  let agent = MailboxProcessor.Start(fun inbox ->\n    let rec loop lastCode lastResult = async {\n      let! msg = inbox.Receive()\n      match msg with\n      | IsWellTyped(code, repl) ->\n          let! tc = typeCheck code\n          match tc with \n          | Some(_, _, errs) when errs.Length = 0 -> repl.Reply(true)\n          | _ -> repl.Reply(false)\n          return! loop lastCode lastResult\n\n      | TypeCheck(code, repl) when code = lastCode ->\n          Log.trace(\"service\", \"Returning previous result\")\n          repl.Reply(lastResult)\n          return! loop lastCode lastResult\n\n      | TypeCheck(code, repl) ->\n          Log.trace(\"service\", \"Type checking source code\")\n          let! tc = typeCheck code\n          match tc with \n          | Some(prog, ents, errors) ->\n              errorsReported.Trigger(code, errors)            \n              let result = (errors.Length = 0, ents, prog)\n              repl.Reply(result)\n              return! loop code result\n          | None -> \n              repl.Reply((false, Binder.BindingResult [||], emptyProg))\n              return! loop lastCode lastResult }\n    \n    loop \"\" (false, Binder.BindingResult [||], emptyProg))\n\n  member x.ErrorsReported = errorsReported.Publish\n  member x.TypeCheck(code) = agent.PostAndAsyncReply(fun ch -> TypeCheck(code, ch))\n  member x.IsWellTyped(code) = agent.PostAndAsyncReply(fun ch -> IsWellTyped(code, ch))\n\n\n// ------------------------------------------------------------------------------------------------\n// Live previews\n// ------------------------------------------------------------------------------------------------\n\nopen Fable.Core\nopen Fable.Helpers\nopen Fable.Import.Browser\nopen TheGamma.Live.Common\n\ntype PreviewService(checker:CheckingService, globals:Future<list<Entity>>, ed:monaco.editor.ICodeEditor, livePreviews) =\n\n  let zoneSizeChanged = new Event<unit>()\n  let mutable currentZone : option<float * monaco.editor.IViewZone> = None\n  let mutable zoneHeight = 0.0\n  let mutable tree = JsInterop.createObj []\n  let mutable container = document.createElement(\"div\") :> Node\n\n  let removeZone () =\n    match currentZone with \n    | Some(id, _) -> ed.changeViewZones(fun accessor -> accessor.removeZone(id))\n    | None -> ()\n    currentZone <- None\n    zoneSizeChanged.Trigger()\n  \n  let createAndAddZone endLine =\n    let mutable zoneId = -1.\n    let zone = JsInterop.createEmpty<monaco.editor.IViewZone>\n    \n    let node = document.createElement_div()\n    node.style.width <- \"1000px\"\n    node.style.height <- \"1000px\"\n    container <- document.createElement_div() :> Node    \n    tree <- JsInterop.createObj []    \n    node.appendChild(container) |> ignore\n    ed.changeViewZones(fun accessor ->  \n      match currentZone with Some(id, _) -> accessor.removeZone(id) | _ -> ()\n      zone.afterLineNumber <- endLine\n      zone.heightInPx <- Some 1.0\n      zone.domNode <- node\n      zoneHeight <- 1.0\n      zoneId <- accessor.addZone(zone) \n      currentZone <- Some (zoneId, zone) )\n\n  let updateZones trigger liveState =\n    let dom = \n      liveState.CurrentPreview |> FsOption.bind (fun p ->\n        p.Render trigger liveState )\n    match dom with \n    | None -> removeZone ()\n    | Some prev ->\n        if currentZone.IsNone then createAndAddZone (float prev.Line)\n        let id, zone = currentZone.Value\n        let newTree = prev.Preview |> renderVirtual \n        let patches = Virtualdom.diff tree newTree\n        container <- Virtualdom.patch container patches\n        tree <- newTree\n\n        let rec waitForActualHeight n = async {\n          let newHeight = (container :?> HTMLElement).clientHeight\n          if n = 10 || newHeight <> 0.0 then return newHeight\n          else \n            do! Async.Sleep (n*n)\n            return! waitForActualHeight (n+1) }\n\n        async {\n          let! newHeight = waitForActualHeight 1\n          Log.trace(\"live\", \"Old height: %s, New height: %s\", zoneHeight, newHeight)\n          if zoneHeight <> newHeight || zone.afterLineNumber <> float prev.Line then\n            zone.afterLineNumber <-   float prev.Line\n            zone.heightInPx <- Some newHeight\n            zoneHeight <- newHeight\n            ed.changeViewZones(fun accessor -> accessor.layoutZone(id))\n            zoneSizeChanged.Trigger() } |> Async.StartImmediate\n\n  let mutable lastCode = \"\"\n  let mutable lastMapper = LocationMapper(\"\")\n  let mutable changingEditor = false\n\n  let getUpdateEventAfterChange () = async {\n    let code = ed.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\n    let position = ed.getPosition()\n    if code <> lastCode then\n      lastCode <- code\n      lastMapper <- LocationMapper(code)\n      let loc = lastMapper.LineColToAbsolute(int position.lineNumber, int position.column)\n      let! _, _, program = checker.TypeCheck(code)\n      return (UpdateSource(code, loc, program, lastMapper)) \n    else \n      let loc = lastMapper.LineColToAbsolute(int position.lineNumber, int position.column)\n      return (UpdateLocation(loc)) }\n\n  let createLivePreview (ed:monaco.editor.ICodeEditor) = \n    let liveEvent = new Event<LiveEvent<CustomLiveEvent>>()\n    let noState = { new CustomLiveState }\n    let mutable liveState = \n      { Mapper = LocationMapper(\"\")\n        Location = 0\n        Program = { Body = Ast.node { Start = 0; End = 0 } [] }\n        Globals = []\n        Code = \"\"\n        Selection = None\n        State = noState\n        CurrentPreview = None }\n\n    let applyEvent evt =\n      let liveState = updateLiveState liveState evt        \n      let newState =\n        match liveState.CurrentPreview with \n        | Some(prev) -> prev.Update liveEvent.Trigger liveState evt\n        | None -> None\n\n      let newPreview = \n        match evt with\n        | UpdateSource _ | UpdateLocation _ ->\n            Log.trace(\"live\", \"Searching for available previews\")\n            let state = livePreviews |> Seq.tryPick (fun lp ->\n              let state = { liveState with CurrentPreview = Some lp; State = lp.InitialState }\n              lp.Update liveEvent.Trigger state evt)\n            state\n        | _ -> None\n      \n      match newState, newPreview with\n      | Some (st & { CurrentPreview = Some p1 }), Some (pr & { CurrentPreview = Some p2 }) \n          when p1.ID <> p2.ID -> pr\n      | Some st, _ -> st\n      | _, Some pr -> pr\n      | _ -> { liveState with CurrentPreview = None; State = noState }\n\n    liveEvent.Publish.Add(fun evt ->\n      try\n        Log.trace(\"live\", \"Updating state %O with event %O\", liveState, evt)\n        let oldState = liveState \n        liveState <- applyEvent evt\n\n        if (match evt with UpdateSource _ -> false | _ -> true) && (oldState.Code <> liveState.Code) then\n          changingEditor <- true\n          ed.getModel().setValue(liveState.Code)\n        match liveState.Selection with\n        | Some rng ->\n            changingEditor <- true\n            let mrng = JsInterop.createEmpty<monaco.IRange>\n            mrng.startColumn <- float rng.StartColumn\n            mrng.startLineNumber <- float rng.StartLineNumber\n            mrng.endColumn <- float rng.EndColumn\n            mrng.endLineNumber <- float rng.EndLineNumber\n            ed.setSelection(mrng)\n            liveState <- { liveState with Selection = None }\n        | _ -> ()\n\n        if changingEditor = true then\n          changingEditor <- false\n          async { \n            Log.trace(\"live\", \"Editor changed. Getting after change event...\")\n            let! evt = getUpdateEventAfterChange ()\n            Log.trace(\"live\", \"Editor changed. Updating state %O with event %O\", liveState, evt)\n            liveState <- applyEvent evt\n            Log.trace(\"live\", \"Editor changed. New state %O\", liveState)\n            updateZones liveEvent.Trigger liveState } |> Async.StartImmediate\n        else\n          updateZones liveEvent.Trigger liveState\n      with e ->\n        Log.exn(\"live\", \"Error when updating state %O with event %O: %O\", liveState, evt, e) )\n\n    async { let! glob = globals |> Async.AwaitFuture \n            liveEvent.Trigger(InitializeGlobals glob) } |> Async.StartImmediate\n\n    liveEvent.Trigger\n\n  let trigger = createLivePreview ed    \n      \n  do\n    ed.onDidChangeCursorPosition(fun ce -> \n      if not changingEditor then\n        let code = ed.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\n        Log.trace(\"live\", \"Cursor position changed: code <> lastCode = %s\", code <> lastCode)\n        async { let! evt = getUpdateEventAfterChange ()\n                trigger evt } |> Async.StartImmediate ) |> ignore\n\n  member x.ZoneSizeChanged = \n    zoneSizeChanged.Publish\n\n  member x.ZoneHeight = \n    if currentZone <> None then zoneHeight \n    else 0.0","﻿// ------------------------------------------------------------------------------------------------\n// Code generator is used to compile complete well-typed programs\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.CodeGenerator\n\nopen TheGamma\nopen TheGamma.Babel\nopen TheGamma.Babel.BabelOperators\nopen TheGamma.Common\n\n// ------------------------------------------------------------------------------------------------\n// Compiling code to Babel AST\n// ------------------------------------------------------------------------------------------------\n\ntype CompilationContext =\n  { LineLengths : int list\n    Globals : Map<string, Expression> }\n\nlet rec offsetToLocation lines offs lengths =\n  match lengths with\n  | l::lengths when offs <= l -> { line = lines; column = offs }\n  | l::lengths -> offsetToLocation (lines+1) (offs-l-1) lengths\n  | [] -> failwith \"offsetToLocation: Out of range\"\n\nlet rangeToLoc ctx rng = \n  { start = offsetToLocation 1 rng.Start ctx.LineLengths \n    ``end`` = offsetToLocation 1 rng.Start ctx.LineLengths } |> Some\n\nlet rec getMember name typ = \n  match typ with\n  | Type.Object(o) -> \n      match o.Members |> Seq.tryPick (fun m -> if m.Name = name then Some(m) else None) with\n      | Some res -> res\n      | _ ->\n        Log.exn(\"codegen\", \"getMember: Member %s not found in object %O\", name, o)\n        failwith \"getMember: Member not found\" \n  | t -> \n    Log.exn(\"codegen\", \"getMember: Not an object %O\", t)\n    failwith \"getMember: Not an object\" \n\nlet rec compileExpression ctx (expr:Node<Expr>) = \n  Log.trace(\"codegen\", \"Compiling expression: %O\", expr)\n  match expr.Node with \n  // Binary operators map to BinaryExpression, except for pow, which is a JS function\n  | Expr.Binary(l, { Node = Operator.Power }, r) ->\n      let l = compileExpression ctx l\n      let r = compileExpression ctx r\n      let rng = rangeToLoc ctx expr.Range\n      let pow = ident(\"Math\")?pow\n      CallExpression(pow, [l; r], rangeToLoc ctx expr.Range)\n\n  | Expr.Binary(l, op, r) ->\n      let l = compileExpression ctx l\n      let r = compileExpression ctx r\n      let op = \n        match op.Node with\n        | Operator.Modulo -> BinaryModulus\n        | Operator.Equals -> BinaryEqualStrict\n        | Operator.Plus -> BinaryPlus\n        | Operator.Minus -> BinaryMinus\n        | Operator.Multiply -> BinaryMultiply\n        | Operator.Divide -> BinaryDivide\n        | Operator.GreaterThan -> BinaryGreater\n        | Operator.LessThan -> BinaryLess\n        | Operator.GreaterThanOrEqual -> BinaryGreaterOrEqual\n        | Operator.LessThanOrEqual -> BinaryLessOrEqual\n        | Operator.Power -> failwith \"compileExpression: Power is not a binary operator\"\n      BinaryExpression(op, l, r, rangeToLoc ctx expr.Range)\n      \n  // Handle member access and calls - method call is a combination of the two\n  | Expr.Member(inst, { Node = Expr.Placeholder(_, { Node = Expr.Variable n }) })\n  | Expr.Member(inst, { Node = Expr.Variable n }) ->\n      let mem = getMember n.Node.Name inst.Entity.Value.Type.Value\n      let inst = compileExpression ctx inst\n      mem.Emitter.Emit(inst)\n\n  | Expr.Member(inst, _) ->\n      failwith \"compileExpression: Member in member access is not a variable\"\n\n  | Expr.Call(inst, args) ->\n      // Split arguments between position & name based\n      let compiledArgs = args.Node |> List.map (fun a -> a.Name, compileExpression ctx a.Value)\n      let positionArgs = compiledArgs |> Seq.takeWhile (fun (n, _) -> n.IsNone) |> Seq.map snd |> Array.ofSeq\n      let namedArgs = compiledArgs |> Seq.choose (function (Some n, a) -> Some(n.Node.Name, a) | _ -> None) |> dict\n\n      // Get expected arguments from the method type\n      let expectedArgs = \n        match inst.Entity.Value.Type.Value with\n        | Type.Method(args, resTy) -> args\n        | _ -> []\n\n      // Compile the instance, the arguments and call the emitter\n      let inst = compileExpression ctx inst\n      let pars = expectedArgs |> List.mapi (fun i ma ->\n        if i < positionArgs.Length then positionArgs.[i]\n        elif namedArgs.ContainsKey ma.Name then namedArgs.[ma.Name]\n        else NullLiteral(rangeToLoc ctx args.Range))\n      CallExpression(inst, pars, rangeToLoc ctx expr.Range)\n\n  // Variables and literals are easy       \n  | Expr.Variable(n) when ctx.Globals.ContainsKey(n.Node.Name) ->\n      ctx.Globals.[n.Node.Name]\n  | Expr.Variable(n) ->\n      IdentifierExpression(n.Node.Name, rangeToLoc ctx n.Range) \n\n  | Expr.Number(n) ->\n      NumericLiteral(n, rangeToLoc ctx expr.Range)\n  | Expr.String(s) ->\n      StringLiteral(s, rangeToLoc ctx expr.Range)\n  | Expr.Boolean(b) ->\n      BooleanLiteral(b, rangeToLoc ctx expr.Range)\n\n  // Other constructs that map fairly directly to JS \n  | Expr.Placeholder(_, body) ->\n      compileExpression ctx body\n\n  | Expr.List(es) ->\n      let es = List.map (compileExpression ctx) es\n      ArrayExpression(es, rangeToLoc ctx expr.Range)\n\n  | Expr.Function(n, e) ->\n      let var = IdentifierExpression(n.Node.Name, rangeToLoc ctx n.Range)\n      let ce = compileExpression { ctx with Globals = Map.add n.Node.Name var ctx.Globals } e\n      let body = BlockStatement([ReturnStatement(ce, rangeToLoc ctx e.Range)], rangeToLoc ctx e.Range)\n      FunctionExpression(None, [IdentifierPattern(n.Node.Name, rangeToLoc ctx n.Range)], body, false, false, rangeToLoc ctx expr.Range)\n\n  // Empty expressions should not happen...\n  | Expr.Empty ->      \n      Log.error(\"codegen\", \"getEmitterAndParams: Empty expression in the AST\")\n      NullLiteral(rangeToLoc ctx expr.Range)\n    \n\nlet compileCommand ctx idx (cmd:Node<Command>) = \n  let loc = rangeToLoc ctx cmd.Range\n  let statements, idx, assign = \n    match cmd.Node with\n    | Command.Let(n, e) ->\n        let e = compileExpression ctx e\n        let name = IdentifierPattern(n.Node.Name, rangeToLoc ctx n.Range)\n        let decl = VariableDeclarator(name, Some e, loc)\n        [ VariableDeclaration(Var, [decl], rangeToLoc ctx cmd.Range) ], \n        str(n.Node.Name), ident(n.Node.Name)\n\n    | Command.Expr(e) ->\n        [], num(float idx), compileExpression ctx e\n\n  let res = MemberExpression(ident(\"_results\"), idx, true, loc)\n  statements @ [ ExpressionStatement(AssignmentExpression(AssignEqual, res, assign, loc), loc) ] \n\nlet compileProgram ctx (prog:TheGamma.Program) = \n  let decl = VariableDeclarator(IdentifierPattern(\"_results\", None), Some (ArrayExpression([], None)), None)\n  let res = VariableDeclaration(Var, [decl], None)\n  let body = List.mapi (compileCommand ctx) prog.Body.Node |> List.concat\n\n  let ret = ReturnStatement(ident(\"_results\"), None)\n  let body = BlockStatement(res :: body @ [ ret ], None)\n  let body = CallExpression(FunctionExpression(None, [], body, false, false, None), [], None)\n  { location = rangeToLoc ctx prog.Body.Range; body = [ ExpressionStatement(body, None) ] }\n\n// ------------------------------------------------------------------------------------------------\n// Cmpile program and return JS source code\n// ------------------------------------------------------------------------------------------------\n\nopen Fable.Helpers.Babel\n\nlet compile globals (text:string) prog = async {\n  try\n    let! globals = Async.AwaitFuture globals\n    let globals = \n      globals |> List.choose (function\n        | { Kind = EntityKind.GlobalValue(n, Some e) } -> Some(n.Name, e)\n        | _ -> None ) |> Map.ofSeq    \n    let ctx = { LineLengths = [ for l in text.Split('\\n') -> l.Length ]; Globals = globals }  \n    let res = compileProgram ctx prog\n    let code = babel.transformFromAst(Serializer.serializeProgram res, text, { presets = [| \"es2015\" |] })\n    Log.trace(\"codegen\", \"Evaluating: %O\", code)\n    return code.code\n\n  with e ->\n    Log.exn(\"codegen\", \"Evaluating code failed: %O\", e)\n    return \"\" }\n","﻿// ------------------------------------------------------------------------------------------------\n// Live preview for pivot type provider\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Live.Pivot\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Html\nopen TheGamma.Live.Common\nopen TheGamma.Common\nopen TheGamma.TypeChecker\nopen TheGamma.TypeProviders\n\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n[<Emit(\"$0.setCustomValidity($1)\")>]\nlet setCustomValidity (el:obj) (msg:string) : unit = failwith \"JS\"\n\n// ------------------------------------------------------------------------------------------------\n// Pivot editor: Helpers for working with entities\n// ------------------------------------------------------------------------------------------------\n\nlet pickPivotFields expr =\n  match expr.Entity with\n  | Some { Kind = EntityKind.MemberAccess { Kind = EntityKind.Member _; Meta = m } }\n  | Some { Kind = EntityKind.GlobalValue _; Meta = m } \n  | Some { Kind = EntityKind.Variable(_, { Meta = m }) } -> \n      match pickMetaByType \"http://schema.thegamma.net/pivot\" \"Fields\" m with\n      | Some m -> Some(unbox<TypeProviders.Pivot.Field list> m)\n      | _ -> None\n  | _ -> None\n\nlet pickPivotTransformations expr =\n  let tryPivotType = \n    match expr with\n    | { Entity = Some { Type = Some (Type.Object (:? TypeProviders.Pivot.PivotObject)) } } -> \n        Some [TypeProviders.Pivot.Transformation.Empty]\n    | _ -> None     \n  let tryTransform =\n    match expr with\n    | { Node = Expr.Call({ Entity = Some { Kind = EntityKind.MemberAccess({ Kind = EntityKind.Member _; Meta = m }) } }, _) } \n    | { Entity = Some { Kind = EntityKind.MemberAccess { Kind = EntityKind.Member _; Meta = m } } } -> \n        match pickMetaByType \"http://schema.thegamma.net/pivot\" \"Transformations\" m with\n        | Some m -> Some(unbox<TypeProviders.Pivot.Transformation list> m)\n        | _ -> None\n    | _ -> None\n  match tryTransform, tryPivotType with Some r, _ | _, Some r -> Some r | _ -> None\n\nlet commandAtLocation loc (program:Program) =\n  program.Body.Node |> List.tryFind (fun cmd ->\n    cmd.Range.Start <= loc && cmd.Range.End + 1 >= loc)\n\n// ------------------------------------------------------------------------------------------------\n// Pivot editor: Splitting pivot transformations into sections\n// ------------------------------------------------------------------------------------------------\n\n/// Represents a tab of the pivot editor (with all nodes that represent the transform)\ntype PivotSection = \n  { Transformation : Pivot.Transformation\n    Nodes : Node<Expr> list }\n\nlet transformName = function\n  | Pivot.DropColumns _ -> \"drop columns\"\n  | Pivot.Empty _ -> \"empty\"\n  | Pivot.FilterBy _ -> \"filter by\"\n  | Pivot.GetSeries _ -> \"get series\"\n  | Pivot.GetTheData _ -> \"get the data\"\n  | Pivot.GroupBy _ -> \"group by\"\n  | Pivot.WindowBy _ -> \"window by\"\n  | Pivot.ExpandBy _ -> \"expand by\"\n  | Pivot.Paging _ -> \"paging\"\n  | Pivot.SortBy _ -> \"sort by\"\n  | Pivot.GetRange _ | Pivot.Metadata _ -> failwith \"Unexpected get range or metadata\"\n\nlet createPivotSections (ch:NestedChain) = \n  let rec loop acc (currentTfs, currentEnts, currentLength) = function\n    | (e, tfs)::tfss when \n          transformName (List.head tfs) = transformName currentTfs && \n          List.length tfs = currentLength ->\n        loop acc (currentTfs, e::currentEnts, currentLength) tfss\n    | (e, tfs)::tfss ->\n          let current = { Transformation = currentTfs; Nodes = List.rev currentEnts }\n          loop (current::acc) (List.head tfs, [e], List.length tfs) tfss\n    | [] -> \n          let current = { Transformation = currentTfs; Nodes = List.rev currentEnts }\n          List.rev (current::acc)\n    \n  let tfss = ch.Chain |> List.choose (fun (_, node) ->\n    match pickPivotTransformations node with\n    | Some(tfs) ->\n        let tfs = \n          if List.length tfs = 1 then tfs // Do not filter if Empty would be the only transform\n          else tfs |> List.filter (function Pivot.Empty -> false | _ -> true)\n        if List.isEmpty tfs then None else Some(node, tfs)\n    | None -> None )\n  Log.trace(\"live\", \"Transformations: %O\", [| for n, tfs in tfss -> n.Node, transformName (List.head tfs) + \" \" + string tfs.Length |])\n  match tfss with\n  | (e, tfs)::tfss -> loop [] (List.head tfs, [e], List.length tfs) tfss\n  | [] -> []\n\n\n// ------------------------------------------------------------------------------------------------\n// Pivot editor: State of the editor\n// ------------------------------------------------------------------------------------------------\n\ntype PivotEditorMenus =\n  | AddDropdownOpen\n  | ContextualDropdownOpen\n  | Hidden\n\ntype PivotEditorAction = \n  | UpdatePreview of DomNode\n  | SelectRange of Range\n  | SelectChainElement of int\n  | AddTransform of Pivot.Transformation\n  | RemoveSection of Symbol\n  | RemoveElement of Symbol\n  | ReplaceElement of Symbol * string * option<list<Expr>>\n  | ReplaceRange of Range * string\n  | AddElement of Symbol * string * option<list<Expr>>\n  | SwitchMenu of PivotEditorMenus\n  \ntype PivotEditorState = \n  { Body : Node<Expr>\n    FirstNode : Node<Expr>\n    Preview : DomNode\n    Sections : PivotSection list\n    SelectedEntity : Entity\n    Menus : PivotEditorMenus\n    Focus : option<string * int option> }\n\n\n// ------------------------------------------------------------------------------------------------\n// Pivot editor: Handling events triggered by the editor\n// ------------------------------------------------------------------------------------------------\n\nlet withPivotState (pivotState:PivotEditorState) state =\n  { state with State = pivotState }\n\nlet findPreview (ch:NestedChain) trigger globals (ent:Entity) = \n  let msg = \n    match ent.Kind with \n    | EntityKind.MemberAccess({Kind = EntityKind.Member(_, {Kind=EntityKind.MemberName n})}) -> n.Name\n    | EntityKind.Call _ -> \"call\"\n    | _ -> \"whatever\"\n\n  Log.trace(\"live\", \"Get preview for: %O\", msg)    \n  let nm = { Name.Name=\"preview\" }\n  let prevDom = \n    ch.Chain \n    |> Seq.skipWhile (fun (_, nd) -> nd.Entity.Value.Symbol <> ent.Symbol)\n    |> Seq.sortBy fst \n    |> Seq.tryPick (fun (loc, node) ->\n      match node.Entity.Value.Type with \n      | Some(Type.Object(FindMember nm m)) ->\n          match pickMetaByType \"http://schema.org\" \"WebPage\" m.Metadata with\n          | Some meta ->  \n              let url = getProperty meta \"url\"\n              Log.trace(\"live\", \"Found preview webpage at %s: %O\", loc, url)\n              h?iframe [ \"src\" => url ] [] |> Some\n          | _ ->\n              let res = Interpreter.evaluate globals ent  \n              let res = res |> FsOption.bind (fun p -> p.Preview.Value)\n              match res with\n              | Some p ->\n                  Log.trace(\"live\", \"Found preview value at %s: %O\", loc, p)\n                  let mutable node = h?div [\"class\" => \"placeholder\"] [text \"Loading preview...\"]\n                  let mutable returned = false\n                  async { let! nd = table<int, int>.create(unbox<Series.series<string, obj>> p).render()\n                          if returned then trigger (CustomEvent(UpdatePreview nd))\n                          else node <- nd\n                          Log.trace(\"live\", \"Evaluated to a node\") } |> Async.StartImmediate\n                  returned <- true\n                  Log.trace(\"live\", \"After evaluation started: %O\", node)\n                  node |> Some\n              | _ -> \n                h?div [ \"class\" => \"placeholder\" ] [ text \"Preview could not be evaluated\" ] |> Some\n      | _ -> None)\n  match prevDom with \n  | Some dom -> dom\n  | _ -> h?div [ \"class\" => \"placeholder\" ] [ text \"This block does not have a preview\" ]\n\n\n/// Recreate editor state based on the current source code and cursor location\n/// (this is called after the cursor moves or code changes)\nlet updateBody trigger state = \n  match commandAtLocation state.Location state.Program with\n  | Some(cmd) ->\n      let line, col = state.Mapper.AbsoluteToLineCol(cmd.Range.End + 1)\n      let (Command.Expr expr | Command.Let(_, expr)) = cmd.Node \n      match collectFirstChain expr with\n      | Some(ch) ->\n          let sections = createPivotSections ch\n          let _, first = ch.Chain |> List.head\n          match ch.Chain |> List.filter (fun (start, node) -> state.Location >= start) |> List.tryLast with\n          | Some(_, selNode) when not (List.isEmpty sections) ->\n              let preview = findPreview ch trigger state.Globals selNode.Entity.Value\n              let ps = \n                { Menus = Hidden; Focus = None; FirstNode = first; SelectedEntity = selNode.Entity.Value\n                  Sections = sections; Body = expr; Preview = preview }\n              state |> withPivotState ps |> Some\n          | _ -> None\n      | _ -> None\n  | _ -> None\n\nlet hideMenus state = \n  { state with State = { state.State with Menus = Hidden } }\n\nlet editorLocation (mapper:LocationMapper) startIndex endIndex = \n  let sl, sc = mapper.AbsoluteToLineCol(startIndex)\n  let el, ec = mapper.AbsoluteToLineCol(endIndex)\n  let rng = JsInterop.createEmpty<monaco.IRange>\n  { StartLineNumber = sl; StartColumn = sc \n    EndLineNumber = el; EndColumn = ec }\n\nlet selectName nd state = \n  let rng =\n    match nd with\n    | { Node = Expr.Member(_, n) } -> n.Range\n    | _ -> nd.Range\n  let loc = editorLocation state.Mapper rng.Start (rng.End+1)\n  { state with Selection = Some loc }\n\n/// Collect the chain and call specified fnction with parsed body, chain and sections\nlet tryTransformChain f state = \n  match collectFirstChain state.State.Body with\n  | Some(ch) ->\n      let sections = ch |> createPivotSections \n      f state.State.Body (List.map snd ch.Chain) sections |> hideMenus\n  | _ -> hideMenus state\n\nlet marker = \"InsertPropertyHere\"\n\nlet replaceAndSelectMarker newName state = \n  let startIndex = state.Code.IndexOf(marker)\n  let newCode = state.Code.Replace(marker, Ast.escapeIdent newName)\n  let mapper = LocationMapper(state.Code)\n  let rng = editorLocation mapper startIndex (startIndex + (Ast.escapeIdent newName).Length)\n  { state with Code = newCode; Selection = Some rng }\n\nlet reconstructChain state (body:Node<_>) newNodes = \n  let newBody =\n    List.tail newNodes \n    |> List.fold (fun prev part ->\n      match part.Node with \n      | Expr.Member(_, n) -> { part with Node = Expr.Member(prev, n) }\n      | Expr.Call(_, args) -> { part with Node = Expr.Call(prev, args) }\n      | _ -> failwith \"reconstructChain: Unexpected node in call chain\") (List.head newNodes)\n\n  let newCode = (Ast.formatSingleExpression newBody).Trim()\n  let newCode = state.Code.Substring(0, body.Range.Start) + newCode + state.Code.Substring(body.Range.End + 1)\n  { state with Code = newCode }\n\nlet createChainNodes args name = \n  let node nd = Ast.node {Start=0; End=0} nd\n  let mem = node (Expr.Member(node Expr.Empty, node (Expr.Variable(node {Name=name}))))\n  match args with\n  | None -> [ mem ]\n  | Some args -> \n      let args = args |> List.map (fun a -> { Name = None; Value = node a })\n      [ mem; node (Expr.Call(mem, node args)) ] \n\nlet getWhiteBeforeAndAfterSections firstNode sections =\n  let dominantWhite whites = \n    let whites = whites |> List.countBy id |> List.ofSeq\n    (\"\",0)::whites |> List.maxBy (fun (s, c) -> if s = \"\" then 0 else c) |> fst\n  let whiteBefore, whiteAfter =\n    sections |> List.map (fun sec -> List.head sec.Nodes) |> List.map Ast.formatWhiteBeforeExpr |> dominantWhite,\n    sections |> List.map (fun sec -> List.last sec.Nodes) |> List.append [firstNode] |> List.map Ast.formatWhiteAfterExpr |> dominantWhite\n  Log.trace(\"live\", \"Inserting whitespace before '%s' and after '%s' for sections: %O\", whiteBefore, whiteAfter, sections)\n  [ { Token = TokenKind.White whiteBefore; Range = {Start=0; End=0} } ],\n  [ { Token = TokenKind.White whiteAfter; Range = {Start=0; End=0} } ]\n\nlet insertWhiteAroundSection before after section = \n  let lastIdx = (List.length section.Nodes) - 1\n  { Transformation = section.Transformation\n    Nodes = \n      section.Nodes |> List.mapi (fun i node ->\n        let node = \n          match before, node with\n          | Some before, { Node = Expr.Member(inst, n) } when i = 0 -> \n              { node with Node = Expr.Member(inst, { n with WhiteBefore = before }) }\n          | _ -> node\n        let node = \n          match after, node with\n          | Some after, node when i = lastIdx -> { node with WhiteAfter = after }\n          | _ -> node\n        node ) }\n\nlet rec updatePivotState trigger state event = \n  match event with\n  | UpdateSource _ \n  | UpdateLocation _ -> state |> hideMenus |> updateBody trigger \n  | InitializeGlobals _ -> Some state\n  | CustomEvent event -> \n  match event with\n  | UpdatePreview prev -> \n      state |> withPivotState { state.State with Preview = prev } |> Some\n\n  | SwitchMenu menu ->\n      state |> withPivotState { state.State with Menus = menu } |> Some\n  \n  | SelectChainElement(dir) ->\n      state |> tryTransformChain (fun body chain sections ->\n        let rec loop before (chain:Node<_> list) = \n          match chain with\n          | c::chain when c.Range.End + 1 < state.Location -> loop c chain\n          | c::after::_ -> before, c, after\n          | [c] -> before, c, c\n          | [] -> before, before, before\n        let before, it, after = loop (List.head chain) (List.tail chain)\n        state |> selectName (if dir < 0 then before elif dir > 0 then after else it) ) |> Some\n          \n  | SelectRange(rng) ->    \n      { state with Selection = Some (editorLocation state.Mapper rng.Start (rng.End+1)) } |> Some\n\n  | ReplaceRange(rng, value) ->    \n      Log.trace(\"live\", \"Replace '%s' with '%s'\", state.Code.Substring(rng.Start, rng.End - rng.Start + 1), value)\n      let newCode = state.Code.Substring(0, rng.Start) + value + state.Code.Substring(rng.End + 1)\n      let location = editorLocation (LocationMapper(newCode)) rng.Start (rng.Start+value.Length)\n      { state with Code = newCode; Selection = Some location } |> Some\n\n  | AddElement(sym, name, args) ->\n      state |> tryTransformChain (fun body chain sections ->\n        let newNodes =\n          chain |> List.collect (fun nd -> \n            if nd.Entity.Value.Symbol <> sym then [nd]\n            else nd :: (createChainNodes args marker) )        \n        reconstructChain state body newNodes\n        |> replaceAndSelectMarker name) |> Some\n\n  | ReplaceElement(sym, name, args) ->\n      state |> tryTransformChain (fun body chain sections ->\n        let newNodes =\n          chain |> List.collect (fun nd -> \n            if nd.Entity.Value.Symbol <> sym then [nd]\n            else createChainNodes args marker )\n        reconstructChain state body newNodes\n        |> replaceAndSelectMarker name) |> Some\n\n  | RemoveElement sym ->\n      state |> tryTransformChain (fun body chain sections ->\n        let beforeDropped = chain |> List.takeWhile (fun nd -> nd.Entity.Value.Symbol <> sym) |> List.tryLast\n        let beforeDropped = defaultArg beforeDropped (List.head chain)\n        let newNodes = chain |> List.filter (fun nd -> nd.Entity.Value.Symbol <> sym)        \n        reconstructChain state body newNodes\n        |> selectName beforeDropped) |> Some\n\n  | RemoveSection sym ->\n      state |> tryTransformChain (fun body chain sections ->\n        let beforeDropped = \n          sections |> List.map (fun sec -> List.head sec.Nodes) \n          |> List.takeWhile (fun nd -> nd.Entity.Value.Symbol <> sym) |> List.tryLast\n        let beforeDropped = defaultArg beforeDropped (List.head chain)\n        let newSections = sections |> List.filter (fun sec -> (List.head sec.Nodes).Entity.Value.Symbol <> sym)\n        let newNodes = newSections |> List.collect (fun sec -> sec.Nodes)\n        reconstructChain state body newNodes\n        |> selectName beforeDropped ) |> Some\n\n  | AddTransform tfs ->\n      state |> tryTransformChain (fun body chain sections ->\n        Log.trace(\"live\", \"Adding transform to chain: %O\", Array.ofSeq chain)\n        Log.trace(\"live\", \"Existing sections are: %O\", Array.ofSeq sections)\n        let whiteBefore, whiteAfter = getWhiteBeforeAndAfterSections (List.head chain) sections\n        let node n = Ast.node { Start=0; End=0; } n\n\n        let fields =  \n          sections \n          |> List.collect (fun s -> s.Nodes) |> List.rev \n          |> List.tryPick pickPivotFields\n\n        let firstProperty, properties = \n          match tfs with\n          | Pivot.GetRange _ | Pivot.Metadata _ -> failwith \"Unexpected get range or metadata\"\n          | Pivot.DropColumns _ -> \"drop columns\", [marker; \"then\"]\n          | Pivot.SortBy _ -> \"sort data\", [marker; \"then\"]\n          | Pivot.FilterBy _ -> \"filter data\", [marker; \"then\"] // TODO\n          | Pivot.WindowBy _ -> \"windowing\", [marker; \"then\"] // TODO\n          | Pivot.ExpandBy _ -> \"expanding\", [marker; \"then\"] // TODO\n          | Pivot.Paging _ -> \"paging\", [marker; \"then\"]\n          | Pivot.GetSeries _ -> \"get series\", [marker]\n          | Pivot.GetTheData -> \"get the data\", [marker]\n          | Pivot.GroupBy(_, _) -> \n              \"group data\", \n              match fields with\n              | Some (f::_) -> [marker; \"by \" + f.Name; \"then\"]\n              | _ -> [marker; \"by Property\"; \"then\"]\n          | Pivot.GroupBy([], _) | Pivot.Empty -> \"\", []\n\n        let newSection =\n          { Transformation = tfs; Nodes = List.collect (createChainNodes None) properties }\n          |> insertWhiteAroundSection (Some whiteBefore) (Some whiteAfter)\n\n        let closeFirstSection = function\n          | section::sections -> \n              let section =\n                match section.Transformation, List.last section.Nodes with\n                | Pivot.Paging _, { Node = Expr.Call({ Node = Expr.Member(_, { Node = Expr.Variable(n) }) }, _) } \n                    when n.Node.Name = \"take\" -> section \n                | _, { Node = Expr.Member(_, { Node = Expr.Variable n }) } \n                    when n.Node.Name = \"then\" -> section \n                | Pivot.Empty, _ -> section\n                | _ -> { section with Nodes = section.Nodes @ (createChainNodes None \"then\") }\n              (insertWhiteAroundSection None (Some whiteAfter) section) :: sections\n          | [] -> []\n\n        let newSections = \n          match List.rev sections with\n          | ({ Transformation = Pivot.GetSeries _ | Pivot.GetTheData } as last)::sections ->\n              List.rev (last::newSection::closeFirstSection sections)\n          | sections -> List.rev (newSection::closeFirstSection sections)\n              \n        Log.trace(\"live\", \"Inserted section: %O\", Array.ofSeq newSections)\n        let newNodes = newSections |> List.collect (fun sec -> sec.Nodes)\n        reconstructChain state body newNodes\n        |> replaceAndSelectMarker firstProperty ) |> Some\n\n\n// ------------------------------------------------------------------------------------------------\n// Pivot editor: Rendering user interface from state\n// ------------------------------------------------------------------------------------------------\n\nlet renderNodeList trigger nodes =\n  [ for nd in nodes do\n      match nd.Node with\n      | Expr.Member(_, { Node = Expr.Variable n }) when n.Node.Name <> \"then\" ->\n          yield h?span [] [\n            h?a [\"click\" =!> trigger (SelectRange(n.Range)) ] [\n              text n.Node.Name \n            ]\n            h?a [\"click\" =!> trigger (RemoveElement(nd.Entity.Value.Symbol))] [\n              h?i [\"class\" => \"gfa gfa-times\"] [] \n            ]\n          ]\n      | _ -> () ]\n\nlet renderContextMenu trigger = \n  h?a [\"class\" => \"right\"; \"click\" =!> trigger (SwitchMenu ContextualDropdownOpen) ] [\n    h?i [\"class\" => \"gfa gfa-plus\"] [] \n  ]\n\nlet renderAddPropertyMenu trigger f nodes =\n  [ let lastNode = nodes |> List.rev |> List.find (function \n      | { Node = Expr.Member(_, { Node = Expr.Variable n }) } -> n.Node.Name <> \"then\" \n      | _ -> true) \n    match lastNode.Entity.Value.Type with\n    | Some(Type.Object obj) ->\n        let members = \n          obj.Members \n          |> Seq.choose (fun m -> if f m.Name then Some m.Name else None)\n          |> Seq.sort\n        yield h?ul [] [\n          for n in members ->\n            h?li [] [ \n              h?a [ \"click\" =!> trigger (AddElement(lastNode.Entity.Value.Symbol, n, None)) ] [ text n] \n            ]\n        ]\n    | _ -> () ]\n\nlet renderSection triggerEvent section = \n  let trigger action = fun _ (e:Event) -> e.cancelBubble <- true; triggerEvent (CustomEvent(action))\n  let triggerWith f = fun el (e:Event) -> e.cancelBubble <- true; triggerEvent (CustomEvent(f el))\n  let getNodeNameAndSymbol = function\n    | Some { Entity = Some e; Node = Expr.Member(_, { Node = Expr.Variable n }) } -> n.Node.Name, Some e.Symbol\n    | _ -> \"\", None\n  [ match section with\n    | Some { Nodes = nodes; Transformation = Pivot.GetSeries _ } ->\n        let getSeriesNode, keyNode, valNode = \n          match nodes with \n          | gs::gsk::gsv::_ -> gs, Some gsk, Some gsv\n          | gs::gsk::_ -> gs, Some gsk, None\n          | gs::_ -> gs, None, None\n          | _ -> failwith \"No get series node in get series transformation\"\n        let keyName, keySym = getNodeNameAndSymbol keyNode\n        let valName, valSym = getNodeNameAndSymbol valNode\n        match getSeriesNode.Entity.Value.Type with\n        | Some(Type.Object obj) ->\n            yield h?span [] [text \"with key\"]\n            yield h?select [\"change\" =!> triggerWith(fun el -> \n                match keySym with\n                | None -> AddElement(getSeriesNode.Entity.Value.Symbol, (unbox<HTMLSelectElement> el).value, None)\n                | Some selSym -> ReplaceElement(selSym, (unbox<HTMLSelectElement> el).value, None)) ] [\n              if keyName = \"\" then yield h?option [ \"value\" => \"\"; \"selected\" => \"selected\" ] [ text \"\" ]\n              for m in obj.Members do\n                let n = m.Name\n                if n.StartsWith(\"with key\") then\n                  yield h?option [  \n                    yield \"value\" => n\n                    if keyName = n then yield \"selected\" => \"selected\" ] [ text (n.Replace(\"with key \", \"\")) ] \n            ]\n        | _ -> ()\n        match keyNode with\n        | Some({ Entity = Some ({ Type = Some (Type.Object obj) } as keyEnt)}) ->\n            yield h?span [] [text \"and value\"]\n            yield h?select [\"change\" =!> triggerWith(fun el -> \n                match valSym with\n                | None -> AddElement(keyEnt.Symbol, (unbox<HTMLSelectElement> el).value, None)\n                | Some selSym -> ReplaceElement(selSym, (unbox<HTMLSelectElement> el).value, None)) ] [\n              if valName = \"\" then yield h?option [ \"value\" => \"\"; \"selected\" => \"selected\" ] [ text \"\" ]\n              for m in obj.Members do\n                let n = m.Name\n                if n.StartsWith(\"and value\") then\n                  yield h?option [  \n                    yield \"value\" => n\n                    if valName = n then yield \"selected\" => \"selected\" ] [ text (n.Replace(\"and value \", \"\")) ] \n            ]\n        | _ -> ()\n\n    | Some { Nodes = nodes; Transformation = Pivot.GroupBy _ } ->\n        let firstNode, selNode, aggNodes = \n          match nodes with \n          | gby::sel::aggs -> gby, Some sel, aggs\n          | gby::_ -> gby, None, []\n          | _ -> failwith \"No group by node in group by transformation\"\n        let selName, selSym = getNodeNameAndSymbol selNode\n        match firstNode.Entity.Value.Type with\n        | Some(Type.Object obj) ->\n            yield h?select [\"change\" =!> triggerWith(fun el -> \n                match selSym with\n                | None -> AddElement(firstNode.Entity.Value.Symbol, (unbox<HTMLSelectElement> el).value, None)\n                | Some selSym -> ReplaceElement(selSym, (unbox<HTMLSelectElement> el).value, None)) ] [\n              if selName = \"\" then yield h?option [ \"value\" => \"\"; \"selected\" => \"selected\" ] [ text \"\" ]\n              for m in obj.Members do\n                let n = m.Name\n                if n.StartsWith(\"by\") then\n                  yield h?option [  \n                    yield \"value\" => n\n                    if selName = n then yield \"selected\" => \"selected\" ] [ text n ] \n            ]\n        | _ -> ()\n        yield! renderNodeList trigger aggNodes  \n        yield renderContextMenu trigger\n        \n    | Some { Nodes = nodes; Transformation = Pivot.Paging _ } ->                    \n        let methods = nodes |> List.map (function { Node = Expr.Member(_, { Node = Expr.Variable n }) } -> n.Node.Name | _ -> \"\") |> set\n        for nd in nodes do\n          match nd.Node with\n          | Expr.Call({ Node = Expr.Member(_, { Node = Expr.Variable n }) }, { Node = [arg] }) ->\n              let removeOp =\n                if n.Node.Name = \"take\" then ReplaceElement(nd.Entity.Value.Symbol, \"then\", None)\n                else RemoveElement(nd.Entity.Value.Symbol)\n              yield h?span [] [\n                  h?a [\"click\" =!> trigger (SelectRange(n.Range)) ] [ text n.Node.Name ]\n                  h?input [ \n                    \"id\" => \"input-pg-\" + n.Node.Name\n                    \"input\" =!> fun el _ -> \n                      let input = unbox<HTMLInputElement> el\n                      let parsed, errors = Parser.parseProgram input.value\n                      if errors.Length = 0 && parsed.Body.Node.Length = 1 then\n                        setCustomValidity el \"\"\n                        ReplaceRange(arg.Value.Range, input.value) |> CustomEvent |> triggerEvent\n                      else setCustomValidity el \"Cannot parse expression\"\n                    \"value\" => Ast.formatSingleExpression arg.Value ] []\n                  h?a [\"click\" =!> trigger (removeOp)] [\n                    h?i [\"class\" => \"gfa gfa-times\"] [] \n                  ]\n                ]\n          | _ -> ()\n        if not (methods.Contains \"take\" && methods.Contains \"skip\") then\n          yield renderContextMenu trigger\n\n    | Some { Nodes = nodes; Transformation = Pivot.SortBy _ } ->\n        let props = nodes |> List.choose (function\n          | { Node = Expr.Member(_, { Node = Expr.Variable n }); Entity = Some { Symbol = sym} }\n              when n.Node.Name <> \"then\" && n.Node.Name <> \"sort data\" -> Some(sym, n) | _ -> None)\n        let last = List.tryLast props\n        for sym, n in props ->\n          h?span [] [\n            yield h?a [\"click\" =!> trigger (SelectRange(n.Range)) ] [\n              text n.Node.Name \n            ]\n            if n.Node.Name = (snd last.Value).Node.Name then\n              yield h?a [\"click\" =!> trigger (RemoveElement(sym))] [\n                h?i [\"class\" => \"gfa gfa-times\"] [] \n              ]\n          ]\n        yield renderContextMenu trigger\n\n    | Some { Nodes = nodes; Transformation = Pivot.DropColumns _ } ->\n        yield! renderNodeList trigger (List.tail nodes)\n        yield renderContextMenu trigger\n\n    | _ -> () ]\n\nlet renderPivot triggerEvent (state:LiveState<_>) = \n  let trigger action = fun _ (e:Event) -> e.cancelBubble <- true; triggerEvent (CustomEvent(action))\n  let triggerWith f = fun el (e:Event) -> e.cancelBubble <- true; triggerEvent (CustomEvent(f el))\n  let selSec = state.State.Sections |> List.tryFind (fun sec -> \n    sec.Nodes |> List.exists (fun secEnt -> state.State.SelectedEntity.Symbol = secEnt.Entity.Value.Symbol) )\n  let firstNode = state.State.FirstNode\n  let dom = \n    h?div [\n        yield \"class\" => \"pivot-preview\"\n        if state.State.Menus <> Hidden then yield \"click\" =!> trigger (SwitchMenu Hidden)\n      ] [\n      h?ul [\"class\" => \"tabs\"] [\n        for sec in state.State.Sections ->\n          let selected = sec.Nodes |> List.exists (fun secEnt -> state.State.SelectedEntity.Symbol = secEnt.Entity.Value.Symbol)\n          let secSymbol = (sec.Nodes |> List.head).Entity.Value.Symbol\n          let identRange = \n            match sec.Nodes with\n            | { Node \n                  = Expr.Variable n \n                  | Expr.Member(_, { Node = Expr.Variable n }) \n                  | Expr.Call({ Node = Expr.Variable n }, _) \n                  | Expr.Call({ Node = Expr.Member(_, { Node = Expr.Variable n })}, _) }::_ -> n.Range\n            | _ -> failwith \"Unexpected node in pivot call chain\" \n\n          h?li [\"class\" => if selected then \"selected\" else \"\"] [\n            match sec.Transformation with\n            | Pivot.Transformation.Empty ->\n                // Empty transform means the data source\n                yield h?a [\"click\" =!> trigger (SelectRange(identRange)) ] [\n                  match firstNode.Node with\n                  | Expr.Variable n -> yield text n.Node.Name\n                  | _ -> yield text \"data\"\n                ]\n            | _ ->\n                // All other normal transformations\n                yield h?a [\"click\" =!> trigger (SelectRange(identRange)) ] [\n                  text (transformName sec.Transformation) \n                ]\n                yield h?a [\"click\" =!> trigger (RemoveSection(secSymbol))] [\n                  h?i [\"class\" => \"gfa gfa-times\"] [] \n                ]\n          ]\n        yield h?li [\"class\" => if state.State.Menus = AddDropdownOpen then \"add selected\" else \"add\"] [ \n          h?a [\"click\" =!> trigger (SwitchMenu AddDropdownOpen) ] [\n            h?i [\"class\" => \"gfa gfa-plus\"] [] \n          ]\n        ]\n      ]\n      h?div [\"class\" => \"add-menu\"] [\n        let clickHandler tfs = \"click\" =!> trigger (AddTransform(tfs))\n        if state.State.Menus = AddDropdownOpen then \n          yield h?ul [] [\n            yield h?li [] [ h?a [ clickHandler(Pivot.DropColumns []) ] [ text \"drop columns\"] ]\n            //yield h?li [] [ h?a [ clickHandler(Pivot.FilterBy(Pivot.And, [])) ] [ text \"filter by\"] ]\n            yield h?li [] [ h?a [ clickHandler(Pivot.GroupBy([], [])) ] [ text \"group by\"] ]\n            yield h?li [] [ h?a [ clickHandler(Pivot.Paging []) ] [ text \"paging\"] ]\n            yield h?li [] [ h?a [ clickHandler(Pivot.SortBy []) ] [ text \"sort by\"] ]\n            let getDataCalled = \n              state.State.Sections |> List.exists (function \n                | { Transformation = Pivot.GetTheData | Pivot.GetSeries _ } -> true | _ -> false)\n            if not getDataCalled then\n              yield h?li [] [ h?a [ clickHandler(Pivot.GetTheData) ] [ text \"get the data\"] ]\n              yield h?li [] [ h?a [ clickHandler(Pivot.GetSeries(\"!\", \"!\")) ] [ text \"get series\"] ]\n          ]\n      ]\n      h?div [\"class\" => \"toolbar\"] [\n        yield h?span [\"class\"=>\"navig\"] [\n          h?a [] [ h?i [\"click\" =!> trigger (SelectChainElement -1); \"class\" => \"gfa gfa-chevron-left\"] [] ]\n          h?a [] [ h?i [\"click\" =!> trigger (SelectChainElement 0); \"class\" => \"gfa gfa-circle\"] [] ]\n          h?a [] [ h?i [\"click\" =!> trigger (SelectChainElement +1); \"class\" => \"gfa gfa-chevron-right\"] [] ]\n        ]\n        yield! renderSection triggerEvent selSec\n      ]\n\n      h?div [\"class\" => \"add-menu\"] [\n        match state.State.Menus, selSec with\n        | ContextualDropdownOpen, Some { Nodes = nodes; Transformation = Pivot.Paging _ } ->\n            let methods = nodes |> List.choose (function \n              | { Node = Expr.Member(_, { Node = Expr.Variable n }); Entity = e } -> \n                  Some(n.Node.Name, e.Value.Symbol) | _ -> None) |> dict\n            let lastSym = (List.last nodes).Entity.Value.Symbol\n            let firstSym = (List.head nodes).Entity.Value.Symbol\n            yield h?ul [] [\n              if not (methods.ContainsKey \"take\") then\n                let op = \n                  if methods.ContainsKey \"then\" then ReplaceElement(methods.[\"then\"], \"take\", Some [Expr.Number 10.])\n                  else AddElement(lastSym, \"take\", Some [Expr.Number 10.])\n                yield h?li [] [ h?a [ \"click\" =!> trigger op ] [ text \"take\"] ]\n              if not (methods.ContainsKey \"skip\") then\n                let op = AddElement(firstSym, \"skip\", Some [Expr.Number 10.])\n                yield h?li [] [ h?a [ \"click\" =!> trigger op ] [ text \"skip\"] ]\n            ]\n\n        | ContextualDropdownOpen, Some { Nodes = nodes; Transformation = Pivot.GroupBy _ } ->\n            yield! nodes |> renderAddPropertyMenu trigger (fun n -> \n              n <> \"then\" && n <> \"preview\" && not (n.StartsWith(\"and\")) )\n        | ContextualDropdownOpen, Some { Nodes = nodes; Transformation = Pivot.SortBy _ } ->\n            yield! nodes |> renderAddPropertyMenu trigger (fun n -> n <> \"then\" && n <> \"preview\")\n        | ContextualDropdownOpen, Some { Nodes = nodes; Transformation = Pivot.DropColumns _ } ->\n            yield! nodes |> renderAddPropertyMenu trigger (fun n -> n <> \"then\" && n <> \"preview\")\n        | _ -> ()\n      ]\n      h?div [\"class\" => \"preview-body\"] [\n        yield state.State.Preview\n      ] \n    ]\n  let endLine, _ = state.Mapper.AbsoluteToLineCol(state.State.Body.Range.End)\n  Some { Line = endLine; Preview = dom }\n\n\n// ------------------------------------------------------------------------------------------------\n//\n// ------------------------------------------------------------------------------------------------\n\nlet preview = \n  { ID = \"Pivot\"\n    Update = updatePivotState\n    Render = renderPivot \n    InitialState = \n      { Body = Ast.node { Start = 0; End = 0 } Expr.Empty \n        FirstNode = Ast.node { Start = 0; End = 0 } Expr.Empty \n        SelectedEntity = Unchecked.defaultof<_>\n        Preview = text \"not created\"\n        Sections = []; Menus = Hidden; Focus = None } }","﻿// ------------------------------------------------------------------------------------------------\n// Live preview for anything with 'show' method\n// ------------------------------------------------------------------------------------------------\nmodule TheGamma.Live.Showable\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Html\nopen TheGamma.Live.Common\nopen TheGamma.Common\nopen TheGamma.TypeChecker\nopen TheGamma.TypeProviders\n\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n// ------------------------------------------------------------------------------------------------\n//\n// ------------------------------------------------------------------------------------------------\n\nlet commandAtLocation loc (program:Program) =\n  program.Body.Node |> List.tryFind (fun cmd ->\n    cmd.Range.Start <= loc && cmd.Range.End + 1 >= loc)\n\ntype ShowableEditorState = \n  { EndLocation : int\n    Preview : DomNode \n    PreviewSymbol : Symbol\n    PreviewID : int\n    }\n\n[<Emit(\"$0.show($1)\")>]\nlet callShow (inst:obj) (id:string) : unit = failwith \"JS\"\n\nlet (|HasShow|_|) = function\n  | Type.Object obj ->\n      let hasShow = obj.Members |> Array.exists (function \n        | { Name=\"show\"; Type=Type.Method([{ Type = Type.Primitive PrimitiveType.String }], _) } -> true\n        | _ -> false)\n      if hasShow then Some() else None\n  | _ -> None\n\nlet updateBody trigger state = \n  Log.trace(\"live\", \"Showable - updating body\")\n  match commandAtLocation state.Location state.Program with\n  | Some({ Node = Command.Let(_, e); Entity = Some { Kind = EntityKind.LetCommand(_, ent) } } as cmd) \n  | Some({ Node = Command.Expr e; Entity = Some { Kind = EntityKind.RunCommand ent } } as cmd) ->\n      let chain = collectFirstChain e\n      match ent.Type.Value, chain with \n      | HasShow, _ ->\n          match Interpreter.evaluate state.Globals ent with \n          | Some res ->\n              let id = \n                if ent.Symbol <> state.State.PreviewSymbol then state.State.PreviewID + 1\n                else state.State.PreviewID\n              let placeholder = h?div [\"class\"=>\"placeholder\"] [text \"Loading preview...\"]\n              let dom = h?div [] [h.delayed (string id) placeholder (fun id ->            \n                Log.trace(\"live\", \"Show: %O\", res.Value)\n                callShow res.Value id\n              )]\n              Some { state with State = { PreviewSymbol = ent.Symbol; PreviewID = id; EndLocation = cmd.Range.End; Preview = dom } }\n          | _ -> None\n            \n      | _, Some chain -> \n          chain.Chain |> Seq.sortByDescending fst |> Seq.tryPick (fun (_, node) ->\n            let nm = { Name.Name=\"preview\" }\n            match node.Entity.Value.Type with\n            | Some(Type.Object(FindMember nm m)) ->\n                match pickMetaByType \"http://schema.org\" \"WebPage\" m.Metadata with\n                | Some meta ->  \n                    let url = getProperty meta \"url\"\n                    let dom = h?iframe [ \"src\" => url ] [] \n                    let id = state.State.PreviewID + 1\n                    Some { state with State = { PreviewSymbol = ent.Symbol; PreviewID = id; EndLocation = cmd.Range.End; Preview = dom } }\n                | _ -> None\n            | _ -> None)\n\n      | _ -> None\n  | _ -> None\n\n\nlet rec updateShowableState trigger state event = \n  match event with\n  | UpdateSource _ \n  | UpdateLocation _ -> state |> updateBody trigger \n  | InitializeGlobals _ \n  | CustomEvent () -> Some state \n\nlet renderShowable trigger (state:LiveState<_>) = \n  let endLine, _ = state.Mapper.AbsoluteToLineCol(state.State.EndLocation)\n  let dom = \n    h?div [ \"class\" => \"pivot-preview\" ] [\n      h?ul [\"class\" => \"tabs\"] [\n        h?li [\"class\" => \"selected\"] [ h?a [] [ text \"preview\" ] ]\n      ]\n      h?div [\"class\" => \"preview-body\"] [\n        yield state.State.Preview\n      ] \n    ]\n  Some { Line = endLine; Preview = dom }\n\n\n// ------------------------------------------------------------------------------------------------\n//\n// ------------------------------------------------------------------------------------------------\n\nlet preview = \n  { ID = \"Showable\"\n    Update = updateShowableState\n    Render = renderShowable\n    InitialState = { PreviewID = 0; PreviewSymbol = createSymbol(); EndLocation = 0; Preview = text \"not created\" } }","﻿module TheGamma.Blocks\n\nopen Fable.Import.Browser\nopen TheGamma.Common\nopen TheGamma.Html\nopen TheGamma.Ast\nopen TheGamma.TypeProviders.FSharpProvider\n\nopen System\n\nlet getEntity (svc:Services.CheckingService) code = async {\n  let! success, bound, prog = svc.TypeCheck(\"let it = \" + code)\n  let _, ent = bound.Entities |> Seq.find (function (_, { Kind = EntityKind.Variable({ Name = \"it\" }, _) }) -> true | _ -> false)\n  let _, prog = bound.Entities |> Seq.find (function (_, { Kind = EntityKind.Program _ }) -> true | _ -> false)\n  let errors = TypeChecker.collectTypeErrors prog\n  let errors = [ for e in errors -> code.Substring(e.Range.Start, e.Range.End - e.Range.Start + 1), e.Message ]\n  return errors, ent }\n\n\ntype Event = \n  | RemoveLast\n  | AddElement of string\n  | UpdateParameter of string * string\n\ntype State = \n  { CheckingService : Services.CheckingService\n    Globals : Entity list\n    Chain : list<string * (string * string) list option>\n    Completions : string[]\n    Entity : Entity option }\n  static member Create(svc, globals) = \n    { CheckingService = svc; Globals = globals\n      Entity = None; Chain = []; Completions = [||] }\n\nlet getTypeName state = \n  match state.Entity with\n  | Some { Type = Some(Type.Object(:? GenericType as s)) } -> s.TypeDefinition.FullName\n  | _ -> \"object\" \n\n\nlet formatChain chain = \n  chain \n  |> List.rev \n  |> List.map (fun (id, args) ->\n      Ast.escapeIdent id +\n      match args with \n      | Some args -> \"(\" + String.concat \", \" (List.map snd args) + \")\"\n      | None -> \"\")\n  |> String.concat \".\" \n\n\nlet updateCompletions state = async {\n  let! state = state\n  match state with \n  | { Chain = [] } -> \n      return { state with Completions = [| for g in state.Globals -> g.Name |] }\n  | { Chain = chain } -> \n      let code = formatChain chain\n      let! errs, ent = getEntity state.CheckingService code\n      match errs, ent with \n      | [], { Type = Some(Type.Object(obj)) } -> \n          let compls = [| for m in obj.Members do if m.Name <> \"preview\" then yield m.Name |]\n          return { state with Entity = Some ent; Completions = compls }\n      | _ -> \n          return { state with Entity = Some ent; Completions = [||] } }\n\n\nlet update state evt = updateCompletions <| async {\n  match evt, state with \n  | RemoveLast, { Chain = [] }\n  | RemoveLast, { Chain = [_] } -> \n      return { state with Chain = []; Entity = None }\n  | RemoveLast, { Chain = _::chain } -> \n      return { state with Chain = chain } \n\n  | AddElement(m), _ -> \n      let code = formatChain ((m, None)::state.Chain)\n      let! errs, ent = getEntity state.CheckingService code\n      match ent with \n      | { Type = Some(Type.Method(args, _)) } -> \n          return { state with Chain = (m, Some [ for a in args -> a.Name, \"\" ])::state.Chain } \n      | _ -> \n          return { state with Chain = (m, None)::state.Chain }\n\n  | UpdateParameter(p, v), { Chain = (m, Some pars)::rest } ->\n      let newPars = pars |> List.map (fun (po, vo) -> if p = po then p, v else po, vo)\n      return { state with Chain = (m, Some newPars)::rest } \n      \n  | _ -> return state }\n\n\nlet tryGetPreview state = \n  let (|Evaluate|) (l:Lazy<_>) = l.Value\n  match state.Entity with \n  | Some ent -> \n      Interpreter.evaluate state.Globals ent |> ignore\n      match ent.Value with \n      | Some { Preview = Evaluate (Some preview) } -> \n          let mutable node = h?div [\"id\" => \"blockspreview\"] [text \"Loading preview...\"]\n          let mutable returned = false\n          async { let! nd = table<int, int>.create(unbox<Series.series<string, obj>> preview).render()\n                  if returned then nd |> renderTo (document.getElementById \"blockspreview\")\n                  else node <- nd } |> Async.StartImmediate\n          returned <- true\n          node\n      | _ -> h?div [] [text \"Preview has no value\"]\n  | _ -> h?div [] [text \"No preview available\"]\n   \n\nlet render trigger state =\n  h?div [\"class\" => \"pilleditor\"] [\n    h?ul [\"class\" => \"pills\"] [\n      let renderCoreChain (chain:list<_ * _ option>) = \n        [ for id, pars in List.rev chain ->\n            h?li [] [ text (id + if pars.IsSome then \" (...)\" else \"\") ] ]\n\n      let renderChain removeLast chain = \n        match removeLast, chain with\n        | true, (last, _)::rest -> \n            renderCoreChain rest @ \n            [ h?li [] [ text last; h?a [\"click\" =!> fun _ _ -> trigger RemoveLast ] [ h?i [\"class\" => \"gfa gfa-times\"] [] ] ] ]\n        | _, rest -> \n            renderCoreChain rest\n\n      match state.Chain with\n      | (meth, Some pars)::rest -> yield! renderChain false rest \n      | chain -> yield! renderChain true chain\n\n      match state.Chain with\n      | (meth, Some pars)::rest ->\n          yield h?li [] [  \n            yield text (meth + \"(\")\n            for p, v in pars do \n              yield text (p + \" = \") \n              yield h?input [\"type\"=>\"text\"; \"value\"=>v; \"input\" =!> fun el _ -> \n                trigger (UpdateParameter(p, (unbox<HTMLInputElement> el).value)) ] []\n            yield text \")\"\n            yield h?a [\"click\" =!> fun _ _ -> trigger RemoveLast ] [ h?i [\"class\" => \"gfa gfa-times\"] [] ] \n          ]\n      | _ -> ()\n\n      if state.Completions.Length > 0 then\n          yield h?li [] [  \n            h?div [\"class\" => \"selectwrapper\"] [\n              h?select [ \"change\" =!> fun el _ -> trigger(AddElement((unbox<HTMLSelectElement> el).value)) ] [\n                yield h?option [] [text \"(choose an operation to add)\"] \n                for s in state.Completions -> h?option [ \"value\" => s ] [ text s ]\n              ]\n            ] \n          ]\n    ] \n\n    tryGetPreview state\n    \n    h?p [] [ text (getTypeName state) ]\n  ]\n\nlet createBlockEditor svc globals id = Async.StartImmediate <| async {\n  try\n    let! globals = globals |> Async.AwaitFuture\n    let state = State.Create(svc, globals)\n    let! state = \n      //[\"olympics\"; \"group data\"; \"by Games\"; \"average Year\"]\n      //[\"olympics\"; \"paging\"; \"take\"]\n      [\"enigma\"]\n      |> List.fold (fun st s -> async { let! st = st in return! update st (AddElement(s)) }) (async.Return state)\n    createVirtualDomAsyncApp id state render update\n  with e -> \n    Log.exn(\"system\", \"Something went wrong: %O\", e)\n  }\n\n\n    \n\n\n","﻿module TheGamma.Monaco\n\nopen Fable.Core\nopen Fable.Import.monaco\nopen Fable.Import.Browser\n\nopen TheGamma.Common\nopen TheGamma.Services\nopen TheGamma.TypeChecker\nopen Fable.Core.JsInterop\n\n[<Emit(\"var i = 1; eval('monaco$' + i + ' = monaco'); monaco = monaco;\")>]\nlet hack : unit = ()\nhack\n\nlet noState = \n  { new languages.IState with\n      member this.clone() = this\n      member this.equals(other) = true }\n\nlet getColorClass = function\n  | TokenKind.String _ -> \"string\" \n  | TokenKind.QIdent _ | TokenKind.Ident _ -> \"ident\" \n  | TokenKind.Dot _ -> \"operator\" \n  | TokenKind.Let | TokenKind.Boolean _ | TokenKind.Fun | TokenKind.Arrow -> \"keyword\" \n  | TokenKind.Number _ -> \"number\" \n  | _ -> \"\"\n\nlet tokensProvider = \n  { new languages.TokensProvider with\n      member this.tokenize(line, state) =\n        let tokens = JsInterop.createEmpty<languages.ILineTokens>\n        tokens.endState <- noState\n        tokens.tokens <- ResizeArray()\n\n        let tokenized, _ = Tokenizer.tokenize line\n        for t in tokenized do\n          let tok = JsInterop.createEmpty<languages.IToken>\n          tok.startIndex <- float t.Range.Start\n          tok.scopes <- Fable.Core.U2.Case1 (getColorClass t.Token)\n          tokens.tokens.Add(tok)\n\n        tokens\n      member this.getInitialState() = noState }\n\nlet createCompletionProvider (getService:string -> CheckingService) = \n  { new languages.CompletionItemProvider with \n      member this.triggerCharacters = Some(ResizeArray [| for i in 0 .. 255 -> string (char i) |])\n      member this.provideCompletionItems(model, position, token) =           \n        async {      \n          try    \n            let svc = getService (model.uri.toString())\n\n            let input = model.getValue(editor.EndOfLinePreference.LF, false)\n            Log.event(\"editor\", \"completions\", \"\", JsInterop.createObj [\"source\", box input; \"position\", box position])\n\n            let conv = LocationMapper(input)\n            let loc = conv.LineColToAbsolute(int position.lineNumber, int position.column)\n            \n            let! _, ents, _ = svc.TypeCheck(input)\n            let optMembers = \n              ents.Entities |> Seq.tryPick (fun (rng, ent) ->\n                match ent with \n                | { Kind = EntityKind.Member({ Type = Some t }, { Kind = EntityKind.MemberName(n) }) } \n                      when loc >= rng.Start && loc <= rng.End + 1 -> \n                    Log.trace(\"completions\", \"Antecedant at current location (member '%s'): %O\", n.Name, t)\n                    match t with\n                    | Type.Object obj -> Some(n.Name, rng, obj.Members)\n                    | _ -> None\n                | { Kind = EntityKind.Member({ Type = Some t }, { Kind = EntityKind.MemberName(n) }) } ->\n                    Log.trace(\"completions\", \"Ignoring '%s' at location %s-%s (current=%s)\", n.Name, rng.Start, rng.End, loc)\n                    None\n                | _ -> None)\n\n            let convertRange (rng:TheGamma.Range) = \n              let sl, sc = conv.AbsoluteToLineCol(rng.Start)\n              let el, ec = conv.AbsoluteToLineCol(rng.End)\n              let res = JsInterop.createEmpty<IRange>\n              res.startColumn <- float sc\n              res.startLineNumber <- float sl\n              res.endColumn <- float ec + 1.0\n              res.endLineNumber <- float el\n              res\n\n            match optMembers with \n            | None -> \n                Log.trace(\"completions\", \"no members at %s\", loc)\n                return ResizeArray []\n            | Some (currentName, nameRange, members) -> \n                let nameRange = convertRange nameRange\n                Log.trace(\"completions\", \"providing %s members at %O\", members.Length, nameRange)\n\n                let members = members |> Array.filter (fun m ->\n                  match Ast.pickMetaByType \"http://schema.thegamma.net\" \"CompletionItem\" m.Metadata with\n                  | Some item -> not (getProperty item \"hidden\")\n                  | _ -> true)\n\n                let completion =\n                  [ for m in members ->\n                      let ci = JsInterop.createEmpty<languages.CompletionItem>\n                      let n = m.Name\n                      let k = \n                        match m.Type with \n                        | Type.Method _ -> languages.CompletionItemKind.Method \n                        | _ -> languages.CompletionItemKind.Property\n                      ci.kind <- k\n                      ci.label <- n\n                      ci.insertText <- Some(Ast.escapeIdent n)\n                      // We set the current text in the range as 'filterText' so Monaco \n                      // does not filter things out when Ctrl+Space is typed (trick!)\n                      ci.filterText <- Some(Ast.escapeIdent currentName + n) \n                      match m.Type with\n                      | Type.Method(arguments=args) -> \n                          let acc, l = \n                            [ for ma in args -> (if ma.Optional then \"?\" else \"\") + ma.Name ] \n                            |> Seq.fold (fun (acc, l:string) s ->\n                                if l.Length > 100 then (l::acc, s)\n                                else (acc, if l = \"\" then s else l+\",\"+s)) ([], \"\")\n                          let args = l::acc |> List.rev |> String.concat \",\\n\"\n                          ci.documentation <- Some(\"(\" + args + \")\")\n                      | _ -> ()\n\n                      let eo = JsInterop.createEmpty<editor.ISingleEditOperation>\n                      eo.text <- Ast.escapeIdent n\n                      eo.range <- nameRange\n                      ci.textEdit <- Some eo\n                      ci ] \n                Log.trace(\"completions\", \"returning %O\", Array.ofSeq completion)\n                return ResizeArray(completion)\n            with e ->\n              Log.exn(\"completions\", \"completions failed %O\", e)\n              return ResizeArray() } |> Async.StartAsPromise |> Fable.Core.U4.Case2\n\n      member this.resolveCompletionItem(item, token) = Fable.Core.U2.Case1 item }\n\nlet createdEditors = System.Collections.Generic.Dictionary<string, CheckingService>()\nlet getService uri = createdEditors.[uri]\n\nlet setupMonacoServices () = \n  let lang = JsInterop.createEmpty<languages.ILanguageExtensionPoint>\n  lang.id <- \"thegamma\"\n  languages.Globals.register(lang)\n  languages.Globals.setTokensProvider(\"thegamma\", tokensProvider) |> ignore\n  languages.Globals.registerCompletionItemProvider(\"thegamma\", createCompletionProvider getService) |> ignore\n\nlet createMonacoEditor id code svc customize = \n  if createdEditors.Count = 0 then setupMonacoServices ()\n  let services = JsInterop.createEmpty<editor.IEditorOverrideServices>\n  let options = JsInterop.createEmpty<editor.IEditorConstructionOptions>\n  let scroll = JsInterop.createEmpty<editor.IEditorScrollbarOptions>\n  scroll.vertical <- Some \"none\"\n  scroll.horizontal <- Some \"auto\"\n  options.scrollbar <- Some scroll\n  options.value <- Some code\n  options.language <- Some \"thegamma\"\n  options.lineNumbersMinChars <- Some 3.0\n  options.contextmenu <- Some false\n  options.scrollBeyondLastLine <- Some false\n  options.overviewRulerLanes <- Some 0.0\n  customize options\n  let ed = editor.Globals.create(document.getElementById(id), options, services)\n  createdEditors.Add(ed.getModel().uri.toString(), svc)\n  ed","﻿module TheGamma.Main\n\nopen Fable.Core\nopen Fable.Core.Extensions\nopen Fable.Import\nopen Fable.Helpers\nopen Fable.Import.Browser\n\nopen TheGamma\nopen TheGamma.Ast\nopen TheGamma.Html\nopen TheGamma.Common\nopen TheGamma.TypeChecker\nopen TheGamma.Services\nopen TheGamma.TypeProviders \nopen TheGamma.Live.Common\n\nmodule FsOption = Microsoft.FSharp.Core.Option\n\n// ------------------------------------------------------------------------------------------------\n// Global provided types\n// ------------------------------------------------------------------------------------------------\n\nlet buildGlobalsTable provideTypes = Async.StartAsNamedFuture \"buildGlobalsTable\" <| async {\n  // We need to pass the lookup function to the code that provides types\n  // (because the providers may need to lookup named types), so we define\n  // the map as mutable and fill it later.\n  let mutable named = Map.empty\n  let lookupNamed n = \n    match named.TryFind(n) with\n    | Some(r) -> r\n    | None -> \n        Log.error(\"typechecker\", \"Could not find named type '%s'\", n)\n        failwith (sprintf \"Could not find named type '%s'\" n)\n\n  let! provided = provideTypes lookupNamed\n  let allTypes = \n    [ // Pretend we support these - the names appear in the F# provided types\n      // and if the functions are not actually used, providing Any type works \n      yield TypeProviders.NamedType(\"value\", Type.Any)\n      yield TypeProviders.NamedType(\"object\", Type.Any)\n      yield TypeProviders.NamedType(\"seq\", Type.Any) \n      yield TypeProviders.NamedType(\"async\", Type.Any) \n      yield! provided ]\n\n  // Build lookup table from named types and\n  // list of global entities (provided global values)\n  named <- \n    allTypes\n    |> Seq.choose (function TypeProviders.NamedType(s, t) -> Some(s, t) | _ -> None)\n    |> Map.ofSeq\n  let globalEntities = allTypes |> List.choose (function \n    | TypeProviders.GlobalValue(n, m, e, t) -> \n        Some(Interpreter.globalEntity n m t (Some e))\n    | _ -> None)\n    (*\n  let test = Interpreter.globalEntity \"magic\" [] (Type.Method(fun vs ->\n    { new ObjectType with\n        member x.Members = \n          [| for i in 1 .. unbox (List.item 1 vs) -> \n               { Name = unbox (List.head vs) + \" \" + string i; Type = Type.Primitive(PrimitiveType.String);\n                 Metadata = []; Emitter = { Emit = fun _ -> Babel.StringLiteral(unbox (List.head vs), None) } } |]\n        member x.TypeEquals _ = false } |> Type.Object |> Some )) (Some(Babel.StringLiteral(\"test\", None)))\n        *)\n  return globalEntities } \n\nlet rec resolveProvider lookup ignoreFilter kind endpoint = \n  match kind with\n  | \"rest\" ->\n      match TypeProviders.RestProvider.provideRestType lookup (resolveProvider lookup ignoreFilter) \"anonymous\" endpoint \"\" with\n      | ProvidedType.GlobalValue(_, _, e, t) -> t, { Emit = fun _ -> e }\n      | _ -> failwith \"resolveProvider: Expected global value\"\n  | \"pivot\" ->\n      let pivotType = async {\n        let! typ = TypeProviders.Pivot.providePivotType endpoint ignoreFilter \"anonymous\" lookup\n        match typ with \n        | ProvidedType.GlobalValue(_, _, _, t) -> return t \n        | _ -> return failwith \"resolveProvider: Expected global value\" }\n      Type.Delayed(Async.StartAsNamedFuture (\"pivotType:\" + endpoint) pivotType),\n      { Emit = fun _ -> TypeProviders.Pivot.makePivotExpression endpoint }\n  | _ ->\n    Log.error(\"providers\", \"Cannot resolve provider '%s' (%s)\", kind, endpoint) \n    failwith \"resolveProvider: Cannot resolve type provider\"\n\n// ------------------------------------------------------------------------------------------------\n// JavaScript API\n// ------------------------------------------------------------------------------------------------\n\ntype TheGammaProviders = \n  { globals : Future<Entity list> }\n\ntype TheGammaContext =\n  { checkingService : CheckingService \n    providers : TheGammaProviders }\n\nlet callShowMethod outputId (cmd:Node<_>) = \n  match cmd.Node with\n  | Command.Expr({ Entity = Some { Type = Some typ } } as inst) ->\n      match typ with\n      | Type.Object obj ->\n          let showTyp = obj.Members |> Array.tryPick (function \n            | { Name = \"show\"; Type = typ & Type.Method([{ Type = Type.Primitive PrimitiveType.String }], _) } -> Some typ\n            | _ -> None)\n          match showTyp with \n          | Some showTyp ->\n            let rng = { Range.Start = cmd.Range.End; End = cmd.Range.End }\n            let outExpr = Ast.node rng (Expr.String(outputId))\n            let args = [{ Argument.Name = None; Argument.Value = outExpr }]\n            let showMember = Expr.Member(inst, Ast.node rng (Expr.Variable(Ast.node rng { Name = \"show\" }))) |> Ast.node rng\n            let showEntity = \n              { Kind = EntityKind.Root; Symbol = createSymbol(); Value = None\n                Meta = []; Type = Some showTyp; Errors = [] }\n            showMember.Entity <- Some showEntity\n            let expr = Ast.node rng (Expr.Call(showMember, Ast.node rng args))\n            Ast.node cmd.Range (Command.Expr(expr))\n          | _ -> cmd\n      | _ -> cmd\n  | _ -> cmd\n\n[<Emit(\"eval($0)\")>]\nlet eval (s:string) : obj = failwith \"eval\"\n\nlet evaluate ctx code outputId = async {\n  // Type check & insert 'show' calls if 'outputId' is given\n  let! _, _, prog = ctx.checkingService.TypeCheck(code)\n  let newBody = \n    match outputId with\n    | Some outputId -> prog.Body.Node |> List.map (callShowMethod outputId)\n    | _ -> prog.Body.Node \n  let prog = { prog with Body = { prog.Body with Node = newBody } }\n  let! code = CodeGenerator.compile ctx.providers.globals code prog \n\n  // Get fable to reference everything\n  let s = TheGamma.Series.series<int, int>.create(async { return [||] }, \"\", \"\", \"\") \n  TheGamma.TypeProvidersRuntime.RuntimeContext(\"lol\", \"\", \"troll\") |> ignore\n  TypeProvidersRuntime.trimLeft |> ignore\n  TheGamma.GoogleCharts.chart.bar |> ignore\n  TheGamma.TypeProvidersRuntime.convertTupleSequence |> ignore\n  TheGamma.TypeProvidersRuntime.convertSequence |> ignore\n  TheGamma.table<int, int>.create(s) |> ignore\n  TheGamma.General.date.now() |> ignore\n  TheGamma.Series.series<int, int>.values([| 1 |]) |> ignore\n  TheGamma.placeholder.create(\"\") |> ignore\n  TheGamma.Interactive.youguess.line |> ignore\n  Log.trace(\"interpreter\", \"Main evaluating: %O\", code)\n  return eval code }\n\ntype provider = string -> (string -> Type) -> Async<list<ProvidedType>>\n\nlet previews = \n  [ Live.Pivot.preview |> unbox<LivePreview<CustomLiveState, CustomLiveEvent>> \n    Live.Showable.preview |> unbox<LivePreview<CustomLiveState, CustomLiveEvent>> ]\n\ntype editorOptions =\n  { width : float option\n    height : float option\n    maxHeight : float option\n    autoHeight : bool option\n    enablePreview : bool option\n    monacoOptions : (monaco.editor.IEditorConstructionOptions -> unit) option }\n\ntype error = \n  { number : int\n    message : string\n    startLine : int\n    startColumn : int\n    endLine : int\n    endColumn : int }\n\nlet defaultEditorOptions = \n  { width = None; height = None; maxHeight = None; autoHeight = None; monacoOptions = None; enablePreview = None }\n\ntype thenable<'R>(work:Async<'R>) = \n  let mutable resCell = Choice1Of3()\n  let mutable trigger = id\n  do async { \n    try \n      let! res = work\n      resCell <- Choice2Of3 res\n      trigger ()\n    with e ->\n      resCell <- Choice3Of3 e \n      trigger () } |> Async.StartImmediate\n  member x.``then``(onValue, ?onError) = \n    trigger <- fun () ->\n      match resCell with \n      | Choice1Of3 () -> ()\n      | Choice2Of3 res -> trigger <- id; onValue res\n      | Choice3Of3 err -> trigger <- id; if onError.IsSome then onError.Value err\n    trigger ()\n\nlet rec serializeType typ = \n  match typ with\n  | Type.Any -> box \"any\"\n  | Type.Delayed(_) -> box \"delayed\"\n  | Type.Primitive(PrimitiveType.Unit) -> box \"unit\"\n  | Type.Primitive(PrimitiveType.Bool) -> box \"bool\"\n  | Type.Primitive(PrimitiveType.Date) -> box \"date\"\n  | Type.Primitive(PrimitiveType.Number) -> box \"number\"\n  | Type.Primitive(PrimitiveType.String) -> box \"string\"\n  | Type.Method(args, res) -> \n      [ \"kind\", box \"function\"\n        \"arguments\", args |> List.map (fun ma -> [| box ma.Name; box ma.Optional; box ma.Static; serializeType ma.Type |]) |> Array.ofList |> box\n        \"result\", serializeType (res [for ma in args  -> ma.Type, None]).Value ] |> JsInterop.createObj \n  | Type.List(t) -> \n      [ \"kind\", box \"array\"\n        \"type\", serializeType t ] |> JsInterop.createObj\n  | Type.Object(obj) -> \n      [ yield \"kind\", box \"object\"\n        match obj with\n        | :? FSharpProvider.GenericType as gt -> \n            yield \"generics\", gt.TypeArguments |> Seq.map serializeType |> Array.ofSeq |> box\n        | _ -> ()\n        yield \"members\", obj.Members |> Array.map (fun m -> m.Name) |> box ] \n      |> JsInterop.createObj\n\nlet rec serializeEntity (rng:Range option) (ent:Entity) =\n  let kind, extras = \n    match ent.Kind with\n    | EntityKind.Root -> \"root\", []\n    | EntityKind.Program _ -> \"program\", []\n    | EntityKind.RunCommand _ -> \"do\", []\n    | EntityKind.LetCommand _ -> \"let\", []\n    | EntityKind.Operator _ -> \"operator\", []\n    | EntityKind.List _ -> \"list\", []\n    | EntityKind.Constant _ -> \"constant\", []\n    | EntityKind.Function _ -> \"function\", []\n    | EntityKind.GlobalValue _ -> \"global\", []\n    | EntityKind.Variable _ -> \"variable\", []\n    | EntityKind.Binding _ -> \"binding\", []\n    | EntityKind.ArgumentList _ -> \"args\", []\n    | EntityKind.CallSite _ -> \"callsite\", []\n    | EntityKind.Member _ -> \"member\", []\n    | EntityKind.MemberAccess _ -> \"access\", []\n    | EntityKind.MemberName(n) -> \"name\", [\"name\", box n.Name]\n    | EntityKind.NamedParam(n, _) -> \"param\", [\"name\", box n.Name]\n    | EntityKind.Placeholder(n, _) -> \"placeholder\", [\"name\", box n.Name]\n    | EntityKind.Call _ -> \"call\", []\n  [ yield \"kind\", box kind\n    if rng.IsSome then yield \"range\", JsInterop.createObj [ \"start\", box rng.Value.Start; \"end\", box rng.Value.End ]\n    yield \"getChildren\", box (fun () -> ent.Antecedents |> List.toArray |> Array.map (serializeEntity None))\n    yield \"type\", match ent.Type with Some t -> serializeType t | _ -> box \"unknown\" \n    yield! extras ]\n  |> JsInterop.createObj\n\ntype checkingResult(_wellTyped:bool, _bindingResult:Binder.BindingResult, _program:Program) = \n  member x.wellTyped = _wellTyped\n  member x.getEntities() = _bindingResult.Entities |> Array.map (fun (rng, ent) ->\n    serializeEntity (Some rng) ent)\n\ntype editor(ed:monaco.editor.ICodeEditor) = \n  member x.getMonacoEditor() = ed\n  member x.getValue() = \n    ed.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\n  member x.setValue(text) = \n    ed.getModel().setValue(text)\n\ntype gamma(ctx:TheGammaContext) =\n  static member createContext(providers:TheGammaProviders) =\n    // Initialize and return services\n    let checkingSvc = CheckingService(\"\", providers.globals)\n    gamma({ checkingService = checkingSvc; providers = providers })\n\n  member x.check(code) = \n    async {\n      let! res = ctx.checkingService.TypeCheck(code)\n      return checkingResult(res) } |> thenable\n\n  member x.evaluate(code, ?outputId) = \n    async {\n      try return! evaluate ctx code outputId\n      with e ->\n        Log.exn(\"api\", \"Evaluating code '%O' failed with error '%O'.\", code, e)\n        return! raise e } |> thenable\n\n  member x.errorsReported(f) = \n    ctx.checkingService.ErrorsReported.Add(fun (source, errors) ->\n      errors \n      |> Array.sortBy (fun e -> e.Range.Start)\n      |> Array.map (fun e -> \n          { number = e.Number; message = e.Message; \n            startLine = e.Range.Start.Line; startColumn = e.Range.Start.Column;\n            endLine = e.Range.End.Line; endColumn = e.Range.End.Column }) \n      |> f )\n\n  member x.createBlocks(id) = \n    Blocks.createBlockEditor ctx.checkingService ctx.providers.globals id\n\n  member x.createEditor(id, source, options) =\n\n    // Create editor using the size of the #id element, or size given by the user.\n    // Store 'lineHeight', so that we can calculate size of editor when auto-sizing.\n    let mutable lineHeight = 20.0\n    let options = defaultArg options defaultEditorOptions \n    let el = document.getElementById(id)\n    let width = defaultArg options.width el.clientWidth\n    let height = defaultArg options.height el.clientHeight\n    let maxHeight = defaultArg options.maxHeight (float System.Int32.MaxValue)\n    let ed = Monaco.createMonacoEditor id source ctx.checkingService (fun opts ->\n      opts.fontSize <- Some 15.0\n      opts.lineHeight <- Some 20.0\n      (defaultArg options.monacoOptions ignore) opts\n      match opts.lineHeight with Some n -> lineHeight <- n | _ -> () )\n\n    let dim = JsInterop.createEmpty<monaco.editor.IDimension>\n    dim.width <- width\n    dim.height <- height\n    ed.layout(dim)\n\n    let previewService = \n      if defaultArg options.enablePreview true then\n        Some(PreviewService(ctx.checkingService, ctx.providers.globals, ed, previews))\n      else None\n\n    let mutable lastHeight = -1.0\n    let autosizeEditor () =\n      let text = ed.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\n      let lines = 1.0 + float (text.Split('\\n').Length)\n      let zoneHeight = match previewService with Some ps -> ps.ZoneHeight | _ -> 0.0\n      let height = min maxHeight (max 200.0 (lines * 20.0 + zoneHeight))\n      if height <> lastHeight then\n        lastHeight <- height\n        let dim = JsInterop.createEmpty<monaco.editor.IDimension>\n        dim.width <- width\n        dim.height <- height\n        ed.layout(dim)\n        el.style.height <- string dim.height + \"px\" \n        el.style.width <- string dim.width + \"px\" \n\n    if options.autoHeight = Some true then\n      ed.getModel().onDidChangeContent(fun _ -> autosizeEditor ()) |> ignore     \n      match previewService with\n      | Some ps -> ps.ZoneSizeChanged.Add(fun _ -> autosizeEditor ())\n      | _ -> ()\n      autosizeEditor ()\n\n    editor(ed)\n  \ntype providers =\n  static member createProviders(providers) =\n    // Initialize type providers specified as key/values of the given object\n    let globals = buildGlobalsTable (fun lookup -> async {\n      let providers = JsHelpers.properties(providers) |> Array.map (fun kv ->\n        (unbox<provider> kv.value) kv.key lookup)\n      let! providers = Async.Parallel providers\n      return Seq.concat providers })\n    { globals = globals }    \n\n  static member rest(url, ?cookies, ?ignoreFilter) : provider = \n    (fun name lookup -> async {\n      let provider = \n        TypeProviders.RestProvider.provideRestType \n          lookup (resolveProvider lookup (defaultArg ignoreFilter false)) name url (defaultArg cookies \"\")\n      return [ provider ] })\n\n  static member library(url) : provider = \n    (fun _ lookup ->\n      TypeProviders.FSharpProvider.provideFSharpTypes lookup url)\n\n  static member pivot(url, ?ignoreFilter) : provider = \n    (fun name lookup -> async {\n      let! t = TypeProviders.Pivot.providePivotType url (defaultArg ignoreFilter false) name lookup \n      return [t] })"],"names":["require$$0","require$$1","defined","toInteger","min","toIObject","require$$2","global","require$$3","$keys","isObject","document","dP","core","$export","anObject","require$$5","require$$4","enumBugKeys","IE_PROTO","PROTOTYPE","has","setToStringTag","toObject","require$$9","require$$8","require$$7","hide","require$$6","Iterators","ITERATOR","createDesc","cof","TAG","ctx","toLength","LIBRARY","wksExt","getKeys","gOPN","toString","pIE","toPrimitive","IE8_DOM_DEFINE","gOPD","require$$28","require$$27","require$$26","require$$25","redefine","require$$24","require$$23","require$$22","shared","require$$21","require$$20","uid","require$$19","require$$18","require$$17","require$$16","require$$15","require$$14","require$$13","require$$12","require$$11","require$$10","ObjectProto","$defineProperty","DESCRIPTORS","create","step","fastKey","validate","isArray","SPECIES","IObject","fails","redefineAll","forOf","anInstance","classof","from","aFunction","FSymbol","ofArray","List","map","max","subtract","replace","split","groupBy","tryFind","add","tree_height","tree_mk","tree_rebalance","tree_add","tree_filterAux","tree_filter","tree_mem","tree_mkFromEnumerator","tree_ofSeq","tree_collapseLHS","listOfArray","tree_mkIterator","tree_moveNext","seqCompareWith","seqMap","filter","append","seqFold","reverse","choose","collect","concat","initialize","mapIndexed","seqChoose","seqScan","item","singleton","Async","start","append_1","fold","map_1","_range","singleton_1","version","isWidget","isThunk","isVNode","isVText","handleThunk","isHook","diffProps","diff","remove","slice","Comment","DOMText","dispatchEvent","addEventListener","removeEventListener","serializeNode","domWalk","DOMElement","DocumentFragment","Event","Document","proto","applyProperties","getPrototype","domIndex","updateWidget","VPatch","applyPatch","vpatch","render","patch","parseTag","Individual","EvStore","VNode","VText","h","createElement","seqIterate","min_2","max_1","filter_1","trimRight","trimLeft","concatUrl","getTypeAndEmitter","add_1","cancellationToken","trim","$parseFloat","number","node","tryFind_1","getType","choose_1","node_1","offsetToLocation","rangeToLoc","collect_1","last_1"],"mappings":"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"}